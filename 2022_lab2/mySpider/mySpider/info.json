[{"Title": ["Jury Compromise"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 40601"], "Accepted": [" 11035"], "Description": ["In Frobnia, a far-away country, the verdicts in court trials are determined by a jury consisting of members of the general public. Every time a trial is set to begin, a jury has to be selected, which is done as follows. First, several people are drawn randomly from the public. For each person in this pool, defence and prosecution assign a grade from 0 to 20 indicating their preference for this person. 0 means total dislike, 20 on the other hand means that this person is considered ideally suited for the jury. \r", "Based on the grades of the two parties, the judge selects the jury. In order to ensure a fair trial, the tendencies of the jury to favour either defence or prosecution should be as balanced as possible. The jury therefore has to be chosen in a way that is satisfactory to both parties. \r", "We will now make this more precise: given a pool of n potential jurors and two values di (the defence's value) and pi (the prosecution's value) for each potential juror i, you are to select a jury of m persons. If J is a subset of {1,..., n} with m elements, then D(J ) = sum(dk)  k belong to J\r", "and P(J) = sum(pk) k belong to J are the total values of this jury for defence and prosecution. \r", "For an optimal jury J , the value |D(J) - P(J)| must be minimal. If there are several jurys with minimal |D(J) - P(J)|, one which maximizes D(J) + P(J) should be selected since the jury should be as ideal as possible for both parties. \r", "You are to write a program that implements this jury selection process and chooses an optimal jury given a set of candidates. "], "Input": ["The input file contains several jury selection rounds. Each round starts with a line containing two integers n and m. n is the number of candidates and m the number of jury members. \r", "These values will satisfy 1<=n<=200, 1<=m<=20 and of course m<=n. The following n lines contain the two integers pi and di for i = 1,...,n. A blank line separates each round from the next. \r", "The file ends with a round that has n = m = 0. "], "OutPut": ["For each round output a line containing the number of the jury selection round ('Jury #1', 'Jury #2', etc.). \r", "On the next line print the values D(J ) and P (J ) of your jury as shown below and on another line print the numbers of the m chosen candidates in ascending order. Output a blank before each individual candidate number. \r", "Output an empty line after each test case. "], "SampleInput": ["4 2 \r\n1 2 \r\n2 3 \r\n4 1 \r\n6 2 \r\n0 0 "], "SampleOutput": ["Jury #1 \r\nBest jury has value 6 for prosecution and value 4 for defence: \r\n 2 3 "], "Hint": ["If your solution is based on an inefficient algorithm, it may not execute in the allotted time. "], "Source": ["Southwestern European Regional Contest 1996"]},
{"Title": ["Dividing"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 82109"], "Accepted": [" 21714"], "Description": ["Marsha and Bill own a collection of marbles. They want to split the collection among themselves so that both receive an equal share of the marbles. This would be easy if all the marbles had the same value, because then they could just split the collection in half. But unfortunately, some of the marbles are larger, or more beautiful than others. So, Marsha and Bill start by assigning a value, a natural number between one and six, to each marble. Now they want to divide the marbles so that each of them gets the same total value. Unfortunately, they realize that it might be impossible to divide the marbles in this way (even if the total value of all marbles is even). For example, if there are one marble of value 1, one of value 3 and two of value 4, then they cannot be split into sets of equal value. So, they ask you to write a program that checks whether there is a fair partition of the marbles. "], "Input": ["Each line in the input file describes one collection of marbles to be divided. The lines contain six non-negative integers n1 , . . . , n6 , where ni is the number of marbles of value i. So, the example from above would be described by the input-line \"1 0 1 2 0 0\". The maximum total number of marbles will be 20000. \r", "The last line of the input file will be \"0 0 0 0 0 0\"; do not process this line. "], "OutPut": ["For each collection, output \"Collection #k:\", where k is the number of the test case, and then either \"Can be divided.\" or \"Can't be divided.\". \r", "Output a blank line after each test case. "], "SampleInput": ["1 0 1 2 0 0 \r\n1 0 0 0 1 1 \r\n0 0 0 0 0 0 "], "SampleOutput": ["Collection #1:\r\nCan't be divided.\r\n\r\nCollection #2:\r\nCan be divided."], "Hint": [], "Source": []},
{"Title": ["Counterfeit Dollar"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 59679"], "Accepted": [" 18159"], "Description": ["Sally Jones has a dozen Voyageur silver dollars. However, only eleven of the coins are true silver dollars; one coin is counterfeit even though its color and size make it indistinguishable from the real silver dollars. The counterfeit coin has a different weight from the other coins but Sally does not know if it is heavier or lighter than the real coins. \r", "Happily, Sally has a friend who loans her a very accurate balance scale. The friend will permit Sally three weighings to find the counterfeit coin. For instance, if Sally weighs two coins against each other and the scales balance then she knows these two coins are true. Now if Sally weighs \r", "one of the true coins against a third coin and the scales do not balance then Sally knows the third coin is counterfeit and she can tell whether it is light or heavy depending on whether the balance on which it is placed goes up or down, respectively. \r", "By choosing her weighings carefully, Sally is able to ensure that she will find the counterfeit coin with exactly three weighings. "], "Input": ["The first line of input is an integer n (n > 0) specifying the number of cases to follow. Each case consists of three lines of input, one for each weighing. Sally has identified each of the coins with the letters A--L. Information on a weighing will be given by two strings of letters and then one of the words ``up'', ``down'', or ``even''. The first string of letters will represent the coins on the left balance; the second string, the coins on the right balance. (Sally will always place the same number of coins on the right balance as on the left balance.) The word in the third position will tell whether the right side of the balance goes up, down, or remains even. "], "OutPut": ["For each case, the output will identify the counterfeit coin by its letter and tell whether it is heavy or light. The solution will always be uniquely determined. "], "SampleInput": ["1 \r\nABCD EFGH even \r\nABCI EFJK up \r\nABIJ EFGH even "], "SampleOutput": ["K is the counterfeit coin and it is light. "], "Hint": [], "Source": []},
{"Title": ["Joseph"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 63882"], "Accepted": [" 24012"], "Description": ["The Joseph's problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every mth is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when n = 6 and m = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved.\r", "\r", "Suppose that there are k good guys and k bad guys. In the circle the first k are good guys and the last k bad guys. You have to determine such minimal m that all the bad guys will be executed before the first good guy. \r", "\r"], "Input": ["The input file consists of separate lines containing k. The last line in the input file contains 0. You can suppose that 0 < k < 14. "], "OutPut": ["The output file will consist of separate lines containing m corresponding to k in the input file. "], "SampleInput": ["3\r\n4\r\n0\r\n"], "SampleOutput": ["5\r\n30\r\n\r\n"], "Hint": [], "Source": []},
{"Title": ["Sticks"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 176314"], "Accepted": [" 42638"], "Description": ["George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero. "], "Input": ["The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero."], "OutPut": ["The output should contains the smallest possible length of original sticks, one per line. "], "SampleInput": ["9\r\n5 2 1 5 2 1 5 2 1\r\n4\r\n1 2 3 4\r\n0\r\n"], "SampleOutput": ["6\r\n5"], "Hint": [], "Source": []},
{"Title": ["STAMPS"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 21517"], "Accepted": [" 6441"], "Description": ["Have you done any Philately lately? \r", "\r", "You have been hired by the Ruritanian Postal Service (RPS) to design their new postage software.  The software allocates stamps to customers based on customer needs and the denominations that are currently in stock.\r", "\r", "Ruritania is filled with people who correspond with stamp collectors. As a service to these people, the RPS asks that all stamp allocations have the maximum number of different types of stamps in it.  In fact, the RPS has been known to issue several stamps of the same denomination in order to please customers (these count as different types, even though they are the same denomination).  The maximum number of different types of stamps issued at any time is twenty-five.\r", "\r", "To save money, the RPS would like to issue as few duplicate stamps as possible (given the constraint that they want to issue as many different types).  Further, the RPS won't sell more than four stamps at a time.\r"], "Input": ["The input for your program will be pairs of positive integer sequences, consisting of two lines, alternating until end-of-file.  The first sequence are the available values of stamps, while the second sequence is a series of customer requests.  For example:\r", "\r", "1 2 3 0\t; three different stamp types\r", "7 4 0\t\t; two customers\r", "1 1 0\t\t; a new set of stamps (two of the same type)\r", "6 2 3 0\t; three customers\r", "\r", "Note: the comments in this example are *not* part of the data file; data files contain only integers. "], "OutPut": ["For each customer, you should print the \"best\" combination that is exactly equal to the customer's needs, with a maximum of four stamps. If no such combination exists, print \"none\". \r", "The \"best\" combination is defined as the maximum number of different stamp types.  In case of a tie, the combination with the fewest total stamps is best.  If still tied, the set with the highest single-value stamp is best.  If there is still a tie, print \"tie\". \r", "\r", "For the sample input file, the output should be:\r", "\r", "7 (3): 1 1 2 3 \r", "4 (2): 1 3 \r", "6 ---- none\r", "2 (2): 1 1\r", "3 (2): tie\r", "\r", "That is, you should print the customer request, the number of types sold and the actual stamps.  In case of no legal allocation, the line should look like it does in the example, with four hyphens after a space.  In the case of a tie, still print the number of types but do not print the allocation (again, as in the example).Don't print extra blank at the end of each line.\r"], "SampleInput": ["1 2 3 0\t; three different stamp types\r\n7 4 0\t\t; two customers\r\n1 1 0\t\t; a new set of stamps (two of the same type)\r\n6 2 3 0\t; three customers"], "SampleOutput": ["7 (3): 1 1 2 3 \r\n4 (2): 1 3 \r\n6 ---- none\r\n2 (2): 1 1\r\n3 (2): tie"], "Hint": [], "Source": []},
{"Title": ["Edge Detection"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 25383"], "Accepted": [" 6113"], "Description": ["IONU Satellite Imaging, Inc. records and stores very large images using run  length encoding. You are to write a program that reads a compressed image, finds the edges in the image, as described below, and outputs another compressed image of the detected edges.\r", "A simple edge detection algorithm sets an output pixel's value to be the maximum absolute value of the differences between it and all its surrounding pixels in the input image. Consider the input image below:\r", "\r", "The upper left pixel in the output image is the maximum of the values |15-15|,|15-100|, and |15-100|, which is 85. The pixel in the 4th row, 2nd column is computed as the maximum of |175-100|, |175-100|, |175-100|, |175-175|, |175-25|, |175-175|,|175-175|, and |175-25|, which is 150.\r", "Images contain 2 to 1,000,000,000 (10", ") pixels. All images are encoded using run length encoding (RLE). This is a sequence of pairs, containing pixel value (0-255) and run length (1-10", "). Input images have at most 1,000 of these pairs. Successive pairs have different pixel values. All lines in an image contain the same number of pixels.\r"], "Input": ["Input consists of information for one or more images. Each image starts with the width, in pixels, of each image line. This is followed by the RLE pairs, one pair per line. A line with 0 0 indicates the end of the data for that image. An image width of 0 indicates there are no more images to process. The first image in the example input encodes the 5x7 input image above.\r"], "OutPut": ["Output is a series of edge-detected images, in the same format as the input images, except that there may be more than 1,000 RLE pairs.\r"], "SampleInput": ["7\r\n15 4\r\n100 15\r\n25 2\r\n175 2\r\n25 5\r\n175 2\r\n25 5\r\n0 0\r\n10\r\n35 500000000\r\n200 500000000\r\n0 0\r\n3\r\n255 1\r\n10 1\r\n255 2\r\n10 1\r\n255 2\r\n10 1\r\n255 1\r\n0 0\r\n0\r\n"], "SampleOutput": ["7\r\n85 5\r\n0 2\r\n85 5\r\n75 10\r\n150 2\r\n75 3\r\n0 2\r\n150 2\r\n0 4\r\n0 0\r\n10\r\n0 499999990\r\n165 20\r\n0 499999990\r\n0 0\r\n3\r\n245 9\r\n0 0\r\n0\r\n"], "Hint": ["A brute force solution that attempts to compute an output value for every individual pixel will likely fail due to space or time constraints.\r"], "Source": ["Mid-Central USA 2000"]},
{"Title": ["Maya Calendar"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 93156"], "Accepted": [" 28528"], "Description": ["During his last sabbatical, professor M. A. Ya made a surprising discovery about the old Maya calendar. From an old knotted message, professor discovered that the Maya civilization used a 365 day long year, called Haab, which had 19 months. Each of the first 18 months was 20 days long, and the names of the months were pop, no, zip, zotz, tzec, xul, yoxkin, mol, chen, yax, zac, ceh, mac, kankin, muan, pax, koyab, cumhu. Instead of having names, the days of the months were denoted by numbers starting from 0 to 19. The last month of Haab was called uayet and had 5 days denoted by numbers 0, 1, 2, 3, 4. The Maya believed that this month was unlucky, the court of justice was not in session, the trade stopped, people did not even sweep the floor. \r", "\r", "For religious purposes, the Maya used another calendar in which the year was called Tzolkin (holly year). The year was divided into thirteen periods, each 20 days long. Each day was denoted by a pair consisting of a number and the name of the day. They used 20 names: imix, ik, akbal, kan, chicchan, cimi, manik, lamat, muluk, ok, chuen, eb, ben, ix, mem, cib, caban, eznab, canac, ahau and 13 numbers; both in cycles. \r", "\r", "Notice that each day has an unambiguous description. For example, at the beginning of the year the days were described as follows: \r", "\r", "1 imix, 2 ik, 3 akbal, 4 kan, 5 chicchan, 6 cimi, 7 manik, 8 lamat, 9 muluk, 10 ok, 11 chuen, 12 eb, 13 ben, 1 ix, 2 mem, 3 cib, 4 caban, 5 eznab, 6 canac, 7 ahau, and again in the next period 8 imix, 9 ik, 10 akbal . . .\r", "\r", "Years (both Haab and Tzolkin) were denoted by numbers 0, 1, : : : , where the number 0 was the beginning of the world. Thus, the first day was: \r", "\r", "Haab: 0. pop 0 \r", "\r", "Tzolkin: 1 imix 0 \r", "Help professor M. A. Ya and write a program for him to convert the dates from the Haab calendar to the Tzolkin calendar. \r"], "Input": ["The date in Haab is given in the following format:\r", "NumberOfTheDay. Month Year\r", "\r", "The first line of the input file contains the number of the input dates in the file. The next n lines contain n dates in the Haab calendar format, each in separate line. The year is smaller then 5000. \r"], "OutPut": ["The date in Tzolkin should be in the following format:\r", "Number NameOfTheDay Year\r", "\r", "The first line of the output file contains the number of the output dates. In the next n lines, there are dates in the Tzolkin calendar format, in the order corresponding to the input dates. \r"], "SampleInput": ["3\r\n10. zac 0\r\n0. pop 0\r\n10. zac 1995"], "SampleOutput": ["3\r\n3 chuen 0\r\n1 imix 0\r\n9 cimi 2801"], "Hint": [], "Source": []},
{"Title": ["DNA Sorting"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 126094"], "Accepted": [" 49484"], "Description": ["One measure of ``unsortedness'' in a sequence is the number of pairs of entries that are out of order with respect to each other. For instance, in the letter sequence ``DAABEC'', this measure is 5, since D is greater than four letters to its right and E is greater than one letter to its right. This measure is called the number of inversions in the sequence. The sequence ``AACEDGG'' has only one inversion (E and D)---it is nearly sorted---while the sequence ``ZWQM'' has 6 inversions (it is as unsorted as can be---exactly the reverse of sorted).\r", "\r", "You are responsible for cataloguing a sequence of DNA strings (sequences containing only the four letters A, C, G, and T). However, you want to catalog them, not in alphabetical order, but rather in order of ``sortedness'', from ``most sorted'' to ``least sorted''. All the strings are of the same length.\r"], "Input": ["The first line contains two integers: a positive integer n (0 < n <= 50) giving the length of the strings; and a positive integer m (0 < m <= 100) giving the number of strings. These are followed by m lines, each containing a string of length n."], "OutPut": ["Output the list of input strings, arranged from ``most sorted'' to ``least sorted''. Since two strings can be equally sorted, then output them according to the orginal order."], "SampleInput": ["10 6\r\nAACATGAAGG\r\nTTTTGGCCAA\r\nTTTGGCCAAA\r\nGATCAGATTT\r\nCCCGGGGGGA\r\nATCGATGCAT"], "SampleOutput": ["CCCGGGGGGA\r\nAACATGAAGG\r\nGATCAGATTT\r\nATCGATGCAT\r\nTTTTGGCCAA\r\nTTTGGCCAAA"], "Hint": [], "Source": []},
{"Title": ["Biorhythms"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 163120"], "Accepted": [" 53285"], "Description": ["Some people believe that there are three cycles in a person's life that start the day he or she is born. These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths 23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle, a person performs at his or her best in the corresponding field (physical, emotional or mental). For example, if it is the mental curve, thought processes will be sharper and concentration will be easier. \r", "Since the three cycles have different periods, the peaks of the three cycles generally occur at different times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the same day) for any person. For each cycle, you will be given the number of days from the beginning of the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a date expressed as the number of days from the beginning of the current year. You task is to determine the number of days from the given date to the next triple peak. The given date is not counted. For example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a triple peak occurs on the given date, you should give the number of days to the next occurrence of a triple peak.\r"], "Input": ["You will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which p = e = i = d = -1. "], "OutPut": ["For each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form:\r", "\r", "Case 1: the next triple peak occurs in 1234 days.\r", "\r", "Use the plural form ``days'' even if the answer is 1. "], "SampleInput": ["0 0 0 0\r\n0 0 0 100\r\n5 20 34 325\r\n4 5 6 7\r\n283 102 23 320\r\n203 301 203 40\r\n-1 -1 -1 -1"], "SampleOutput": ["Case 1: the next triple peak occurs in 21252 days.\r\nCase 2: the next triple peak occurs in 21152 days.\r\nCase 3: the next triple peak occurs in 19575 days.\r\nCase 4: the next triple peak occurs in 16994 days.\r\nCase 5: the next triple peak occurs in 8910 days.\r\nCase 6: the next triple peak occurs in 10789 days."], "Hint": [], "Source": []},
{"Title": ["I Think I Need a Houseboat"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 127904"], "Accepted": [" 54430"], "Description": ["Fred Mapper is considering purchasing some land in Louisiana to build his house on. In the process of investigating the land, he learned that the state of Louisiana is actually shrinking by 50 square miles each year, due to erosion caused by the Mississippi River. Since Fred is hoping to live in this house the rest of his life, he needs to know if his land is going to be lost to erosion.\r", "\r", "After doing more research, Fred has learned that the land that is being lost forms a semicircle. This semicircle is part of a circle centered at (0,0), with the line that bisects the circle being the X axis. Locations below the X axis are in the water. The semicircle has an area of 0 at the beginning of year 1. (Semicircle illustrated in the Figure.)\r"], "Input": ["The first line of input will be a positive integer indicating how many data sets will be included (N). Each of the next N lines will contain the X and Y Cartesian coordinates of the land Fred is considering. These will be floating point numbers measured in miles. The Y coordinate will be non-negative. (0,0) will not be given."], "OutPut": ["For each data set, a single line of output should appear. This line should take the form of: “Property N: This property will begin eroding in year Z.” Where N is the data set (counting from 1), and Z is the first year (start from 1) this property will be within the semicircle AT THE END OF YEAR Z. Z must be an integer. After the last data set, this should print out “END OF OUTPUT.” "], "SampleInput": ["2\r\n1.0 1.0\r\n25.0 0.0"], "SampleOutput": ["Property 1: This property will begin eroding in year 1.\r\nProperty 2: This property will begin eroding in year 20.\r\nEND OF OUTPUT."], "Hint": ["1.No property will appear exactly on the semicircle boundary: it will either be inside or outside. \r", "2.This problem will be judged automatically. Your answer must match exactly, including the capitalization, punctuation, and white-space. This includes the periods at the ends of the lines. \r", "3.All locations are given in miles. "], "Source": ["Mid-Atlantic 2001"]},
{"Title": ["Financial Management"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 235972"], "Accepted": [" 87658"], "Description": ["Larry graduated this year and finally has a job. He's making a lot of money, but somehow never seems to have enough. Larry has decided that he needs to grab hold of his financial portfolio and solve his financing problems. The first step is to figure out what's been going on with his money. Larry has his bank account statements and wants to see how much money he has. Help Larry by writing a program to take his closing balance from each of the past twelve months and calculate his average account balance. "], "Input": ["The input will be twelve lines. Each line will contain the closing balance of his bank account for a particular month. Each number will be positive and displayed to the penny. No dollar sign will be included. "], "OutPut": ["The output will be a single number, the average (mean) of the closing balances for the twelve months. It will be rounded to the nearest penny, preceded immediately by a dollar sign, and followed by the end-of-line. There will be no other spaces or characters in the output. "], "SampleInput": ["100.00\r\n489.12\r\n12454.12\r\n1234.10\r\n823.05\r\n109.20\r\n5.27\r\n1542.25\r\n839.18\r\n83.99\r\n1295.01\r\n1.75"], "SampleOutput": ["$1581.42"], "Hint": [], "Source": []},
{"Title": ["Hangover"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 153345"], "Accepted": [" 74009"], "Description": ["\r", "\r"], "Input": ["The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits."], "OutPut": ["For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples."], "SampleInput": ["1.00\r\n3.71\r\n0.04\r\n5.19\r\n0.00\r\n"], "SampleOutput": ["3 card(s)\r\n61 card(s)\r\n1 card(s)\r\n273 card(s)"], "Hint": [], "Source": []},
{"Title": ["487-3279"], "TimeLimit": [" 2000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 336014"], "Accepted": [" 59569"], "Description": ["Businesses like to have memorable telephone numbers. One way to make a telephone number memorable is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When you get back to your hotel tonight you can order a pizza from Gino's by dialing 310-GINO. Another way to make a telephone number memorable is to group the digits in a memorable way. You could order your pizza from Pizza Hut by calling their ``three tens'' number 3-10-10-10.\r", "\r", "The standard form of a telephone number is seven decimal digits with a hyphen between the third and fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows:\r", "\r", "A, B, and C map to 2\r", "D, E, and F map to 3\r", "G, H, and I map to 4\r", "J, K, and L map to 5\r", "M, N, and O map to 6\r", "P, R, and S map to 7\r", "T, U, and V map to 8\r", "W, X, and Y map to 9\r", "\r", "There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary. The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the standard form of 3-10-10-10 is 310-1010.\r", "\r", "Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.)\r", "\r", "Your company is compiling a directory of telephone numbers from local businesses. As part of the quality control process you want to check that no two (or more) businesses in the directory have the same telephone number.\r", "\r"], "Input": ["The input will consist of one case. The first line of the input specifies the number of telephone numbers in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the telephone numbers in the directory, with each number alone on a line. Each telephone number consists of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly seven of the characters in the string will be digits or letters.\r"], "OutPut": ["Generate a line of output for each telephone number that appears more than once in any form. The line should give the telephone number in standard form, followed by a space, followed by the number of times the telephone number appears in the directory. Arrange the output lines by telephone number in ascending lexicographical order. If there are no duplicates in the input print the line:\r", "\r", "No duplicates.\r"], "SampleInput": ["12\r\n4873279\r\nITS-EASY\r\n888-4567\r\n3-10-10-10\r\n888-GLOP\r\nTUT-GLOP\r\n967-11-11\r\n310-GINO\r\nF101010\r\n888-1200\r\n-4-8-7-3-2-7-9-\r\n487-3279\r\n"], "SampleOutput": ["310-1010 2\r\n487-3279 4\r\n888-4567 3"], "Hint": [], "Source": []},
{"Title": ["Exponentiation"], "TimeLimit": [" 500MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 201741"], "Accepted": [" 48246"], "Description": ["Problems involving the computation of exact values of very large magnitude and precision are common. For example, the computation of the national debt is a taxing experience for many computer systems. \r", "\r", "This problem requires that you write a program to compute the exact value of R", " where R is a real number ( 0.0 < R < 99.999 ) and n is an integer such that 0 < n <= 25. "], "Input": ["The input will consist of a set of pairs of values for R and n. The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9."], "OutPut": ["The output will consist of one line for each line of input giving the exact value of R^n. Leading zeros should be suppressed in the output. Insignificant trailing zeros must not be printed. Don't print the decimal point if the result is an integer."], "SampleInput": ["95.123 12\r\n0.4321 20\r\n5.1234 15\r\n6.7592  9\r\n98.999 10\r\n1.0100 12\r\n"], "SampleOutput": ["548815620517731830194541.899025343415715973535967221869852721\r\n.00000005148554641076956121994511276767154838481760200726351203835429763013462401\r\n43992025569.928573701266488041146654993318703707511666295476720493953024\r\n29448126.764121021618164430206909037173276672\r\n90429072743629540498.107596019456651774561044010001\r\n1.126825030131969720661201"], "Hint": ["If you don't know how to determine wheather encounted the end of input:\r", " is a string and ", " is an integer\r"], "Source": ["East Central North America 1988"]},
{"Title": ["A+B Problem"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 557797"], "Accepted": [" 314419"], "Description": ["Calculate a+b "], "Input": ["Two integer a,b (0<=a,b<=10)"], "OutPut": ["Output a+b"], "SampleInput": ["1 2"], "SampleOutput": ["3"], "Hint": ["Q: Where are the input and the output?\r", "\r", "A: Your program shall always ", ". For example, you can use 'scanf' in C or 'cin' in C++ to read from stdin, and use 'printf' in C or 'cout' in C++ to write to stdout.\r", "\r", "You ", " to standard output other than that required by the problem, otherwise you will get a \"Wrong Answer\".\r", "\r", "User programs are not allowed to open and read from/write to files. You will get a \"Runtime Error\" or a \"Wrong Answer\"if you try to do so. \r", "\r", "Here is a sample solution to problem 1000 using C++/G++:\r", "It's important that the return type of main() must be int when you use G++/GCC,or you may get compile error.\r", "\r", "Here is a sample solution to problem 1000 using C/GCC:\r", "Here is a sample solution to problem 1000 using Pascal:\r", "Here is a sample solution to problem 1000 using Java:\r", "\r", "Now java compiler is jdk 1.5, next is program for 1000\r", "Old program for jdk 1.4\r", "Here is a sample solution to problem 1000 using Fortran:\r"], "Source": ["POJ"]},
{"Title": ["Square Ice"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 4900"], "Accepted": [" 1892"], "Description": ["Square Ice is a two-dimensional arrangement of water molecules H2O, with oxygen at the vertices of a square lattice and one hydrogen atom between each pair of adjacent oxygen atoms. The hydrogen atoms must stick out on the left and right sides but are not allowed to stick out the top or bottom. One 5 x 5 example is shown below. \r", "\r", "Note that each hydrogen atom is attached to exactly one of its neighboring oxygen atoms and each oxygen atom is attached to two of its neighboring hydrogen atoms. (Recall that one water molecule is a unit of one O linked to two H's.)\r", "\r", "It turns out we can encode a square ice pattern with what is known as an alternating sign matrix (ASM): horizontal molecules are encoded as 1, vertical molecules are encoded as -1 and all other molecules are encoded as 0. So, the above pattern would be encoded as:\r", "\r", "An ASM is a square matrix with entries 0, 1 and -1, where the sum of each row and column is 1 and the non-zero entries in each row and in each column must alternate in sign. (It turns out there is a one-to-one correspondence between ASM's and square ice patterns!)\r", "\r", "Your job is to display the square ice pattern, in the same format as the example above, for a given ASM. Use dashes (-) for horizontal attachments and vertical bars (|) for vertical attachments. The pattern should be surrounded with a border of asterisks (*), be left justified and there should be exactly one character between neighboring hydrogen atoms (H) and oxygen atoms (O): either a space, a dash or a vertical bar.\r", "\r"], "Input": ["Input consists of multiple cases. Each case consists of a positive integer m (<= 11) on a line followed by m lines giving the entries of an ASM. Each line gives a row of the ASM with entries separated by a single space. The end of input is indicated by a line containing m = 0."], "OutPut": ["For each case, print the case number (starting from 1), in the format shown in the Sample Output, followed by a blank line, followed by the corresponding square ice pattern in the format described above. Separate the output of different cases by a blank line."], "SampleInput": ["2\r\n0 1\r\n1 0\r\n4\r\n0 1 0 0\r\n1 -1 0 1\r\n0 0 1 0\r\n0 1 0 0\r\n0"], "SampleOutput": ["Case 1:\r\n\r\n***********\r\n*H-O H-O-H*\r\n*  |      *\r\n*  H   H  *\r\n*      |  *\r\n*H-O-H O-H*\r\n***********\r\n\r\nCase 2:\r\n\r\n*******************\r\n*H-O H-O-H O-H O-H*\r\n*  |       |   |  *\r\n*  H   H   H   H  *\r\n*      |          *\r\n*H-O-H O H-O H-O-H*\r\n*      |   |      *\r\n*  H   H   H   H  *\r\n*  |           |  *\r\n*H-O H-O H-O-H O-H*\r\n*      |          *\r\n*  H   H   H   H  *\r\n*  |       |   |  *\r\n*H-O H-O-H O-H O-H*\r\n*******************"], "Hint": [], "Source": []},
{"Title": ["Robots"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 796"], "Accepted": [" 216"], "Description": ["The Robots game is a one-player game played on a 31 x 31 board. The board is partitioned into 1 x 1 cells arranged in 31 rows and 31 columns. Each cell is indexed by (r, c) where r is the row and c is the column (starting from 1), and it may be empty, occupied by you, occupied by a robot, or occupied by debris. The object of this game is to move in such a way to destroy all the robots before the robots destroy you. \r", "Initially, you occupy the cell at (15, 15), and there are R robots (1 <= R <= 50) located in R different cells other than (15, 15). All other cells are empty. You are also given a list of T (0 <= T <= 20) cells that are potential teleport locations. You make the first move, and then the robots and you alternate moves. At your move, you are allowed to walk to an adjacent cell in any one of the eight compass directions, teleport to one of the specified teleport locations, or remain stationary. You may walk to an adjacent cell if it is empty. In addition, you may walk to an adjacent cell which contains debris by pushing the debris to the next adjacent cell along the line of movement, provided that the next cell does not already contain debris. If a cell that debris is pushed to contains a robot, that robot is destroyed. If you choose to teleport, the destination must be an empty cell. You may not make any move that will leave you or any debris that you push outside of the board.\r", "When the robots move, each robot walks to the adjacent cell (even if it is not empty) in the eight compass directions such that the destination cell is closest to your current position (i.e. after your last move). The distance between two cells (r1, c1) and (r2, c2) is defined to be | r1 - r2 | + | c1 - c2 |. All robots walk at the same time during a move. If two or more robots walk to the same cell, or if a robot walks to a cell containing debris, all of these robots are destroyed. Destroyed robots become debris.\r", "You lose the game if any robot walks to your current position, even if multiple robots do so and destroy each other. You win the game if all robots are destroyed and none has moved to your current position.\r", "In order to stay in the game as long as possible, you will only consider moves that do not lead to an immediate loss (a loss before your next move). A plausible strategy is to always walk to a cell (or remain stationary) such that the number of robots remaining after your move and the robots' move (i.e. just before your next move) is minimized. In case of a tie, choose the move that maximizes the minimum distance to the remaining robots just before your next move. If there are still ties, choose the move that also minimizes the row index of the destination cell, and finally, break remaining ties by also minimizing the column index.\r", "If it is not possible to make a move by walking or by remaining stationary without leading to an immediate loss, you should teleport to the first unused legal destination chosen from a list of locations given to you, as long as it does not lead to an immediate loss. When you search for a teleport site, you should always start the search at the beginning of the list. If no such teleport destination is available, you should remain stationary, leading to an immediate loss.\r", "In this problem, you will implement this strategy and see how well it works.\r"], "Input": ["The input consists of a number of instances. The first line of each instance contains the integers R and T separated by a space. This is followed by R lines containing two integers separated by a space, indicating the row and column of the initial positions of the R robots. You may assume that each robot initially occupies a cell which is not (15, 15) and the locations of the robots are distinct. The next T lines give the list of teleport destinations available. Each line is given by the row and column of the destination cell, separated by a space. The input is terminated by a case with R = T = 0."], "OutPut": ["For each case, print the case number (starting from 1), in the format shown in the Sample Output, on its own line. For each teleport taken, print one line of the form:\r", "\r", "Move m: teleport to (r, c)\r", "\r", "where m is the number of moves you have made (including this one), and (r, c) is the destination of the teleport. This is followed by three lines containing the result of the game. If you win the game, print\r", "\r", "Won game after making m moves.\r", "Final position (r,c)\r", "Number of cells with debris: d\r", "\r", "Where m is the number of moves you have made when you won the game, (r,c) is your final position, and d is the number of cells with debris (use the word \"moves\" even if m = 1). If you lose the game, print\r", "\r", "Lost game after making m moves.\r", "Final position: (r,c)\r", "Number of cells with debris: d\r", "Number of robots remaining: n\r", "\r", "where m is the number of moves you have made when you lost the game, (r.c) is the location at which you are destroyed, d is the number of cells with debris, and n is the number of robots remaining when you lost the game (use the word \"moves\" even if m = 1)."], "SampleInput": ["4 0\r\n17 18\r\n13 18\r\n8 12\r\n10 12\r\n4 0\r\n17 17\r\n13 17\r\n13 13\r\n17 13\r\n3 3\r\n17 18\r\n13 18\r\n5 31\r\n15 16\r\n16 15\r\n3 7\r\n0 0"], "SampleOutput": ["Case 1:\r\nWon game after making 5 moves.\r\nFinal position: (14,16)\r\nNumber of cells with debris: 1\r\n\r\nCase 2:\r\nLost game after making 2 moves.\r\nFinal position: (15,15)\r\nNumber of cells with debris: 1\r\nNumber of robots remaining: 0\r\n\r\nCase 3:\r\nMove 30: teleport to (16,15)\r\nMove 58: teleport to (15,16)\r\nMove 86: teleport to (3,7)\r\nLost game after making 114 moves. \r\nFinal position: (1,29)\r\nNumber of cells with debris: 1\r\nNumber of robots remaining: 1"], "Hint": [], "Source": []},
{"Title": ["Roads Scholar"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1019"], "Accepted": [" 357"], "Description": ["The Hines Sign company has been contracted to supply roadside signs for the state highway system. The head of the company has put his son Myles Hines in charge of one particular class of signs, those which indicate the number of miles to carious towns. Myles is given a layout of the highway system and a set of locations where the signs should go: he is in charge of determining the mileage to nearby cities. To select which cities should be listed on any sign, he uses the following strategy: City X is put on the sign if the sign is on a road such that the shortest path from the intersection immediately preceding the sign to X uses the road. You may assume that there is only one shortest path between each pair of intersections. "], "Input": ["Input consists of a single problem instance consisting of a description of the highway system, followed by a set of sign locations. The highway system is defined as a set of intersections (some of which are also city locations) and a set of roads connecting the intersections. The first line of a problem instance contains three positive integers n m k: n specifies the number of intersections (numbered 0, 1, 2, ..., n-1), m indicates the number of roads between connections, and k indicated the number of intersections which are also cities. Following this are m lines of the form i1 i2 d, which specifies a two-way road between intersections i1 and i2 of distance d. The next k lines are of the form i name, which specifies that intersection i is a city called name. After this is a line with a single positive integer s indicating the number of signs to place on the highway. The remaining s lines are of the form i1 i2 d indicating that a sign is to be placed on the road going from i1 to i2 a distance d from i1 (d will always be non-zero and less than the distance from i1 to i2). For all problem instances, the length of name will be <= 18 characters, and 5 <= n <= 30. All distances will be non-zero and to the nearest hundredth mile."], "OutPut": ["Each sign should be output as follows:\r", "\r", "name1 d1\r", "name2 d2\r", "...\r", "\r", "where each namei should be left justified in a field of width 20, and each distance di is rounded to the nearest mile. (Round .50 up. For example, 7.50 should be rounded to 8.) Each name-distance pair should be sorted by the rounded distance; pairs with the same rounded distance should be printed in alphabetical order. Signs should be output in the order in which they were listed in the input, and you should separate each sign output with a blank line. You may assume that every sign will have at least one city listed on it.\r"], "SampleInput": ["8 17 4\r\n0 1 7.12\r\n0 2 8.34\r\n0 3 5.33\r\n0 4 5.36\r\n1 2 4.21\r\n1 6 6.99\r\n1 7 10.26\r\n2 3 2.74\r\n2 6 5.04\r\n3 4 4.12\r\n3 5 7.72\r\n3 6 5.71\r\n4 5 8.94\r\n4 6 10.29\r\n5 6 5.47\r\n5 7 8.55\r\n6 7 6.01\r\n0 Allentown\r\n1 Bobtown\r\n6 Charlestown\r\n7 Downville\r\n3\r\n0 3 2.17\r\n3 2 0.45\r\n4 3 3.14"], "SampleOutput": ["Charlestown         9\r\nDownville           15\r\n\r\nBobtown             7\r\n\r\nCharlestown         7\r\nBobtown             8\r\nDownville           13"], "Hint": [], "Source": []},
{"Title": ["Space Station Shielding"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 1950"], "Accepted": [" 681"], "Description": ["Roger Wilco is in charge of the design of a low orbiting space station for the planet Mars. To simplify construction, the station is made up of a series of Airtight Cubical Modules (ACM's), which are connected together once in space. One problem that concerns Roger is that of (potentially) lethal bacteria that may reside in the upper atmosphere of Mars. Since the station will occasionally fly through the upper atmosphere, it is imperative that extra shielding be used on all faces of the ACM's touch, either edge to edge or face to face, that joint is sealed so no bacteria can sneak through. Any face of an ACM shared by another ACM will not need shielding, of course, nor will a face which cannot be reached from the outside. Roger could just put extra shielding on all of the faces of every ACM, but the cost would be prohibitive. Therefore, he wants to know the exact number of ACM faces which need the extra shielding. \r"], "Input": ["Input consists of multiple problem instances. Each instance consists of a specification of a space station. We assume that each space station can fit into an n x m x k grid (1 <= n, m, k <= 60), where each grid cube may or may not contain an ACM. We number the grid cubes 0, 1, 2, ..., kmn-1 as shown in the diagram below. Each space station specification then consists of the following: the first line contains four positive integers n m k l, where n, m and k are as described above and l is the number of ACM's in the station. This is followed by a set of lines which specify the l grid locations of the ACM's. Each of these lines contain 10 integers (except possibly the last). Each space station is fully connected (i.e., an astronaut can move from one ACM to any other ACM in the station without leaving the station). Values of n = m = k = l = 0 terminate input.\r"], "OutPut": ["For each problem instance, you should output one line of the form\r", "\r", "The number of faces needing shielding is s."], "SampleInput": ["2 2 1 3\r\n0 1 3\r\n3 3 3 26\r\n0 1 2 3 4 5 6 7 8 9\r\n10 11 12 14 15 16 17 18 19 20\r\n21 22 23 24 25 26\r\n0 0 0 0"], "SampleOutput": ["The number of faces needing shielding is 14.\r\nThe number of faces needing shielding is 54."], "Hint": [], "Source": []},
{"Title": ["Trees Made to Order"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 8183"], "Accepted": [" 4599"], "Description": ["We can number binary trees using the following scheme: \r", "The empty tree is numbered 0.\r", "The single-node tree is numbered 1.\r", "All binary trees having m nodes have numbers less than all those having m+1 nodes.\r", "Any binary tree having m nodes with left and right subtrees L and R is numbered n such that all trees having m nodes numbered > n have either Left subtrees numbered higher than L, or A left subtree = L and a right subtree numbered higher than R.\r", "\r", "The first 10 binary trees and tree number 20 in this sequence are shown below:\r", "\r", "Your job for this problem is to output a binary tree when given its order number.\r"], "Input": ["Input consists of multiple problem instances. Each instance consists of a single integer n, where 1 <= n <= 500,000,000. A value of n = 0 terminates input. (Note that this means you will never have to output the empty tree.)"], "OutPut": ["For each problem instance, you should output one line containing the tree corresponding to the order number for that instance. To print out the tree, use the following scheme:\r", "\r", "A tree with no children should be output as X.\r", "A tree with left and right subtrees L and R should be output as (L')X(R'), where L' and R' are the representations of L and R.\r", "  If L is empty, just output X(R').\r", "  If R is empty, just output (L')X.\r"], "SampleInput": ["1\r\n20\r\n31117532\r\n0"], "SampleOutput": ["X\r\n((X)X(X))X\r\n(X(X(((X(X))X(X))X(X))))X(((X((X)X((X)X)))X)X)"], "Hint": [], "Source": []},
{"Title": ["Sorting It All Out"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 47268"], "Accepted": [" 16401"], "Description": ["An ascending sorted sequence of distinct values is one in which some form of a less-than operator is used to order the elements from smallest to largest. For example, the sorted sequence A, B, C, D implies that A < B, B < C and C < D. in this problem, we will give you a set of relations of the form A < B and ask you to determine whether a sorted order has been specified or not. "], "Input": ["Input consists of multiple problem instances. Each instance starts with a line containing two positive integers n and m. the first value indicated the number of objects to sort, where 2 <= n <= 26. The objects to be sorted will be the first n characters of the uppercase alphabet. The second value m indicates the number of relations of the form A < B which will be given in this problem instance. Next will be m lines, each containing one such relation consisting of three characters: an uppercase letter, the character \"<\" and a second uppercase letter. No letter will be outside the range of the first n letters of the alphabet. Values of n = m = 0 indicate end of input."], "OutPut": ["For each problem instance, output consists of one line. This line should be one of the following three:\r", "\r", "Sorted sequence determined after xxx relations: yyy...y.\r", "Sorted sequence cannot be determined.\r", "Inconsistency found after xxx relations.\r", "\r", "where xxx is the number of relations processed at the time either a sorted sequence is determined or an inconsistency is found, whichever comes first, and yyy...y is the sorted, ascending sequence.\r"], "SampleInput": ["4 6\r\nA<B\r\nA<C\r\nB<C\r\nC<D\r\nB<D\r\nA<B\r\n3 2\r\nA<B\r\nB<A\r\n26 1\r\nA<Z\r\n0 0\r\n"], "SampleOutput": ["Sorted sequence determined after 4 relations: ABCD.\r\nInconsistency found after 2 relations.\r\nSorted sequence cannot be determined."], "Hint": [], "Source": []},
{"Title": ["Formatting Text"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2811"], "Accepted": [" 793"], "Description": ["Writings e-mails is fun, but, unfortunately, they do not look very nice, mainly because not all lines have the same lengths. In this problem, your task is to write an e-mail formatting program which reformats a paragraph of an e-mail (e.g. by inserting spaces) so that, afterwards, all lines have the same length (even the last one of each paragraph). \r", "The easiest way to perform this task would be to insert more spaces between the words in lines which are too short. But this is not the best way. Consider the following example: \r", "Let us assume that we want to get lines as long as the row of stars. Then, by simply inserting spaces, we would get \r", "But this looks rather odd because of the big gap in the second line. By moving the word ``are'' from the first to the second line, we get a better result: \r", "Of course, this has to be formalized. To do this, we assign a badness to each gap between words. The badness assigned to a gap of n spaces is (n - 1)^2. The goal of the program is to minimize the sum of all badnesses. For example, the badness of the first example is 1 + 7^2 = 50 whereas the badness of the second one is only 1 + 1 + 1 + 4 + 1 + 4 = 12. \r", "\r", "In the output, every line has to start and to end with a word. (I.e. there cannot be a gap at the beginning or the end of a line.) The only exception to this is the following: \r", "\r", "If a line contains only one word this word shall be put at the beginning of the line, and a badness of 500 is assigned to this line if it is shorter than it should be. (Of course, in this case, the length of the line is simply the length of the word.) \r"], "Input": ["The input contains a text consisting of several paragraphs. Each paragraph is preceded by a line containing a single integer n, the desired width of the paragraph (1 <= n <= 80). \r", "\r", "Paragraphs consist of one or more lines which contain one or more words each. Words consist of characters with ASCII codes between 33 and 126, inclusive, and are separated by spaces (possibly more than one). No word will be longer than the desired width of the paragraph. The total length of all words of one paragraph will not be more than 10000 characters. \r", "\r", "Each paragraph is terminated by exactly one blank line. There is no limit on the number of paragraphs in the input file. \r", "\r", "The input file will be terminated by a paragraph description starting with n=0. This paragraph should not be processed. \r", "\r"], "OutPut": ["Output the same text, formatted in the way described above (processing each paragraph separately). \r", "\r", "If there are several ways to format a paragraph with the same badness, use the following algorithm to choose which one to output: Let A and B be two solutions. Find the first gap which has not the same length in A and B. Do not output the solution in which this gap is bigger. \r", "\r", "Output a blank line after each paragraph. \r"], "SampleInput": ["28\r\nThis is the example you are\r\nactually considering.\r\n\r\n25\r\nWriting e-mails is fun, and with this program,\r\nthey even look nice.\r\n\r\n0\r\n"], "SampleOutput": ["This  is  the  example   you\r\nare  actually   considering.\r\n\r\nWriting e-mails  is  fun,\r\nand  with  this  program,\r\nthey  even   look   nice."], "Hint": [], "Source": []},
{"Title": ["Farmland"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 1543"], "Accepted": [" 550"], "Description": ["We have a map for farming land in a country. The whole farming land of the  country is divided into a set of disjoint farming regions. Each farmer owns  only one farming region in this country. There is a boundary fence between two neighboring farming regions. The farmland map for this country can be represented in a plane graph. The following Figure-1 shows one example.\r", "\r", "\r", "There are two types of edges, boundary edge and non-boundary edge. All edges of G(V,E) except (v8, v6) and (v11, v10) are boundary edges which are between two neighboring farming regions. The \"proper farming region\" in a Farmland graph is a closed region bounded by a simple cycle and it should not contain any vertices or edges inside. In this figure, the polygon < v1,v9,v8,v7 >is a proper farming region, and the region < v2, v1, v7, v8 , v2, v5, v4, v3 >is not a proper farming region since its boundary cycle is not simple. \r", "We assume that the farmland graph G(V,E) is a simple connected graph, which  does not allow self-loops (Figure-2 (a)) and parallel edges (Figure-2 (b)).Also in Farmland graph G(V,E), we do not consider the outer face of G(V,E).You can see that there are 2 proper farming regions in G(V,E) shown in Figure-1,namely < v1,v9,v8,v7> and < v2,v3,v4,v5>, since there are no vertices or edges inside. But the polygon< v1,v7,v8,v2> is not a proper farming region since vertex v3, v4, and v5 are located in that region. Similarly, the region "], "Input": ["The input consists of M test cases. The first line of the input contains a positive integer M, the number of test cases you are to solve. After the first line,input data for M cases follow. The first line of each test case contains a positive integer N (>=3), the number of vertices. Each of the following N lines is of the form:   ", "\r", "\"i\" is the vertex number, xi and yi are the coordinate (xi, yi) of the vertex i, and di is the degree of the vertex i. The following { ai } are the adjacent vertices of the vertex i. The last line gives k, the size of proper regions that you have to count. \r", "Note that M, the number of cases in input is less than 10. N, the number of vertices of a given farmland graph is less than 200. All vertices are located on grid points of the 1000 x 1000 lattice grid. "], "OutPut": ["The output must contain M non-negative integers. Each line contains the answer n to the corresponding case of the input. "], "SampleInput": ["2                  \r\n12                    \r\n1  2 6   3  9 7 2 \r\n2  5 6   4  5 3 1 8   \r\n3  3 5   2  4 2       \r\n4  3 4   2  3 5       \r\n5  4 4   2  4 2 \r\n6  7 4   1  8 \r\n7  2 3   2  8 1 \r\n8  5 3   5  7 2 9 12 6 \r\n9  1 2   3  11 8 1 \r\n10 3 2   1  11 \r\n11 2 1   3  10 9 12 \r\n12 6 1   2  8 11 \r\n4  \r\n3                     \r\n1  2 2   2  2 3 \r\n2  1 1   2  1 3 \r\n3  4 1   2  1 2 \r\n4   "], "SampleOutput": ["2\r\n0"], "Hint": [], "Source": []},
{"Title": ["跳蚤"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 12756"], "Accepted": [" 4077"], "Description": ["Z城市居住着很多只跳蚤。在Z城市周六生活频道有一个娱乐节目。一只跳蚤将被请上一个高空钢丝的正中央。钢丝很长，可以看作是无限长。节目主持人会给该跳蚤发一张卡片。卡片上写有N+1个自然数。其中最后一个是M，而前N个数都不超过M，卡片上允许有相同的数字。跳蚤每次可以从卡片上任意选择一个自然数S，然后向左，或向右跳S个单位长度。而他最终的任务是跳到距离他左边一个单位长度的地方，并捡起位于那里的礼物。\r", "比如当N=2，M=18时，持有卡片(10, 15, 18)的跳蚤，就可以完成任务：他可以先向左跳10个单位长度，然后再连向左跳3次，每次15个单位长度，最后再向右连跳3次，每次18个单位长度。而持有卡片(12, 15, 18)的跳蚤，则怎么也不可能跳到距他左边一个单位长度的地方。\r", "当确定N和M后，显然一共有M^N张不同的卡片。现在的问题是，在这所有的卡片中，有多少张可以完成任务。\r"], "Input": ["两个整数N和M(N <= 15 , M <= 100000000)。"], "OutPut": ["可以完成任务的卡片数。"], "SampleInput": ["2 4"], "SampleOutput": ["12"], "Hint": ["这12张卡片分别是：\r", "(1, 1, 4), (1, 2, 4), (1, 3, 4), (1, 4, 4), (2, 1, 4), (2, 3, 4), \r", "(3, 1, 4), (3, 2, 4), (3, 3, 4), (3, 4, 4), (4, 1, 4), (4, 3, 4)\r"], "Source": ["HNOI 2001"]},
{"Title": ["Chain"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3860"], "Accepted": [" 1264"], "Description": ["Byteland had not always been a democratic country. There were also black pages in its book of history. One lovely day general Bytel − commander of the junta which had power over Byteland −− decided to finish the long−lasting time of war and released imprisoned activists of the opposition. However, he had no intention to let the leader Bytesar free. He decided to chain him to the wall with the bytish chain. It consists of joined rings and the bar fixed to the wall. Although the rings are not joined with the bar, it is hard to take them off.\r", "'General, why have you chained me to the prison walls and did not let rejoice at freedom!' cried Bytesar.\r", "'But Bytesar, you are not chained at all, and I am certain you are able to take off the rings from the bar by yourself.' perfidiously answered general Bytel, and he added 'But deal with that before a clock strikes the cyber hour and do not make a noise at night, otherwise I will be forced to call Civil Cyber Police.'\r", "Help Bytesar! Number the following rings of the chain with integers 1,2,...,n. We may put on and take off these rings according to the following rules:\r", ".only one ring can be put on or taken off from the bar in one move, \r", ".the ring number 1 can be always put on or taken off from the bar, \r", ".if the rings with the numbers 1,...,k−1 (for 1<= k < n) are taken off from the bar and the ring number k is put on, we can put on or take off the ring number k+1.\r", "Write a program which:\r", ".reads from std input the description of the bytish chain, \r", ".computes minimal number of moves necessary to take off all rings of the bytish chain from the bar,\r", ".writes the result to std output. "], "Input": ["In the first line of the input there is written one integer n, 1 <= n <= 1000. In the second line there are written n integers o1,o2,...,on (each of them is either 0 or 1) separated by single spaces. If oi=1, then the i−th ring is put on the bar, and if oi=0, then the i−th ring is taken off the bar."], "OutPut": ["The output should contain exactly one integer equal to the minimal number of moves necessary to take off all the rings of the bytish chain from the bar."], "SampleInput": ["4\r\n1 0 1 0"], "SampleOutput": ["6"], "Hint": [], "Source": []},
{"Title": ["Intervals"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 10556"], "Accepted": [" 4183"], "Description": ["There is given the series of n closed intervals [ai; bi], where i=1,2,...,n. The sum of those intervals may be represented as a sum of closed pairwise non−intersecting intervals. The task is to find such representation with the minimal number of intervals. The intervals of this representation should be written in the output file in acceding order. We say that the intervals [a; b] and [c; d] are in ascending order if, and only if a <= b < c <= d.\r", "Task\r", "Write a program which:\r", "reads from the std input the description of the series of intervals,\r", "computes pairwise non−intersecting intervals satisfying the conditions given above, \r", "writes the computed intervals in ascending order into std output"], "Input": ["In the first line of input there is one integer n, 3 <= n <= 50000. This is the number of intervals. In the (i+1)−st line, 1 <= i <= n, there is a description of the interval [ai; bi] in the form of two integers ai and bi separated by a single space, which are respectively the beginning and the end of the interval,1 <= ai <= bi <= 1000000."], "OutPut": ["The output should contain descriptions of all computed pairwise non−intersecting intervals. In each line should be written a description of one interval. It should be composed of two integers, separated by a single space, the beginning and the end of the interval respectively. The intervals should be written into the output in ascending order."], "SampleInput": ["5\r\n5 6\r\n1 4\r\n10 10\r\n6 9\r\n8 10"], "SampleOutput": ["1 4\r\n5 10"], "Hint": [], "Source": []},
{"Title": ["滑雪"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 131935"], "Accepted": [" 50777"], "Description": ["Michael喜欢滑雪百这并不奇怪， 因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。Michael想知道载一个区域中最长底滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子\r", "\r", "一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。事实上，这是最长的一条。"], "Input": ["输入的第一行表示区域的行数R和列数C(1 <= R,C <= 100)。下面是R行，每行有C个整数，代表高度h，0<=h<=10000。"], "OutPut": ["输出最长区域的长度。"], "SampleInput": ["5 5\r\n1 2 3 4 5\r\n16 17 18 19 6\r\n15 24 25 20 7\r\n14 23 22 21 8\r\n13 12 11 10 9\r\n"], "SampleOutput": ["25"], "Hint": [], "Source": []},
{"Title": ["A Plug for UNIX"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 22772"], "Accepted": [" 8034"], "Description": ["You are in charge of setting up the press room for the inaugural meeting of the United Nations Internet eXecutive (UNIX), which has an international mandate to make the free flow of information and ideas on the Internet as cumbersome and bureaucratic as possible. \r", "Since the room was designed to accommodate reporters and journalists from around the world, it is equipped with electrical receptacles to suit the different shapes of plugs and voltages used by appliances in all of the countries that existed when the room was built. Unfortunately, the room was built many years ago when reporters used very few electric and electronic devices and is equipped with only one receptacle of each type. These days, like everyone else, reporters require many such devices to do their jobs: laptops, cell phones, tape recorders, pagers, coffee pots, microwave ovens, blow dryers, curling \r", "irons, tooth brushes, etc. Naturally, many of these devices can operate on batteries, but since the meeting is likely to be long and tedious, you want to be able to plug in as many as you can. \r", "Before the meeting begins, you gather up all the devices that the reporters would like to use, and attempt to set them up. You notice that some of the devices use plugs for which there is no receptacle. You wonder if these devices are from countries that didn't exist when the room was built. For some receptacles, there are several devices that use the corresponding plug. For other receptacles, there are no devices that use the corresponding plug. \r", "In order to try to solve the problem you visit a nearby parts supply store. The store sells adapters that allow one type of plug to be used in a different type of outlet. Moreover, adapters are allowed to be plugged into other adapters. The store does not have adapters for all possible combinations of plugs and receptacles, but there is essentially an unlimited supply of the ones they do have. "], "Input": ["The input will consist of one case. The first line contains a single positive integer n (1 <= n <= 100) indicating the number of receptacles in the room. The next n lines list the receptacle types found in the room. Each receptacle type consists of a string of at most 24 alphanumeric characters. The next line contains a single positive integer m (1 <= m <= 100) indicating the number of devices you would like to plug in. Each of the next m lines lists the name of a device followed by the type of plug it uses (which is identical to the type of receptacle it requires). A device name is a string of at most 24 alphanumeric \r", "characters. No two devices will have exactly the same name. The plug type is separated from the device name by a space. The next line contains a single positive integer k (1 <= k <= 100) indicating the number of different varieties of adapters that are available. Each of the next k lines describes a variety of adapter, giving the type of receptacle provided by the adapter, followed by a space, followed by the type of plug. "], "OutPut": ["A line containing a single non-negative integer indicating the smallest number of devices that cannot be plugged in. "], "SampleInput": ["4 \r\nA \r\nB \r\nC \r\nD \r\n5 \r\nlaptop B \r\nphone C \r\npager B \r\nclock B \r\ncomb X \r\n3 \r\nB X \r\nX A \r\nX D "], "SampleOutput": ["1"], "Hint": [], "Source": []},
{"Title": ["Unscrambling Images"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 996"], "Accepted": [" 368"], "Description": ["Quadtrees are commonly used for encoding digital images in a compact form. Given an n * n image (where n is a power of 2, 1 <= n <= 16), its quadtree encoding is computed as follows. Start with a quadtree with exactly one node, namely the root, and associate with this node the n * n square region for the entire image. Then the following is performed recursively: \r", "1. If every pixel in the region associated with the current node has an intensity value of p, then the node is made a leaf and it is assigned an associated value of p. \r", "2. Otherwise, four nodes are added as children of the current node. The region is divided into four equal (square) quadrants and each quadrant is assigned to one child node. The algorithm recurses on each of the children nodes. \r", "When the process terminates, we obtain a quadtree in which every internal node has four children. Every leaf node has an associated value representing the intensity of the region corresponding to the leaf node. An example of an image and its quadtree encoding is shown below. \r", "\r", "We have assumed that the four children represent, from left to right, the upper left, upper right, lower left, and lower right quadrants, respectively. \r", "To easily identify a node in a quadtree, we assign a number to each node by the following rules: \r", "1. The root is numbered 0. \r", "2. If the number of a node is k, then its children, from left to right, are numbered 4k+1; 4k+2; 4k+3; 4k +4. \r", "Images encoded as quadtrees can be encrypted by a secret password as follows: whenever a subdivision is performed, the four branches are reordered. The reordering may be different at each node, but it is completely determined by the password and the node number. \r", "Unfortunately, some people use the \"save password\" feature in the encoding program and use the same password for multiple images. By observing the encoding of a well-chosen test image, any image encoded with the same password can be decoded without the password. In this test image, each pixel has a distinct intensity from 0 to n^2-1 arranged from left-to-right, top-to-bottom in increasing order. An example for n = 16 is given below: \r", "\r", "You managed to gain access to the encoding program and used it to encode the test image. Given the quadtree encoding of the test image, write a program to decode any other image encoded with the same password. "], "Input": ["You will be given a number of cases in the input. The first line of input consists of a positive integer indicating the number of test cases to follow. Each test case starts with a line containing n, followed by the quadtree encoding of the test image and the quadtree encoding of the secret image to be decoded. Each quadtree encoding starts with a line containing a positive integer m indicating the number of leaf nodes in the tree. The next m lines are of the form: \r", "k intensity \r", "which specifies that the node numbered k is a leaf node with the specified intensity as the associated leaf value. Nodes not specified are either internal nodes or absent in the quadtree. You may assume that all intensities are between 0 and 255, inclusively. You may also assume that each quadtree encoding is a valid output obtained from the encoding lgorithm described above. "], "OutPut": ["For each test case, print the case number followed by a blank line. Then, print the intensities of the pixels of the decoded image one row at a time. Print each intensity right-justified in a field of width 4, with no extra spaces between fields. Insert a blank line between cases. "], "SampleInput": ["2 \r\n2 \r\n4 \r\n1 3 \r\n2 2 \r\n3 0 \r\n4 1 \r\n4 \r\n1 23 \r\n2 123 \r\n3 253 \r\n4 40 \r\n4 \r\n16 \r\n5 8 \r\n6 9 \r\n7 13 \r\n8 12 \r\n9 0 \r\n10 4 \r\n11 1 \r\n12 5 \r\n13 2 \r\n14 3 \r\n15 7 \r\n16 6 \r\n17 10 \r\n18 11 \r\n19 15 \r\n20 14 \r\n7 \r\n2 10 \r\n3 20 \r\n4 30 \r\n5 41 \r\n6 42 \r\n7 44 \r\n8 43 "], "SampleOutput": ["Case 1 \r\n\r\n 253  40 \r\n 123  23 \r\n\r\nCase 2 \r\n\r\n  10  10  20  20 \r\n  10  10  20  20 \r\n  41  42  30  30 \r\n  43  44  30  30 "], "Hint": [], "Source": []},
{"Title": ["Triangle War"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 4180"], "Accepted": [" 1656"], "Description": ["Triangle War is a two-player game played on the following triangular grid: \r", "\r", "Two players, A and B, take turns filling in any dotted line connecting two dots, with A starting first. Once a line is filled, it cannot be filled again. If the line filled by a player completes one or more triangles, she owns the completed triangles and she is awarded another turn (i.e. the opponent skips a turn). The game ends after all dotted lines are filled in, and the player with the most triangles wins the game. The difference in the number of triangles owned by the two players is not important. \r", "\r", "For example, if A fills in the line between 2 and 5 in the partial game on the left below: \r", "\r", "Then, she owns the triangle labelled A and takes another turn to fill in the line between 3 and 5. B can now own 3 triangles (if he wishes) by filling in the line between 2 and 3, then the one between 5 and 6, and finally the one between 6 and 9. B would then make one more move before it is A's turn again. \r", "In this problem, you are given a number of moves that have already been made. From the partial game, you should determine which player will win assuming that each player plays a perfect game from that point on. That is, assume that each player always chooses the play that leads to the best possible outcome for himself/herself. "], "Input": ["You will be given a number of games in the input. The first line of input is a positive integer indicating the number of games to follow. Each game starts with an integer 6 <= m <= 18 indicating the number of moves that have been made in the game. The next m lines indicate the moves made by the two players in order, each of the form i j (with i < j) indicating that the line between i and j is filled in that move. You may assume that all given moves are legal. "], "OutPut": ["For each game, print the game number and the result on one line as shown below. If A wins, print the sentence \"A wins.\" If B wins, print \"B wins.\" "], "SampleInput": ["4 \r\n6 \r\n2 4 \r\n4 5 \r\n5 9 \r\n3 6 \r\n2 5 \r\n3 5 \r\n7 \r\n2 4 \r\n4 5 \r\n5 9 \r\n3 6 \r\n2 5 \r\n3 5 \r\n7 8 \r\n6 \r\n1 2 \r\n2 3 \r\n1 3 \r\n2 4 \r\n2 5 \r\n4 5 \r\n10 \r\n1 2 \r\n2 5 \r\n3 6 \r\n5 8 \r\n4 7 \r\n6 10 \r\n2 4 \r\n4 5 \r\n4 8 \r\n7 8 "], "SampleOutput": ["Game 1: B wins. \r\nGame 2: A wins. \r\nGame 3: A wins. \r\nGame 4: B wins."], "Hint": [], "Source": []},
{"Title": ["Square Destroyer"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 6162"], "Accepted": [" 2845"], "Description": ["The  left  figure below  shows a complete  3*3  grid made with  2*(3*4) (=24)  matchsticks. The  lengths of all matchsticks are one. You can find many squares of different sizes in the grid. The size of a square is the length of its side. In the grid shown in the left figure, there are 9 squares of size one, 4 squares of size two, and 1 square of size three.  \r", " \r", "Each matchstick of the complete grid is identified with a unique number which is assigned from left to right and from top to bottom as shown in the left figure. If you take some matchsticks out from the complete grid, then  some  squares  in  the  grid will  be  destroyed, which  results  in  an  incomplete  3*3  grid. The  right  figure illustrates  an  incomplete  3*3  grid  after  removing  three  matchsticks  numbered  with  12,  17  and  23.  This removal destroys 5 squares of size one, 3 squares of size two, and 1 square of size three. Consequently, the incomplete grid does not have squares of size three, but still has 4 squares of size one and 1 square of size two.\r", "\r", "As  input,  you  are  given  a  (complete  or  incomplete)  n*n  grid  made  with  no  more  than  2n(n+1) matchsticks for a natural number  5 <= n . Your task is to compute the minimum number of matchsticks taken \r", "out to destroy all the squares existing in the input  n*n  grid.  "], "Input": ["The input consists of   T test cases. The number of  test cases  (T )  is given  in  the  first  line of  the  input  file. \r", "Each  test  case  consists  of  two  lines: The  first  line  contains  a  natural  number  n ,  not  greater  than  5, which implies  you  are  given  a  (complete  or  incomplete)  n*n  grid  as  input,  and  the  second  line  begins  with  a nonnegative integer  k , the number of matchsticks that are missing from the complete  n*n  grid, followed by \r", "k numbers specifying the matchsticks. Note that if  k  is equal to zero, then the input grid is a complete  n*n grid; otherwise, the input grid is an incomplete  n*n  grid such that the specified  k  matchsticks are missing from the complete  n*n  grid. "], "OutPut": ["Print  exactly one  line  for each  test  case. The  line  should  contain  the minimum number of matchsticks  that have to be taken out to destroy all the squares in the input grid.  "], "SampleInput": ["2\r\n2\r\n0\r\n3\r\n3 12 17 23\r\n"], "SampleOutput": ["3\r\n3"], "Hint": [], "Source": []},
{"Title": ["Left labyrinths"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 638"], "Accepted": [" 131"], "Description": ["\"The instructions to turn always to the left reminded me that such was the common procedure for discovering the central courtyard of certain labyrinths.\" \r", "in The garden of forking paths by Jorge Luis Borges. \r", "A fellow librarian has exhumed in the Library of Babel a vast catalogue of labyrinths. It is our duty to classify them all and we count on your assistance. The plans of the labyrinths are already digitized and we need you to write a program to decide if the central courtyard of a given labyrinth can be reached following the simple procedure of always turning left at any intersection, and thus be called a left labyrinth. \r", "\r", "The digitalization process reduces the plan of a labyrinth to a grid of cells, being each cell either a block of wall or just floor. Walls are sequences of contiguous blocks, forming either horizontal or vertical corridors between them. Each labyrinth has a single entrance, a hole in its exterior walls, and a single central courtyard. The courtyard differs from the corridors in the shape: a floor cell in a corridor has at least 2 block of wall on each side. You can assume that each plan has a single labyrinth and its outside walls can be contoured within the plan. \r"], "Input": ["The first two input lines are the integers, smaller than 100, \r", "\r", "n - the number of lines in the map, and \r", "\r", "m - the number of characters per line in the map. \r", "\r", "The following n lines, each with m characters, have only two valid character values: \r", "\r", "# - (sharp) representing a block of a wall; \r", "\r", ". - (dot) representing part of the floor. \r", "\r"], "OutPut": ["Your program must write either YES if the given labyrinth is a left labyrinth or NO otherwise "], "SampleInput": ["30\r\n50\r\n..................................................\r\n..................................................\r\n..................................................\r\n.....##############..............############.....\r\n.....#.........#..#..............#..........#.....\r\n.....#.#######.#.##..............#.########.#.....\r\n.....#.#.....#....#..............#.#......#.#.....\r\n.....#.#.#####.####..............#.#.####.#.#.....\r\n.....#.#.....#...#################.#.##.#...#.....\r\n.....#.#####.###........................#.#.#.....\r\n.....#.........#.###############.#.##########.....\r\n.....#########.#.#.#...........#.#..#.............\r\n.............#.#.#.#...........###.##.............\r\n.............#.#.#.#...........#....#.............\r\n.............#.#...#...........#.##.#.............\r\n.............#######...........#.##.#.............\r\n.............#.................#.#..#.............\r\n.............#.#################.####.............\r\n.....#########...#.................##########.....\r\n.....#.........###.#.#.##########.#######.#.#.....\r\n.....#.#########.....#.#..........#.....#.#.#.....\r\n.....#.#.........#####.##########.#.###.#.#.#.....\r\n.....#.######.#####...........#.#.#.#.#.#.#.#.....\r\n.....#......#.....#...........#.....#.#.#.#.#.....\r\n.....#.##########.#...........#####.#.#.#.#.#.....\r\n.....#............#...........#...........#.#.....\r\n.....##############...........###############.....\r\n..................................................\r\n..................................................\r\n.................................................."], "SampleOutput": ["YES"], "Hint": [], "Source": []},
{"Title": ["Solitaire"], "TimeLimit": [" 5000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 5083"], "Accepted": [" 1696"], "Description": ["Solitaire is a game played on a chessboard 8x8. The rows and columns of the chessboard are numbered from 1 to 8, from the top to the bottom and from left to right respectively. \r", "\r", "There are four identical pieces on the board. In one move it is allowed to: \r", "\r", "\r", "There are 4 moves allowed for each piece in the configuration shown above. As an example let's consider a piece placed in the row 4, column 4. It can be moved one row up, two rows down, one column left or two columns right. \r", "Write a program that: \r"], "Input": ["Each of two input lines contains 8 integers a1, a2, ..., a8 separated by single spaces and describes one configuration of pieces on the chessboard. Integers a2j-1 and a2j (1 <= j <= 4) describe the position of one piece -- the row number and the column number respectively. "], "OutPut": ["The output should contain one word YES if a configuration described in the second input line is reachable from the configuration described in the first input line in at most 8 moves, or one word NO otherwise. "], "SampleInput": ["4 4 4 5 5 4 6 5\r\n2 4 3 3 3 6 4 6"], "SampleOutput": ["YES"], "Hint": [], "Source": []},
{"Title": ["Depot"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 568"], "Accepted": [" 140"], "Description": ["A Finnish high technology company has a big rectangular depot. The depot has a worker and a manager. The sides of the depot, in the order around it, are called left, top, right and bottom. The depot area is divided into equal-sized squares by dividing the area into rows and columns. The rows are numbered starting from the top with integers 1,2,... and the columns are numbered starting from the left with integers 1,2,...\r", "\r", "The depot has containers, which are used to store invaluable technological devices. The containers have distinct identification numbers. Each container occupies one square. The depot is so big, that the number of containers ever to arrive is smaller than the number of rows and smaller than the number of columns. The containers are not removed from the depot, but sometimes a new container arrives. The entry to the depot is at the top left corner.\r", "\r", "The worker has arranged the containers around the top left corner of the depot in such a way that he will be able to find them by their identification numbers. He uses the following method.\r", "\r", "Suppose that the identification number of the next container to be inserted is k (container k, for short). The worker travels the first row starting from the left and looks for the first container with identification number larger than k. If no such container is found, then container k is placed immediately after the rightmost of the containers previously in the row. If such a container l is found, then container l is replaced by container k, and l is inserted to the following row using the same method. If the worker reaches a row having no containers, the container is placed in the leftmost square of that row.\r", "\r", "Suppose that containers 3,4,9,2,5,1 have arrived to the depot in this order. Then the placement of the containers at the depot is as follows.\r", "\r", "1 4 5\r", "2 9\r", "3\r", "\r", "The manager comes to the worker and they have the following dialogue:\r", "Manager: Did container 5 arrive before container 4?\r", "Worker: No, that is impossible.\r", "Manager: Oh, so you can tell the arrival order of the containers by their placement.\r", "Worker: Generally not. For instance, the containers now in the depot could have arrived in the order 3,2,1,4,9,5 or in the order 3,2,1,9,4,5 or in one of 14 other orders.\r", "\r", "As the manager does not want to show that the worker seems much smarter, he goes away. You are to help the manager and write a program which, given a container placement, counts all possible orders in which they might have arrived.\r"], "Input": ["Your program is to read from standard input. The first line contains one integer R: the number of rows with containers in them. The following R lines contain information about rows 1,...,R starting from the top as follows. First on each of those lines is an integer M: the number of containers in that row. Following that, there are M integers on the line: the identification numbers of the containers in the row starting from the left. All container identification numbers I satisfy 1 <= I <= 50. Let N be the number of containers in the depot, then 1 <= N <= 13."], "OutPut": ["Your program is to write to standard output. The output contains an integer: the number of possible orders in which containers might have arrived. An arrival order should be counted only once."], "SampleInput": ["3\r\n3 1 4 5\r\n2 2 9\r\n1 3\r\n"], "SampleOutput": ["16"], "Hint": [], "Source": []},
{"Title": ["Twofive"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 556"], "Accepted": [" 180"], "Description": ["The secret messages between Santa Claus and his little helpers are usually encoded in the 25-language. The 25-alphabet is the same as the Latin alphabet with one exception - the letter 'Z' is absent, i.e. the 25-alphabet contains 25 Latin letters from 'A' through 'Y' in the same order as the Latin alphabet. Each word in the 25-language consists of exactly 25 different letters. A word can be written in a 5x5 table filling the rows first; for example, the word ADJPTBEKQUCGLRVFINSWHMOXY will be written as follows:\r", "\r", "A valid word in the 25-language has its letters in each row as well as in each column written in ascending order. Thus, the word ADJPTBEKQUCGLRVFINSWHMOXY is a valid word, in contrast to the word ADJPTBEGQUCKLRVFINSWHMOXY (the ascending order is violated in the second column, and in the third column, too). \r", "\r", "Santa Claus has a lexicon. His lexicon is the list of all valid 25-language words in ascending order (lexicographically) along with their ordinal numbers starting from 1. For example, in the lexicon ABCDEFGHIJKLMNOPQRSTUVWXY is the word number 1 and ABCDEFGHIJKLMNOPQRSUTVWXY is the word number 2. In word number 2, U and T are interchanged from their order in word number 1.\r", "\r", "Unfortunately, this lexicon is huge. Write a program that determines the ordinal number of an arbitrary given word, and also the word corresponding to a given ordinal number. There are no more than 2^31 words in the lexicon.\r"], "Input": ["Your program is to read from standard input. The first line contains a string with one character: a 'W' or an 'N'. If the first line contains a 'W', then the second line contains a valid 25-language word, that is, a string with 25 characters. If the first line contains an 'N', then the second line contains the ordinal number of an existing 25-language word. "], "OutPut": ["Your program is to write to standard output. If the second line of the input contains a 25-language word, then the line of the output contains the ordinal number of that word. If the second line of the input contains a number, then the line of the output contains the 25-language word with that ordinal number."], "SampleInput": ["W\r\nABCDEFGHIJKLMNOPQRSUTVWXY"], "SampleOutput": ["2"], "Hint": [], "Source": []},
{"Title": ["Mobile phones"], "TimeLimit": [" 5000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 27037"], "Accepted": [" 12290"], "Description": ["Suppose that the fourth generation mobile phone base stations in the Tampere area operate as follows. The area is divided into squares. The squares form an S * S matrix with the rows and columns numbered from 0 to S-1. Each square contains a base station. The number of active mobile phones inside a square can change because a phone is moved from a square to another or a phone is switched on or off. At times, each base station reports the change in the number of active phones to the main base station along with the row and the column of the matrix.\r", "\r", "Write a program, which receives these reports and answers queries about the current total number of active mobile phones in any rectangle-shaped area.\r"], "Input": ["The input is read from standard input as integers and the answers to the queries are written to standard output as integers. The input is encoded as follows. Each input comes on a separate line, and consists of one instruction integer and a number of parameter integers according to the following table.\r", "\r", "The values will always be in range, so there is no need to check them. In particular, if A is negative, it can be assumed that it will not reduce the square value below zero. The indexing starts at 0, e.g. for a table of size 4 * 4, we have 0 <= X <= 3 and 0 <= Y <= 3.\r", "\r", "Table size: 1 * 1 <= S * S <= 1024 * 1024\r", "Cell value V at any time: 0 <= V <= 32767\r", "Update amount: -32768 <= A <= 32767\r", "No of instructions in input: 3 <= U <= 60002\r", "Maximum number of phones in the whole table: M= 2^30\r"], "OutPut": ["Your program should not answer anything to lines with an instruction other than 2. If the instruction is 2, then your program is expected to answer the query by writing the answer as a single line containing a single integer to standard output. "], "SampleInput": ["0 4\r\n1 1 2 3\r\n2 0 0 2 2 \r\n1 1 1 2\r\n1 1 2 -1\r\n2 1 1 2 3 \r\n3\r\n"], "SampleOutput": ["3\r\n4"], "Hint": [], "Source": []},
{"Title": ["HIDDEN CODES"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 678"], "Accepted": [" 139"], "Description": ["A set of code words and a text are given. The text is supposed to contain a message made up of the code words embedded in the text in a peculiar (and possibly ambiguous) way. \r", "\r", "The code words and the text are sequences made up of the upper and lower case letters of the English alphabet only. Case-sensitivity is assumed. The length of a code word is defined in the usual way: For example, the code word ALL has length 3.\r", "\r", "The letters of a code word do not have to occur consecutively in the given text. For example, the code word ALL will always occur in the text within a subsequence in the form of AuLvL where u and v denote arbitrary (possibly empty) sequences of letters. We say that AuLvL is a covering sequence for ALL. In general, a covering sequence for a code word is defined as a subsequence of the text such that the first letter and the last letter of the subsequence are the same as those of the code word and it is possible to obtain the code word by deleting some (possibly none) of the letters of the subsequence. It should be noted that a code word may occur within one or more covering sequences or  may not occur in the text at all, and that a covering sequence may be a covering sequence for more than one code word.\r", "\r", "A covering sequence is identified by its start position (position of its first letter) and its end position (position of its last letter) in the text. (The first letter of the text is at position 1.) We say that two covering sequences, say c1 and c2,  do not overlap if the start position of c1 is greater than (>) the end position of c2 or vice versa. Otherwise we say that the two covering sequences overlap.\r", "\r", "To extract the message hidden in the text you undertake the task of forming a solution. A solution is a set of items, each consisting of a code word and a covering sequence for this code word, so that the following conditions are all satisfied:\r", "a)\tthe covering sequences do not overlap with each other; \r", "b)\ta covering sequence does not exceed 1000 in length; \r", "c)\tthe sum of the lengths of the code words is maximal. (Each item contributes the length of the code word it contains to the sum.) \r", "\r", "1 <= N <= 100 where N is the number of code words.\r", "The maximum length of a code word is 100 letters.\r", "1 <=  length of the given text <= 1,000,000 letters.\r", "We say that a covering sequence c for a code word w is right-minimal if no proper prefix of c (a proper prefix of c is an initial subsequence of c that is not equal to c) is a covering sequence for w. For example, for the code word ALL, AAALAL is a right-minimal covering sequence whereas  AAALALAL is also a covering sequence, but not right-minimal.\r", "It is guaranteed that in the given text \r", "a)\tfor each position in the text the number of right-minimal covering sequences containing that position does not exceed  2500;  \r", "b)\tthe number of right-minimal covering sequences does not exceed 10,000.\r", "\r"], "Input": ["Your program is to read from standard input. The first line contains the value of N. Each of the following N input lines contains a code word which is a sequence of letters without any blank in between. Integers 1 through N serve as the id-numbers for the code words. The last line contains the text, which consists of a sequence of letters (terminated by an end-of-line character followed by the end-of-file symbol). \r", "\r"], "OutPut": ["Your program is to write to standard output. The first line will contain the sum obtained by your solution. "], "SampleInput": ["4\r\nRuN\r\nRaBbit\r\nHoBbit\r\nStoP\r\nStXRuYNvRuHoaBbvizXztNwRRuuNNP"], "SampleOutput": ["12"], "Hint": [], "Source": []},
{"Title": ["内存分配"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 5747"], "Accepted": [" 1156"], "Description": ["内存是计算机重要的资源之一，程序运行的过程中必须对内存进行分配。\r", "经典的内存分配过程是这样进行的：\r", "1.\t内存以内存单元为基本单位，每个内存单元用一个固定的整数作为标识，称为地址。地址从0开始连续排列，地址相邻的内存单元被认为是逻辑上连续的。我们把从地址i开始的s个连续的内存单元称为首地址为i长度为s的地址片。 \r", "2.\t运行过程中有若干进程需要占用内存，对于每个进程有一个申请时刻T，需要内存单元数M及运行时间P。在运行时间P内（即T时刻开始，T+P时刻结束），这M个被占用的内存单元不能再被其他进程使用。 \r", "3、假设在T时刻有一个进程申请M个单元，且运行时间为P，则：\r", "1.\t若T时刻内存中存在长度为M的空闲地址片，则系统将这M个空闲单元分配给该进程。若存在多个长度为M个空闲地址片，则系统将首地址最小的那个空闲地址片分配给该进程。 \r", "2.\t如果T时刻不存在长度为M的空闲地址片，则该进程被放入一个等待队列。对于处于等待队列队头的进程，只要在任一时刻，存在长度为M的空闲地址片，系统马上将该进程取出队列，并为它分配内存单元。注意，在进行内存分配处理过程中，处于等待队列队头的进程的处理优先级最高，队列中的其它进程不能先于队头进程被处理。 \r", "现在给出一系列描述进程的数据，请编写一程序模拟系统分配内存的过程。\r"], "Input": ["第一行是一个数N，表示总内存单元数（即地址范围从0到N-1）。从第二行开始每行描述一个进程的三个整数T、M、P（M <= N）。最后一行用三个0表示结束。\r", "数据已按T从小到大排序。\r", "输入文件最多10000行，且所有数据都小于109。\r", "输入文件中同一行相邻两项之间用一个或多个空格隔开。"], "OutPut": ["包括2行。\r", "第一行是全部进程都运行完毕的时刻。\r", "第二行是被放入过等待队列的进程总数。"], "SampleInput": ["10\r\n1 3 10\r\n2 4 3\r\n3 4 4\r\n4 1 4\r\n5 3 4\r\n0 0 0"], "SampleOutput": ["12\r\n2"], "Hint": [], "Source": ["Noi 99"]},
{"Title": ["最优连通子集"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3556"], "Accepted": [" 1888"], "Description": ["众所周知，我们可以通过直角坐标系把平面上的任何一个点P用一个有序数对(x, y)来唯一表示，如果x, y都是整数，我们就把点P称为整点，否则点P称为非整点。我们把平面上所有整点构成的集合记为W。\r", "定义1 两个整点P1(x1, y1), P2(x2, y2)，若|x1-x2| + |y1-y2| = 1，则称P1, P2相邻，记作P1~P2，否则称P1, P2不相邻。\r", "定义 2 设点集S是W的一个有限子集，即S = {P1, P2,..., Pn}(n >= 1)，其中Pi(1 <= i <= n)属于W，我们把S称为整点集。\r", "定义 3 设S是一个整点集，若点R, T属于S，且存在一个有限的点序列Q1, Q2, ?, Qk满足: \r", "1.\tQi属于S（1 <= i <= k）;\r", "2.\tQ1 = R, Qk =  T;\r", "3.\tQi~Qi + 1(1 <= i <= k-1)，即Qi与Qi + 1相邻;\r", "4.\t对于任何1 <= i < j <= k有Qi ≠ Qj;\r", "我们则称点R与点T在整点集S上连通，把点序列Q1, Q2,..., Qk称为整点集S中连接点R与点T的一条道路。\r", "定义4 若整点集V满足：对于V中的任何两个整点，V中有且仅有一条连接这两点的道路，则V称为单整点集。\r", "定义5 对于平面上的每一个整点，我们可以赋予它一个整数，作为该点的权，于是我们把一个整点集中所有点的权的总和称为该整点集的权和。\r", "我们希望对于给定的一个单整点集V，求出一个V的最优连通子集B，满足：\r", "1.\tB是V的子集\r", "2.\t对于B中的任何两个整点，在B中连通；\r", "3.\tB是满足条件(1)和(2)的所有整点集中权和最大的。\r"], "Input": ["第1行是一个整数N（2 <= N <= 1000），表示单整点集V中点的个数；\r", "以下N行中，第i行(1 <= i <= N)有三个整数，Xi, Yi, Ci依次表示第i个点的横坐标，纵坐标和权。同一行相邻两数之间用一个空格分隔。-10^6 <= Xi, Yi <= 10^6；-100 <= Ci <= 100。\r"], "OutPut": ["仅一个整数，表示所求最优连通集的权和。"], "SampleInput": ["5\r\n0 0 -2\r\n0 1 1\r\n1 0 1\r\n0 -1 1\r\n-1 0 1"], "SampleOutput": ["2"], "Hint": [], "Source": []},
{"Title": ["棋盘分割"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 17996"], "Accepted": [" 6405"], "Description": ["将一个８*８的棋盘进行如下分割：将原棋盘割下一块矩形棋盘并使剩下部分也是矩形，再将剩下的部分继续如此分割，这样割了(n-1)次后，连同最后剩下的矩形棋盘共有n块矩形棋盘。(每次切割都只能沿着棋盘格子的边进行)\r", "\r", "原棋盘上每一格有一个分值，一块矩形棋盘的总分为其所含各格分值之和。现在需要把棋盘按上述规则分割成n块矩形棋盘，并使各矩形棋盘总分的均方差最小。\r", "均方差", "，其中平均值", "，x", "为第i块矩形棋盘的总分。\r", "请编程对给出的棋盘及n，求出O'的最小值。\r"], "Input": ["第1行为一个整数n(1 < n < 15)。\r", "第2行至第9行每行为8个小于100的非负整数，表示棋盘上相应格子的分值。每行相邻两数之间用一个空格分隔。\r"], "OutPut": ["仅一个数，为O'（四舍五入精确到小数点后三位）。"], "SampleInput": ["3\r\n1 1 1 1 1 1 1 3\r\n1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 0\r\n1 1 1 1 1 1 0 3"], "SampleOutput": ["1.633"], "Hint": [], "Source": []},
{"Title": ["生日蛋糕"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 34420"], "Accepted": [" 12247"], "Description": ["7月17日是Mr.W的生日，ACM-THU为此要制作一个体积为Nπ的M层生日蛋糕，每层都是一个圆柱体。\r", "设从下往上数第i(1 <= i <= M)层蛋糕是半径为Ri, 高度为Hi的圆柱。当i < M时，要求Ri > Ri+1且Hi > Hi+1。\r", "由于要在蛋糕上抹奶油，为尽可能节约经费，我们希望蛋糕外表面（最下一层的下底面除外）的面积Q最小。\r", "令Q = Sπ\r", "请编程对给出的N和M，找出蛋糕的制作方案（适当的Ri和Hi的值），使S最小。\r", "（除Q外，以上所有数据皆为正整数）\r"], "Input": ["有两行，第一行为N（N <= 10000），表示待制作的蛋糕的体积为Nπ；第二行为M(M <= 20)，表示蛋糕的层数为M。"], "OutPut": ["仅一行，是一个正整数S（若无解则S = 0）。"], "SampleInput": ["100\r\n2"], "SampleOutput": ["68"], "Hint": ["圆柱公式\r", "体积V = πR", "H\r", "侧面积A' = 2πRH\r", "底面积A = πR", "\r"], "Source": ["Noi 99"]},
{"Title": ["钉子和小球"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 9424"], "Accepted": [" 2986"], "Description": ["有一个三角形木板,竖直立放，上面钉着n(n+1)/2颗钉子，还有(n+1)个格子（当n=5时如图1）。每颗钉子和周围的钉子的距离都等于d，每个格子的宽度也都等于d，且除了最左端和最右端的格子外每个格子都正对着最下面一排钉子的间隙。 \r", "让一个直径略小于d的小球中心正对着最上面的钉子在板上自由滚落，小球每碰到一个钉子都可能落向左边或右边（概率各1/2），且球的中心还会正对着下一颗将要碰上的钉子。例如图2就是小球一条可能的路径。 \r", "我们知道小球落在第i个格子中的概率pi=pi=", "，其中i为格子的编号，从左至右依次为0,1,...,n。 \r", "现在的问题是计算拔掉某些钉子后，小球落在编号为m的格子中的概率pm。假定最下面一排钉子不会被拔掉。例如图3是某些钉子被拔掉后小球一条可能的路径。\r"], "Input": ["第1行为整数n（2 <= n <= 50）和m（0 <= m <= n）。以下n行依次为木板上从上至下n行钉子的信息，每行中'*'表示钉子还在，'.'表示钉子被拔去，注意在这n行中空格符可能出现在任何位置。"], "OutPut": ["仅一行，是一个既约分数(0写成0/1)，为小球落在编号为m的格子中的概pm。既约分数的定义：A/B是既约分数，当且仅当A、B为正整数且A和B没有大于1的公因子。"], "SampleInput": ["5 2\r\n*\r\n   * .\r\n  * * *\r\n * . * *\r\n* * * * *"], "SampleOutput": ["7/16"], "Hint": [], "Source": []},
{"Title": ["Gleaming the Cubes"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1561"], "Accepted": [" 823"], "Description": ["As chief engineer of the Starship Interprize, the task of repairing the hyperstellar, cubic, transwarped-out software has fallen on your shoulders. Simply put, you must compute the volume of the intersection of anywhere from 2 to 1000 cubes. "], "Input": ["The input consists of several sets of cubes for which the volume of their intersections must be computed. The first line of each set contains a number (from 2 to 1000) which indicates the number of cubes which follow, one cube per line. Each line which describes a cube contains four integers. The first three integers are the x, y, and z coordinates of the corner of a cube, and the fourth integer is the positive distance which the cube extends in each of the three directions (parallel to the x, y, and z axes) from that corner. \r", "\r", "Following the data for the first set of cubes will be a number which indicates how many cubes are in a second set, followed by the cube descriptions for the second set, again one per line. Following this will be a third set, and so on.A number =0 indicate the end of input."], "OutPut": ["Your program should process sets all of cubes, outputting the volume of their intersections to the output file, one set per line, until a zero is read for the number of cubes."], "SampleInput": ["2\r\n0 0 0 10\r\n9 1 1 5\r\n3\r\n0 0 0 10\r\n9 1 1 5\r\n8 2 2 3\r\n0\r\n"], "SampleOutput": ["25\r\n9"], "Hint": [], "Source": []},
{"Title": ["陨石的秘密"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2996"], "Accepted": [" 1166"], "Description": ["公元11380年，一颗巨大的陨石坠落在南极。于是，灾难降临了，地球上出现了一系列反常的现象。当人们焦急万分的时候，一支中国科学家组成的南极考察队赶到了出事地点。经过一番侦察，科学家们发现陨石上刻有若干行密文，每一行都包含5个整数：\r", "1 1 1 1 6\r", "0 0 6 3 57\r", "8 0 11 3 2845\r", "著名的科学家SS发现，这些密文实际上是一种复杂运算的结果。为了便于大家理解这种运算，他定义了一种SS表达式：\r", "1．\tSS表达式是仅由'{'，'}'，'['，']'，'（'，'）'组成的字符串。\r", "2．\t一个空串是SS表达式。\r", "3．\t如果A是SS表达式，且A中不含字符'{'，'}'，'['，']'，则(A)是SS表达式。\r", "4．\t如果A是SS表达式，且A中不含字符'{'，'}'，则[A]是SS表达式。\r", "5．\t如果A是SS表达式，则{A}是SS表达式。\r", "6．\t如果A和B都是SS表达式，则AB也是SS表达式。\r", "\r", "\r", "例如\r", "()(())[]\r", "{()[()]}\r", "{{[[(())]]}}\r", "都是SS表达式。\r", "而\r", "()([])()\r", "[()\r", "不是SS表达式。\r", "\r", "一个SS表达式E的深度D(E)定义如下：\r", "\r", "例如(){()}[]的深度为2。\r", "\r", "密文中的复杂运算是这样进行的：\r", "设密文中每行前4个数依次为L1，L2，L3，D，求出所有深度为D，含有L1对{}，L2对[]，L3对()的SS串的个数，并用这个数对当前的年份11380求余数，这个余数就是密文中每行的第5个数，我们称之为?神秘数?。\r", "密文中某些行的第五个数已经模糊不清，而这些数字正是揭开陨石秘密的钥匙。现在科学家们聘请你来计算这个神秘数。\r"], "Input": ["共一行，4个整数L1，L2，L3，D。相邻两个数之间用一个空格分隔。\r", "（0 <= L1 <= 10，0 <= L2 <= 10，0 <= L3 <= 10，0 <= D <= 30）"], "OutPut": ["共一行，包含一个整数，即神秘数。"], "SampleInput": ["1 1 1 2"], "SampleOutput": ["8"], "Hint": [], "Source": []},
{"Title": ["方程的解数"], "TimeLimit": [" 15000MS"], "MemoryLimit": [" 128000K"], "TotalSubmissions": [" 9145"], "Accepted": [" 3001"], "Description": ["已知一个n元高次方程：\r", "\r", "其中：x1, x2,...,xn是未知数，k1,k2,...,kn是系数，p1,p2,...pn是指数。且方程中的所有数均为整数。\r", "假设未知数1 <= xi <= M, i=1,,,n，求这个方程的整数解的个数。\r", "1 <= n <= 6；1 <= M <= 150。\r", "\r", "方程的整数解的个数小于2", "。\r", "★本题中，指数Pi(i=1,2,...,n)均为正整数。\r"], "Input": ["第1行包含一个整数n。第2行包含一个整数M。第3行到第n+2行，每行包含两个整数，分别表示ki和pi。两个整数之间用一个空格隔开。第3行的数据对应i=1，第n+2行的数据对应i=n。"], "OutPut": ["仅一行，包含一个整数，表示方程的整数解的个数。"], "SampleInput": ["3\r\n150\r\n1  2\r\n-1  2\r\n1  2"], "SampleOutput": ["178"], "Hint": [], "Source": []},
{"Title": ["炮兵阵地"], "TimeLimit": [" 2000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 42749"], "Accepted": [" 16346"], "Description": ["司令部的将军们打算在N*M的网格地图上部署他们的炮兵部队。一个N*M的地图由N行M列组成，地图的每一格可能是山地（用\"H\" 表示），也可能是平原（用\"P\"表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上的攻击范围如图中黑色区域所示：\r", "\r", "如果在地图中的灰色所标识的平原上部署一支炮兵部队，则图中的黑色的网格表示它能够攻击到的区域：沿横向左右各两格，沿纵向上下各两格。图上其它白色网格均攻击不到。从图上可见炮兵的攻击范围不受地形的影响。\r", "现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。\r"], "Input": ["第一行包含两个由空格分割开的正整数，分别表示N和M；\r", "接下来的N行，每一行含有连续的M个字符('P'或者'H')，中间没有空格。按顺序表示地图中每一行的数据。N <= 100；M <= 10。"], "OutPut": ["仅一行，包含一个整数K，表示最多能摆放的炮兵部队的数量。"], "SampleInput": ["5 4\r\nPHPP\r\nPPHH\r\nPPPP\r\nPHPP\r\nPHHP"], "SampleOutput": ["6"], "Hint": [], "Source": []},
{"Title": ["聪明的打字员"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 9083"], "Accepted": [" 2061"], "Description": ["阿兰是某机密部门的打字员，她现在接到一个任务：需要在一天之内输入几百个长度固定为6的密码。当然，她希望输入的过程中敲击键盘的总次数越少越好。\r", "不幸的是，出于保密的需要，该部门用于输入密码的键盘是特殊设计的，键盘上没有数字键，而只有以下六个键：Swap0, Swap1, Up, Down, Left, Right，为了说明这6个键的作用，我们先定义录入区的6个位置的编号，从左至右依次为1，2，3，4，5，6。下面列出每个键的作用：\r", "Swap0：按Swap0，光标位置不变，将光标所在位置的数字与录入区的1号位置的数字（左起第一个数字）交换。如果光标已经处在录入区的1号位置，则按Swap0键之后，录入区的数字不变；\r", "Swap1：按Swap1，光标位置不变，将光标所在位置的数字与录入区的6号位置的数字（左起第六个数字）交换。如果光标已经处在录入区的6号位置，则按Swap1键之后，录入区的数字不变；\r", "Up：按Up，光标位置不变，将光标所在位置的数字加1（除非该数字是9）。例如，如果光标所在位置的数字为2，按Up之后，该处的数字变为3；如果该处数字为9，则按Up之后，数字不变，光标位置也不变；\r", "Down：按Down，光标位置不变，将光标所在位置的数字减1（除非该数字是0），如果该处数字为0，则按Down之后，数字不变，光标位置也不变；\r", "Left：按Left，光标左移一个位置，如果光标已经在录入区的1号位置（左起第一个位置）上，则光标不动；\r", "Right：按Right，光标右移一个位置，如果光标已经在录入区的6号位置（左起第六个位置）上，则光标不动。\r", "当然，为了使这样的键盘发挥作用，每次录入密码之前，录入区总会随机出现一个长度为6的初始密码，而且光标固定出现在1号位置上。当巧妙地使用上述六个特殊键之后，可以得到目标密码，这时光标允许停在任何一个位置。\r", "现在，阿兰需要你的帮助，编写一个程序，求出录入一个密码需要的最少的击键次数。\r"], "Input": ["仅一行，含有两个长度为6的数，前者为初始密码，后者为目标密码，两个密码之间用一个空格隔开。"], "OutPut": ["仅一行，含有一个正整数，为最少需要的击键次数。"], "SampleInput": ["123456 654321"], "SampleOutput": ["11"], "Hint": [], "Source": []},
{"Title": ["反正切函数的应用"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 16455"], "Accepted": [" 5911"], "Description": ["反正切函数可展开成无穷级数，有如下公式\r", "\r", "(其中0 <= x <= 1) 公式(1)\r", "\r", "使用反正切函数计算PI是一种常用的方法。例如，最简单的计算PI的方法：\r", "\r", "PI=4arctan(1)=4(1-1/3+1/5-1/7+1/9-1/11+...)     公式(2)\r", "\r", "然而，这种方法的效率很低，但我们可以根据角度和的正切函数公式：\r", "\r", "tan(a+b)=[tan(a)+tan(b)]/[1-tan(a)*tan(b)]  公式(3)\r", "\r", "通过简单的变换得到：\r", "\r", "arctan(p)+arctan(q)=arctan[(p+q)/(1-pq)]    公式(4)\r", "\r", "利用这个公式，令p=1/2,q=1/3，则(p+q)/(1-pq)=1，有\r", "\r", "arctan(1/2)+arctan(1/3)=arctan[(1/2+1/3)/(1-1/2*1/3)]=arctan(1)\r", "\r", "使用1/2和1/3的反正切来计算arctan(1)，速度就快多了。\r", "我们将公式(4)写成如下形式\r", "\r", "arctan(1/a)=arctan(1/b)+arctan(1/c)\r", "\r", "其中a,b和c均为正整数。\r", "\r", "我们的问题是：对于每一个给定的a（1 <= a <= 60000），求b＋c的值。我们保证对于任意的a都存在整数解。如果有多个解，要求你给出b+c最小的解。\r"], "Input": ["输入文件中只有一个正整数a，其中 1 <= a <= 60000。"], "OutPut": ["输出文件中只有一个整数，为 b+c 的值。"], "SampleInput": ["1"], "SampleOutput": ["5"], "Hint": [], "Source": []},
{"Title": ["食物链"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 139777"], "Accepted": [" 42691"], "Description": ["动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。\r", "现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。\r", "有人用两种说法对这N个动物所构成的食物链关系进行描述：\r", "第一种说法是\"1 X Y\"，表示X和Y是同类。\r", "第二种说法是\"2 X Y\"，表示X吃Y。\r", "此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。\r", "1）\t当前的话与前面的某些真的话冲突，就是假话；\r", "2）\t当前的话中X或Y比N大，就是假话；\r", "3）\t当前的话表示X吃X，就是假话。\r", "你的任务是根据给定的N（1 <= N <= 50,000）和K句话（0 <= K <= 100,000），输出假话的总数。\r"], "Input": ["第一行是两个整数N和K，以一个空格分隔。\r", "以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。\r", "  若D=1，则表示X和Y是同类。\r", "  若D=2，则表示X吃Y。"], "OutPut": ["只有一个整数，表示假话的数目。"], "SampleInput": ["100 7\r\n1 101 1 \r\n2 1 2\r\n2 2 3 \r\n2 3 3 \r\n1 1 3 \r\n2 3 1 \r\n1 5 5\r\n"], "SampleOutput": ["3"], "Hint": [], "Source": []},
{"Title": ["Bus Terminals"], "TimeLimit": [" 15000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 747"], "Accepted": [" 229"], "Description": ["Yong-In city plans to build a bus network with N bus stops. Each bus stop is at a street corner. Yong-In is a modern city, so its map is a grid of square blocks of equal size. Two of these bus stops are to be selected as hubs H1 and H2. The hubs will be connected to each other by a direct bus line and each of the remaining N − 2 bus stops will be connected directly to either H1 or H2  (but not to both), but not to any other bus stop.\r", "\r", "The distance between any two bus stops is the length of the shortest possible route following the streets. That is, if a bus stop is represented as (x, y) with x-coordinate x and y-coordinate y, then the distance between two bus stops (x1, y1) and (x2, y2) is  . If bus stops A and B are connected to the same hub H1, then the length of the route from A to B is the sum of the distances from A to H1 and from H1 to B. If bus stops A and B are connected to different hubs, e.g., A to H1 and B to H2, then the length of the route from A to B is the sum of the distances from A to H1, from H1 to H2, and from H2 to B.\r", "\r", "The planning authority of Yong-In city would like to make sure that every citizen can reach every point within the city as quickly as possible. Therefore, city planners want to choose two bus stops to be hubs in such a way that in the resulting bus network the length of the longest route between any two bus stops is as short as possible. \r", "\r", "One choice P of two hubs and assignments of bus stops to those hubs is better than another choice Q if the length of the longest bus route is shorter in P than in Q.  Your task is to write a program to compute the length of this longest route for the best choice P.  \r"], "Input": ["Your program is to read from standard input. The first line contains one positive integer N, 2 <= N <= 500, the number of bus stops. Each of the remaining N lines contains the x-coordinate followed by the y-coordinate of a bus stop. The x- and y-coordinates are positive integers <= 5000.  No two bus stops are at the same location."], "OutPut": ["Your program is to write to standard output. The output contains one line with a single positive integer, the minimum length of the longest bus route for the input."], "SampleInput": ["7\r\n7 9\r\n10 9\r\n5 3\r\n1 1\r\n7 2\r\n15 6\r\n17 7"], "SampleOutput": ["25"], "Hint": ["The following figures show the bus networks for the inputs given above. If bus stops 5 and 6 are selected as hubs then the longest route is obtained between bus stops 2 and 7. There is no better choice for the hubs, and the answer is 25.\r"], "Source": ["IOI 2002"]},
{"Title": ["Batch Scheduling"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 5960"], "Accepted": [" 2761"], "Description": ["There is a sequence of N jobs to be processed on one machine. The jobs are numbered from 1 to N, so that  the sequence is 1,2,..., N. The sequence of jobs must be partitioned into one or more batches, where each batch consists of consecutive jobs in the sequence. The processing starts at time 0. The batches are handled one by one starting from the first batch as follows. If a batch b contains jobs with smaller numbers than batch c, then batch b is handled before batch c. The jobs in a batch are processed successively on the machine. Immediately after all the jobs in a batch are processed, the machine outputs the results of all the jobs in that batch. The output time of a job j is the time when the batch containing j finishes.\r", "\r", "A setup time S is needed to set up the machine for each batch. For each job i, we know its cost factor Fi and the time Ti required to process it. If a batch contains the jobs x, x+1,... , x+k, and starts at time t, then the output time of every job in that batch is t + S +  (T", " + T", " + ... + T", "). Note that the machine outputs the results of all jobs in a batch at the same time. If the output time of job i is Oi, its cost is Oi * Fi. For example, assume that there are 5 jobs, the setup time S = 1, (T1, T2, T3, T4, T5) = (1, 3, 4, 2, 1), and (F1, F2, F3, F4, F5) = (3, 2, 3, 3, 4).  If the jobs are partitioned into three batches {1, 2}, {3}, {4, 5}, then the output times (O1, O2, O3, O4, O5) = (5, 5, 10, 14, 14) and the costs of the jobs are (15, 10, 30, 42, 56), respectively. The total cost for a partitioning is the sum of the costs of all jobs. The total cost for the example partitioning above is 153.\r", "\r", "You are to write a program which, given the batch setup time and a sequence of jobs with their processing times and cost factors, computes the minimum possible total cost. \r"], "Input": ["Your program reads from standard input. The first line contains the number of jobs N, 1 <= N <= 10000. The second line contains the batch setup time S which is an integer, 0 <= S <= 50.  The following N lines contain information about the jobs 1, 2,..., N in that order as follows. First on each of these lines is an integer Ti, 1 <= Ti <= 100, the processing time of the job. Following that, there is an integer Fi, 1 <= Fi <= 100, the cost factor of the job."], "OutPut": ["Your program writes to standard output. The output contains one line, which contains one integer: the minimum possible total cost. "], "SampleInput": ["5\r\n1\r\n1 3\r\n3 2\r\n4 3\r\n2 3\r\n1 4"], "SampleOutput": ["153"], "Hint": [], "Source": []},
{"Title": ["Polygon"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 8376"], "Accepted": [" 3585"], "Description": ["Polygon is a game for one player that starts on a polygon with N vertices, like the one in Figure 1, where N=4. Each vertex is labelled with an integer and each edge is labelled with either the symbol + (addition) or the symbol * (product). The edges are numbered from 1 to N.\r", "\r", "On the first move, one of the edges is removed. Subsequent moves involve the following steps:\r", "�pick an edge E and the two vertices V1 and V2 that are linked by E; and\r", "�replace them by a new vertex, labelled with the result of performing the operation indicated in E on the labels of V1 and V2.\r", "The game ends when there are no more edges, and its score is the label of the single vertex remaining.\r", "\r", "Consider the polygon of Figure 1. The player started by removing edge 3. After that, the player picked edge 1, then edge 4, and, finally, edge 2. The score is 0.\r", "\r", "Write a program that, given a polygon, computes the highest possible score and lists all the edges that, if removed on the first move, can lead to a game with that score.\r"], "Input": ["Your program is to read from standard input. The input describes a polygon with N vertices. It contains two lines. On the first line is the number N. The second line contains the labels of edges 1, ..., N, interleaved with the vertices' labels (first that of the vertex between edges 1 and 2, then that of the vertex between edges 2 and 3, and so on, until that of the vertex between edges N and 1), all separated by one space. An edge label is either the letter t (representing +) or the letter x (representing *).\r", "\r", "3 <= N <= 50\r", "For any sequence of moves, vertex labels are in the range [-32768,32767].\r"], "OutPut": ["Your program is to write to standard output. On the first line your program must write the highest score one can get for the input polygon. On the second line it must write the list of all edges that, if removed on the first move, can lead to a game with that score. Edges must be written in increasing order, separated by one space."], "SampleInput": ["4\r\nt -7 t 4 x 2 x 5"], "SampleOutput": ["33\r\n1 2"], "Hint": [], "Source": []},
{"Title": ["Camelot"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 4181"], "Accepted": [" 1877"], "Description": ["Centuries ago, King Arthur and the Knights of the Round Table used to meet every year on New Year's Day to celebrate their fellowship. In remembrance of these events, we consider a board game for one player, on which one king and several knight pieces are placed at random on distinct squares.\r", "The Board is an 8x8 array of squares. The King can move to any adjacent square, as shown in Figure 2, as long as it does not fall off the board. A Knight can jump as shown in Figure 3, as long as it does not fall off the board.\r", "\r", "During the play, the player can place more than one piece in the same square. The board squares are assumed big enough so that a piece is never an obstacle for other piece to move freely.\r", "The player's goal is to move the pieces so as to gather them all in the same square, in the smallest possible number of moves. To achieve this, he must move the pieces as prescribed above. Additionally, whenever the king and one or more knights are placed in the same square, the player may choose to move the king and one of the knights together henceforth, as a single knight, up to the final gathering point. Moving the knight together with the king counts as a single move.\r", "\r", "Write a program to compute the minimum number of moves the player must perform to produce the gathering.\r"], "Input": ["Your program is to read from standard input. The input contains the initial board configuration, encoded as a character string. The string contains a sequence of up to 64 distinct board positions, being the first one the position of the king and the remaining ones those of the knights. Each position is a letter-digit pair. The letter indicates the horizontal board coordinate, the digit indicates the vertical board coordinate.\r", "\r", "0 <= number of knights <= 63"], "OutPut": ["Your program is to write to standard output. The output must contain a single line with an integer indicating the minimum number of moves the player must perform to produce the gathering."], "SampleInput": ["D4A3A8H1H8"], "SampleOutput": ["10"], "Hint": [], "Source": []},
{"Title": ["Picture"], "TimeLimit": [" 2000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 17323"], "Accepted": [" 8802"], "Description": ["A number of rectangular posters, photographs and other pictures of the same shape are pasted on a wall. Their sides are all vertical or horizontal. Each rectangle can be partially or totally covered by the others. The length of the boundary of the union of all rectangles is called the perimeter.\r", "\r", "Write a program to calculate the perimeter. An example with 7 rectangles is shown in Figure 1.\r", "\r", "The corresponding boundary is the whole set of line segments drawn in Figure 2.\r", "\r", "The vertices of all rectangles have integer coordinates.\r"], "Input": ["Your program is to read from standard input. The first line contains the number of rectangles pasted on the wall. In each of the subsequent lines, one can find the integer coordinates of the lower left vertex and the upper right vertex of each rectangle. The values of those coordinates are given as ordered pairs consisting of an x-coordinate followed by a y-coordinate.\r", "\r", "0 <= number of rectangles < 5000\r", "All coordinates are in the range [-10000,10000] and any existing rectangle has a positive area."], "OutPut": ["Your program is to write to standard output. The output must contain a single line with a non-negative integer which corresponds to the perimeter for the input rectangles."], "SampleInput": ["7\r\n-15 0 5 10\r\n-5 8 20 25\r\n15 -4 24 14\r\n0 -6 16 4\r\n2 15 10 22\r\n30 10 36 20\r\n34 0 40 16"], "SampleOutput": ["228"], "Hint": [], "Source": []},
{"Title": ["Party Lamps"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 5172"], "Accepted": [" 1722"], "Description": ["To brighten up the gala dinner of the IOI'98 we have a set of N coloured lamps numbered from\r", "1 to N. The lamps are connected to four buttons:\r", "button 1 -- when this button is pressed, all the lamps change their state: those that are ON are turned OFF and those that are OFF are turned ON.\r", "button 2 -- changes the state of all the odd numbered lamps.\r", "button 3 -- changes the state of all the even numbered lamps.\r", "button 4 -- changes the state of the lamps whose number is of the form 3K+1 (with K >= 0), i.e., 1,4,7,...\r", "There is a counter C which records the total number of button presses.\r", "When the party starts, all the lamps are ON and the counter C is set to zero.\r", "\r", "You are given the value of counter C and information on the final state of some of the lamps. Write a program to determine all the possible final configurations of the N lamps that are consistent with the given information, without repetitions."], "Input": ["Your program is to read from standard input. The input contains four lines, describing the number N of lamps available, the number C of button presses, and the state of some of the lamps in the final configuration.\r", "The first line contains the number N and the second line the final value of counter C. The third line lists the lamp numbers you are informed to be ON in the final configuration, separated by one space and terminated by the integer -1. The fourth line lists the lamp numbers you are informed to be OFF in the final configuration, separated by one space and terminated by the integer -1.\r", "\r", "The parameters N and C are constrained by:\r", "10 <= N <= 100\r", "1 <= C <= 10000\r", "The number of lamps you are informed to be ON, in the final configuration, is less than or equal to 2.The number of lamps you are informed to be OFF, in the final configuration, is less than or equal to 2."], "OutPut": ["Your program is to write to standard output. The output must contain all the possible final configurations (without repetitions) of all the lamps. There is at least one possible final configuration. Each possible configuration must be written on a different line. Each line has N characters, where the first character represents the state of lamp 1 and the last character represents the state of lamp N. A 0 (zero) stands for a lamp that is OFF, and a 1 (one) stands for a lamp that is ON. Configurations should be listed in binary ascending order."], "SampleInput": ["10\r\n1\r\n-1\r\n7 -1"], "SampleOutput": ["0000000000\r\n0101010101\r\n0110110110"], "Hint": [], "Source": []},
{"Title": ["Starry Night"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2303"], "Accepted": [" 868"], "Description": ["High up in the night sky, the shining stars appear in clusters of various shapes. A cluster is a non-empty group of neighbouring stars, adjacent in horizontal, vertical or diagonal direction. A cluster cannot be a part of a larger cluster.\r", "\r", "Clusters may be similar. Two clusters are similar if they have the same shape and number of stars, irrespective of their orientation. In general, the number of possible orientations for a cluster is eight, as Figure 1 exemplifies.\r", "\r", "The night sky is represented by a sky map, which is a two-dimensional matrix of 0's and 1's. A cell contains the digit 1 if it has a star, and the digit 0 otherwise.\r", "\r", "Given a sky map, mark all the clusters with lower case letters. Similar clusters must be marked with the same letter; non-similar clusters must be marked with different letters. You mark a cluster with a lower case letter by replacing every 1 in the cluster by that lower case letter. The order of allocation of letters depends on the first appearance of different clusters, from top to bottom and from left to right.\r"], "Input": ["Your program is to read from standard input. The first two lines contain, respectively, the width W and the height H of a sky map. The sky map is given in the following H lines, of W characters each.\r", "\r", "0 <= W (width of the sky map) <= 100\r", "0 <= H (height of the sky map) <= 100\r", "0 <= Number of clusters <= 500\r", "0 <= Number of non-similar clusters <= 26 (a..z)\r", "1 <= Number of stars per cluster <= 160"], "OutPut": ["Your program is to write to standard output. The output contains the same map as the input, except that the clusters are marked as described above."], "SampleInput": ["23\r\n15\r\n10001000000000010000000\r\n01111100011111000101101\r\n01000000010001000111111\r\n00000000010101000101111\r\n00000111010001000000000\r\n00001001011111000000000\r\n10000001000000000000000\r\n00101000000111110010000\r\n00001000000100010011111\r\n00000001110101010100010\r\n00000100110100010000000\r\n00010001110111110000000\r\n00100001110000000100000\r\n00001000100001000100101\r\n00000001110001000111000"], "SampleOutput": ["a000a0000000000b0000000\r\n0aaaaa000ccccc000d0dd0d\r\n0a0000000c000c000dddddd\r\n000000000c0b0c000d0dddd\r\n00000eee0c000c000000000\r\n0000e00e0ccccc000000000\r\nb000000e000000000000000\r\n00b0f000000ccccc00a0000\r\n0000f000000c000c00aaaaa\r\n0000000ddd0c0b0c0a000a0\r\n00000b00dd0c000c0000000\r\n000g000ddd0ccccc0000000\r\n00g0000ddd0000000e00000\r\n0000b000d0000f000e00e0b\r\n0000000ddd000f000eee000"], "Hint": ["Just to make it clearer, notice that this sample input  corresponds to the following picture of the sky.\r", "\r", "Notice that this sample output corresponds to the following picture.\r"], "Source": ["IOI 1998"]},
{"Title": ["Contact"], "TimeLimit": [" 5000MS"], "MemoryLimit": [" 32768K"], "TotalSubmissions": [" 2894"], "Accepted": [" 808"], "Description": ["Dr. Astro Insky works at a radiotelescope centre. Recently, she noticed a very curious microwave pulsing emission sent right from the centre of the galaxy. Is the emission transmitted by some extraterrestrial form of intelligent life? Or is it nothing but the usual heartbeat of the stars?\r", "\r", "You must help Dr. Insky to find out the truth by providing a tool to analyse bit patterns in the files she records. Dr. Insky wants to find the patterns of length between (and including) A and B that repeat themselves most often in the data file of each day. In each case, the greatest N distinct frequencies (that is, number of occurrences) are sought. Pattern occurrences may overlap, and only patterns that occur at least once are taken into account.\r"], "Input": ["Your program is to read from standard input.\r", "First line - The integer A indicating the minimum pattern length.\r", "Second line - The integer B indicating the maximum pattern length.\r", "Third line - The integer N indicating the number of distinct frequencies.\r", "Fourth line - A sequence of 0 and 1 characters, terminated by a 2 character.\r", "\r", "The input may have up to 2 megabytes. The parameters A, B and N are constrained by:\r", "0 < N <= 20\r", "0 < A <= B <= 12\r"], "OutPut": ["Your program is to write to standard output. The output contains at most N lines, listing the at most N greatest frequencies and corresponding patterns. The listing must be produced in decreasing order of pattern frequency, and consists of lines formatted like\r", "\r", "frequency pattern pattern ... pattern\r", "\r", "where frequency is the number of occurrences of the patterns that follow. The patterns in each line must appear in decreasing order of length. Patterns of equal length must be listed in reverse numerical order. In case there are less than N distinct frequencies, the output listing will have less than N lines.\r"], "SampleInput": ["2\r\n4\r\n10\r\n010100100100010001111011000010100110011110000100100111100100000002"], "SampleOutput": ["23 00\r\n15 10 01\r\n12 100\r\n11 001 000 11\r\n10 010\r\n8 0100\r\n7 1001 0010\r\n6 0000 111\r\n5 1000 110 011\r\n4 1100 0011 0001"], "Hint": [], "Source": []},
{"Title": ["Bar Codes"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1357"], "Accepted": [" 499"], "Description": ["A bar-code symbol consists of alternating dark and light bars, starting with a dark bar on the left. Each bar is a number of units wide. Figure 1 shows a bar-code symbol consisting of 4 bars that extend over 1+2+3+1=7 units. \r", "\r", "\r", "In general, the bar code BC(n,k,m) is the set of all symbols with k bars that together extend over exactly n units, each bar being at most m units wide. For instance, the symbol in Figure 1 belongs to BC(7,4,3) but not to BC(7,4,2). \r", "\r", "\r", "Figure 2 shows all 16 symbols in BC(7,4,3). Each `1' represents a dark unit, each `0' a light unit. The symbols appear in lexicographic (dictionary) order. The number on the left of the colon (`:') is the rank of the symbol. The symbol in Figure 1 has rank 4 in BC(7,4,3). \r"], "Input": ["Your program is to read from standard input. The first line contains the numbers n, k, and m (1 <= n,k,m <= 33). On the second line is a number s (0 <= s <= 100). The following s lines each contain some symbol in BC(n,k,m), represented by '0's and '1's as in Figure 2. "], "OutPut": ["Your program is to write to standard output. On the first line your program should write the total number of symbols in BC(n,k,m). On each of the s following lines, it should write the rank of the corresponding symbol in the input."], "SampleInput": ["7 4 3\r\n5\r\n1001110\r\n1110110\r\n1001100\r\n1001110\r\n1000100"], "SampleOutput": ["16\r\n4\r\n15\r\n3\r\n4\r\n0"], "Hint": [], "Source": []},
{"Title": ["Street Race"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1308"], "Accepted": [" 302"], "Description": ["Figure 1 gives an example of a course for a street race. You see some points, labeled from 0 to N (here N=9), and some arrows connecting them. Point 0 is the start of the race; point N is the finish. The arrows represent one-way streets. The participants of the race move from point to point via the streets, in the direction of the arrows only. At each point, a participant may choose any outgoing arrow. \r", "\r", "\r", "A well-formed course has the following properties: \r", "1.Every point in the course can be reached from the start. \r", "2.The finish can be reached from each point in the course. \r", "3.The finish has no outgoing arrows. \r", "A participant does not have to visit every point of the course to reach the finish. Some points, however, are unavoidable. In the example, these are points 0, 3, 6, and 9. Given a well-formed course, your program has to determine the set of unavoidable points that all participants have to visit, excluding start and finish (Subtask A). \r", "Suppose the race has to be held on two consecutive days. For that purpose the course has to be split into two courses, one for each day. On the first day, the start is at point 0, and the finish at some `splitting point'. On the second day, the start is at this splitting point and the finish is at point N. Given a well-formed course, your program has to determine the set of splitting points (Subtask B). A point S is a splitting point for the well-formed course C if S differs from the start and the finish of C, and the course can be split into two well-formed courses that have no common arrows and that have S as only common point. In the example, only point 3 is a splitting point. \r"], "Input": ["Your program is to read from standard input. The input describes a well-formed course with at most 50 points and at most 100 arrows. The first N lines contain the endpoints of the arrows that leave from the points 0 through N-1 respectively. Each of these lines ends with the number -2. The last line contains the number -1."], "OutPut": ["Your program is to write to standard output. The first line should contain the number of unavoidable points in the input course, followed by the labels of these points, in ascending order. The second line should contain the number of splitting points of the input course, followed by the labels of all these points, in ascending order."], "SampleInput": ["1 2 -2\r\n3 -2\r\n3 -2\r\n5 4 -2\r\n6 4 -2\r\n6 -2\r\n7 8 -2\r\n9 -2\r\n5 9 -2\r\n-1"], "SampleOutput": ["2 3 6\r\n1 3"], "Hint": [], "Source": []},
{"Title": ["Letter Game"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 12444"], "Accepted": [" 3408"], "Description": ["\r", "\r", "Letter games are popular at home and on television. In one version of the game, every letter has a value, and you collect letters to form one or more words giving the highest possible score. Unless you have 'a way with words', you will try all the words you know, sometimes looking up the spelling, and then compute the scores. Obviously, this can be done more accurately by computer. \r", "Given the values in Figure 1, a list of English words, and the letters collected: find the highest scoring words or pairs of words that can be formed,in which a letter must not occur more often than in the collected letters.\r"], "Input": ["Your program is to read from standard input. The first line contains a string of lowercase letters (from 'a' to 'z'): the letters collected. The string consists of at least 3 and at most 7 letters in arbitrary order. \r", "From the second line, there is a dictionary consisting of at most 40,000 lines. At the end of the dictionary is a line with a single period ('.'). Each of the other lines contains a string of at least 3 and at most 7 lowercase letters. The dictionary is sorted alphabetically and contains no duplicates. \r"], "OutPut": ["Your program is to write to standard output. You should output one line with the highest score."], "SampleInput": ["prmgroa\r\nprofile\r\nprogram\r\nprom\r\nrag\r\nram\r\nrom\r\n."], "SampleOutput": ["24"], "Hint": ["Huge input,scanf is recommended."], "Source": ["IOI 1995"]},
{"Title": ["Shopping Offers"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 6190"], "Accepted": [" 2620"], "Description": ["\r", "In a shop each kind of product has a price. For example, the price of a flower is 2 ICU (Informatics Currency Units) and the price of a vase is 5 ICU. In order to attract more customers, the shop introduces some special offers. \r", "A special offer consists of one or more product items for a reduced price. Examples: three flowers for 5 ICU instead of 6, or two vases together with one flower for 10 ICU instead of 12. \r", "Write a program that calculates the price a customer has to pay for certain items, making optimal use of the special offers. That is, the price should be as low as possible. You are not allowed to add items, even if that would lower the price. \r", "For the prices and offers given above, the (lowest) price for three flowers and two vases is 14 ICU: two vases and one flower for the reduced price of 10 ICU and two flowers for the regular price of 4 ICU. \r"], "Input": ["Your program is to read from standard input. The first line contains the number b of different kinds of products in the basket (0 <= b <= 5). Each of the next b lines contains three values c, k, and p. The value c is the (unique) product code (1 <= c <= 999). The value k indicates how many items of this product are in the basket (1 <= k <= 5). The value p is the regular price per item (1 <= p <= 999). Notice that all together at most 5*5=25 items can be in the basket. The b+2nd line contains the number s of special offers (0 <= s <= 99). Each of the next s lines describes one offer by giving its structure and its reduced price. The first number n on such a line is the number of different kinds of products that are part of the offer (1 <= n <= 5). The next n pairs of numbers (c,k) indicate that k items (1 <= k <= 5) with product code c (1 <= c <= 999) are involved in the offer. The last number p on the line stands for the reduced price (1 <= p <= 9999). The reduced price of an offer is less than the sum of the regular prices. "], "OutPut": ["Your program is to write to standard output. Output one line with the lowest possible price to be paid."], "SampleInput": ["2\r\n7 3 2\r\n8 2 5\r\n2\r\n1 7 3 5\r\n2 7 1 8 2 10"], "SampleOutput": ["14"], "Hint": [], "Source": []},
{"Title": ["Packing Rectangles"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1398"], "Accepted": [" 686"], "Description": ["\r", "\r", "Four rectangles are given. Find the smallest enclosing (new) rectangle into which these four may be fitted without overlapping. By smallest rectangle we mean the one with the smallest area.\r", "All four rectangles should have their sides parallel to the corresponding sides of the enclosing rectangle. Figure 1 shows six ways to fit four rectangles together. These six are the only possible basic layouts, since any other layout can be obtained from a basic layout by rotation or reflection. There may exist several different enclosing rectangles fulfilling the requirements, all with the same area. You have to produce all such enclosing rectangles.\r"], "Input": ["Your program is to read from standard input. The input consists of four lines. Each line describes one given rectangle by two positive integers: the lengths of the sides of the rectangle. Each side of a rectangle is at least 1 and at most 50."], "OutPut": ["Your program is to write to standard output. The output should contain one line more than the number of solutions. The first line contains a single integer: the minimum area of the enclosing rectangles. Each of the following lines contains one solution described by two numbers p and q with p <= q. These lines must be sorted in ascending order of p, and must all be different."], "SampleInput": ["1 2\r\n2 3\r\n3 4\r\n4 5"], "SampleOutput": ["40\r\n4 10\r\n5 8"], "Hint": [], "Source": []},
{"Title": ["The Circle"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1023"], "Accepted": [" 291"], "Description": ["You have a circle, divided into sectors. You are given three positive numbers: n (n <= 6), m (m <= 20) and k (k <= 20). n is the number of sectors. Choose integers to place in each sector. All integers have to be greater or equal to k. When the circle is filled you can use the integer in a single sector or add the integers in two or more adjacent sectors to make a new number. Using these new numbers you can create an unbroken sequence of all integers between m and i (m,m+1,m+2 ... i). \r", "Your task is to choose integers for the sectors such that the largest number (i) in the sequence is as high as possible. Figure 1 below shows how to generate all numbers from 2 to 21 (for n=5, m=2, k=1). The ^-sign below the sectors shows which sectors to add together to make numbers in the sequence. \r"], "Input": ["Your program is to read from standard input. The input contains three integers (n, m and k). "], "OutPut": ["Your program is to write to standard output. The output must contain: \r", "\r", "(2 10 3 1 5) is NOT a valid solution, since it does not start with the smallest number. (1 3 10 2 5) and (1 5 2 10 3) must both be included in the output. Note that (1 1 2 3), (1 3 2 1), (1 2 3 1) and (1 1 3 2) should all be output.\r"], "SampleInput": ["5\r\n2\r\n1"], "SampleOutput": ["21\r\n1 3 10 2 5\r\n1 5 2 10 3\r\n2 4 9 3 5\r\n2 5 3 9 4"], "Hint": ["\r"], "Source": ["IOI 1994"]},
{"Title": ["The Buses"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 7971"], "Accepted": [" 2178"], "Description": ["A man arrives at a bus stop at 12:00. He remains there during 12:00-12:59. The bus stop is used by a number of bus routes. The man notes the times of arriving buses. The times when buses arrive are given. \r", "\r", "Find the schedule with the fewest number of bus routes that must stop at the bus stop to satisfy the input data. For each bus route, output the starting time and the interval. \r"], "Input": ["Your program is to read from standard input. The input contains a number n (n <= 300) telling how many arriving buses have been noted, followed by the arrival times in ascending order. "], "OutPut": ["Your program is to write to standard output. The output contains one integer, which is the fewest number of bus routes."], "SampleInput": ["17\r\n0 3 5 13 13 15 21 26 27 29 37 39 39 45 51 52 53"], "SampleOutput": ["3"], "Hint": [], "Source": []},
{"Title": ["The Clocks"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 20255"], "Accepted": [" 8422"], "Description": ["\r", "There are nine clocks in a 3*3 array (figure 1). The goal is to return all the dials to 12 o'clock with as few moves as possible. There are nine different allowed ways to turn the dials on the clocks. Each such way is called a move. Select for each move a number 1 to 9. That number will turn the dials 90' (degrees) clockwise on those clocks which are affected according to figure 2 below. \r"], "Input": ["Your program is to read from standard input. Nine numbers give the start positions of the dials. 0=12 o'clock, 1=3 o'clock, 2=6 o'clock, 3=9 o'clock."], "OutPut": ["Your program is to write to standard output. Output a shortest sorted sequence of moves (numbers), which returns all the dials to 12 o'clock. You are convinced that the answer is unique."], "SampleInput": ["3 3 0\r\n2 2 2\r\n2 1 2"], "SampleOutput": ["4 5 8 9"], "Hint": [], "Source": []},
{"Title": ["The Primes"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2240"], "Accepted": [" 893"], "Description": ["\r", "Figure 1 shows a square. Each row, each column and the two diagonals can be read as a five digit prime number. The rows are read from left to right. The columns are read from top to bottom. Both diagonals are read from left to right. Write a program that constructs such squares:\r", "\r", "\r"], "Input": ["Your program is to read from standard input. First the digit sum of prime numbers and then the digit in the top left-hand corner of the square. The file contains two lines. There will always be a solution to the given test data."], "OutPut": ["Your program is to write to standard output. Output five lines for each solution found, where each line in turn consists of a five digit prime number. The solutions are sorted by the prime in the first row, then by the prime in the second row,etc. Output a blank line after each solution."], "SampleInput": ["11\r\n1"], "SampleOutput": ["11351\r\n14033\r\n30323\r\n53201\r\n13313\r\n\r\n11351\r\n33203\r\n30323\r\n14033\r\n33311\r\n\r\n13313\r\n13043\r\n32303\r\n50231\r\n13331\r\n"], "Hint": [], "Source": []},
{"Title": ["The Castle"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 9245"], "Accepted": [" 5182"], "Description": ["\r", "Figure 1 shows the map of a castle.Write a program that calculates\r", "1. how many rooms the castle has\r", "2. how big the largest room is\r", "The castle is divided into m * n (m<=50, n<=50) square modules. Each such module can have between zero and four walls. \r"], "Input": ["Your program is to read from standard input. The first line contains the number of modules in the north-south direction and the number of modules in the east-west direction. In the following lines each module is described by a number (0 <= p <= 15). This number is the sum of: 1 (= wall to the west), 2 (= wall to the north), 4 (= wall to the east), 8 (= wall to the south). Inner walls are defined twice; a wall to the south in module 1,1 is also indicated as a wall to the north in module 2,1. The castle always has at least two rooms."], "OutPut": ["Your program is to write to standard output: First the number of rooms, then the area of the largest room (counted in modules)."], "SampleInput": ["4\r\n7\r\n11 6 11 6 3 10 6\r\n7 9 6 13 5 15 5\r\n1 10 12 7 13 7 5\r\n13 11 10 8 10 12 13"], "SampleOutput": ["5\r\n9"], "Hint": [], "Source": []},
{"Title": ["The Triangle"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 73744"], "Accepted": [" 44072"], "Description": ["Figure 1 shows a number triangle. Write a program that calculates the highest sum of numbers passed on a route that starts at the top and ends somewhere on the base. Each step can go either diagonally down to the left or diagonally down to the right. \r"], "Input": ["Your program is to read from standard input. The first line contains one integer N: the number of rows in the triangle. The following N lines describe the data of the triangle. The number of rows in the triangle is > 1 but <= 100. The numbers in the triangle, all integers, are between 0 and 99. "], "OutPut": ["Your program is to write to standard output. The highest sum is written as an integer."], "SampleInput": ["5\r\n7\r\n3 8\r\n8 1 0 \r\n2 7 4 4\r\n4 5 2 6 5"], "SampleOutput": ["30"], "Hint": [], "Source": []},
{"Title": ["Building with Blocks"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 576"], "Accepted": [" 158"], "Description": ["A unit cube is a 1x1x1 cube, whose corners have integer x, y, and z coordinates. Two unit cubes are connected when they share a face. A 3-dimensional solid object (solid, for short) is a non-empty connected set of unit cubes (see Figure 1). The volume of a solid is the number of unit cubes it contains. A block is a solid with volume at most 4. Two blocks have the same type when one can be obtained from the other by translations and rotations (not reflections). There are exactly 12 block types (see Figure 2). The colors in the figures only help to clarify the structure of the solids; they have no other meaning.\r", "\r", "A set D of blocks is a decomposition of a solid S when the union of all blocks in D equals S, and no two distinct blocks in D have a unit cube in common.\r", "\r", "Your task is to write a program that, given a description of a solid S, determines a smallest set of blocks into which S can be decomposed. It only needs to report the types of these blocks as often as they occur in the decomposition.\r"], "Input": ["Your program is to read from standard input. The first line contains the volume V of the solid (1  <=  V  <=  50). The remaining V lines contain three integers x, y, z, being the coordinate triple of its corner that minimizes x + y + z, each identifying one unit cube of the solid (1  <=  x, y, z  <=  7)."], "OutPut": ["Your program is to write to standard output. The first line must contain one integer M, being the smallest number of blocks into which the input solid can be decomposed. "], "SampleInput": ["18\r\n2 1 1\r\n4 1 1 \r\n2 3 1 \r\n4 3 1\r\n2 1 2\r\n3 1 2\r\n4 1 2 \r\n1 2 2 \r\n2 2 2\r\n3 2 2\r\n4 2 2\r\n2 3 2\r\n3 3 2 \r\n4 3 2\r\n4 2 3\r\n4 2 4\r\n4 2 5\r\n5 2 5"], "SampleOutput": ["5"], "Hint": [], "Source": []},
{"Title": ["Walls"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 8397"], "Accepted": [" 3958"], "Description": ["In a country, great walls have been built in such a way that every great wall connects exactly two towns. The great walls do not cross each other. Thus, the country is divided into such regions that to move from one region to another, it is necessary to go through a town or cross a great wall. For any two towns A and B, there is at most one great wall with one end in A and the other in B, and further, it is possible to go from A to B by always walking in a town or along a great wall. The input format implies additional restrictions. \r", "\r", "There is a club whose members live in the towns. In each town, there is only one member or there are no members at all. The members want to meet in one of the regions (outside of any town). The members travel riding their bicycles. They do not want to enter any towns, because of the traffic, and they want to cross as few great walls as possible, as it is a lot of trouble. To go to the meeting region, each member needs to cross a number (possibly 0) of great walls. They want to find such an optimal region that the sum of these numbers (crossing-sum, for short) is minimized.\r", "\r", "The towns are labeled with integers from 1 to N, where N is the number of towns. In Figure 1, the labeled nodes represent the towns and the lines connecting the nodes represent the great walls. Suppose that there are three members, who live in towns 3, 6, and 9. Then, an optimal meeting region and respective routes for members are shown in Figure 2. The crossing-sum is 2: the member from town 9 has to cross the great wall between towns 2 and 4, and the member from town 6 has to cross the great wall between towns 4 and 7.\r", "\r", "You are to write a program which, given the towns, the regions, and the club member home towns, computes the optimal region(s) and the minimal crossing-sum.\r"], "Input": ["Your program is to read from standard input. The first line contains one integer: the number of regions M, 2 <= M <= 200. The second line contains one integer: the number of towns N, 3 <= N <= 250. The third line contains one integer: the number of club members L, 1 <= L <= 30, L <= N. The fourth line contains L distinct integers in increasing order: the labels of the towns where the members live.\r", "\r", "After that the input contains 2M lines so that there is a pair of lines for each region: the first two of the 2M lines describe the first region, the following two the second and so on. Of the pair, the first line shows the number of towns I on the border of that region. The second line of the pair contains I integers: the labels of these I towns in some order in which they can be passed when making a trip clockwise along the border of the region, with the following exception. The last region is the \"outside region\" surrounding all towns and other regions, and for it the order of the labels corresponds to a trip in counterclockwise direction. The order of the regions gives an integer labeling to the regions: the first region has label 1, the second has label 2, and so on. Note that the input includes all regions formed by the towns and great walls, including the \"outside region\".\r"], "OutPut": ["Your program is to write to standard output. The first line contains one integer: the minimal crossing-sum. "], "SampleInput": ["10\r\n10\r\n3\r\n3 6 9 \r\n3\r\n1 2 3 \r\n3\r\n1 3 7 \r\n4\r\n2 4 7 3 \r\n3\r\n4 6 7 \r\n3\r\n4 8 6 \r\n3\r\n6 8 7 \r\n3\r\n4 5 8 \r\n4\r\n7 8 10 9 \r\n3\r\n5 10 8 \r\n7\r\n7 9 10 5 4 2 1"], "SampleOutput": ["2"], "Hint": [], "Source": []},
{"Title": ["Post Office"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 24752"], "Accepted": [" 13209"], "Description": ["There is a straight highway with villages alongside the highway. The highway is represented as an integer axis, and the position of each village is identified with a single integer coordinate. There are no two villages in the same position. The distance between two positions is the absolute value of the difference of their integer coordinates.\r", "\r", "Post offices will be built in some, but not necessarily all of the villages. A village and the post office in it have the same position. For building the post offices, their positions should be chosen so that the total sum of all distances between each village and its nearest post office is minimum.\r", "\r", "You are to write a program which, given the positions of the villages and the number of post offices, computes the least possible sum of all distances between each village and its nearest post office. \r"], "Input": ["Your program is to read from standard input. The first line contains two integers: the first is the number of villages V, 1 <= V <= 300, and the second is the number of post offices P, 1 <= P <= 30, P <= V. The second line contains V integers in increasing order. These V integers are the positions of the villages. For each position X it holds that 1 <= X <= 10000."], "OutPut": ["The first line contains one integer S, which is the sum of all distances between each village and its nearest post office. "], "SampleInput": ["10 5\r\n1 2 3 6 7 9 11 22 44 50"], "SampleOutput": ["9"], "Hint": [], "Source": []},
{"Title": ["Palindrome"], "TimeLimit": [" 3000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 78941"], "Accepted": [" 27665"], "Description": ["A palindrome is a symmetrical string, that is, a string read identically from left to right as well as from right to left.  You are to write a program which, given a string, determines the minimal number of characters to be inserted into the string in order to obtain a palindrome.\r", "\r", "As an example, by inserting 2 characters, the string \"Ab3bd\" can be transformed into a palindrome (\"dAb3bAd\" or \"Adb3bdA\"). However, inserting fewer than 2 characters does not produce a palindrome.\r"], "Input": ["Your program is to read from standard input. The first line contains one integer: the length of the input string N, 3 <= N <= 5000. The second line contains one string with length N. The string is formed from uppercase letters from 'A' to 'Z', lowercase letters from 'a' to 'z' and digits from '0' to '9'. Uppercase and lowercase letters are to be considered distinct. "], "OutPut": ["Your program is to write to standard output. The first line contains one integer, which is the desired minimal number."], "SampleInput": ["5\r\nAb3bd"], "SampleOutput": ["2"], "Hint": [], "Source": []},
{"Title": ["TRAFFIC LIGHTS"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 7518"], "Accepted": [" 3141"], "Description": ["In the city of Dingilville the traffic is arranged in an unusual way. There are junctions and roads connecting the junctions. There is at most one road between any two different junctions. There is no road connecting a junction to itself. Travel time for a road is the same for both directions. At every junction there is a single traffic light that is either blue or purple at any moment. The color of each light alternates periodically: blue for certain duration and then purple for another duration. Traffic is permitted to travel down the road between any two junctions, if and only if the lights at both junctions are the same color at the moment of departing from one junction for the other. If a vehicle arrives at a junction just at the moment the lights switch it must consider the new colors of lights. Vehicles are allowed to wait at the junctions. You are given the city map which shows \r", "\r", "the travel times for all roads (integers), \r", "the durations of the two colors at each junction (integers) \r", "and the initial color of the light and the remaining time (integer) for this color to change at each junction. \r", "Your task is to find a path which takes the minimum time from a given source junction to a given destination junction for a vehicle when the traffic starts. In case more than one such path exists you are required to report only one of them.\r"], "Input": ["The first line contains two numbers: The id-number of the source junction and the id-number of the destination junction. \r", "The second line contains two numbers: N, M. \r", "The following N lines contain information on N junctions. The (i+2)’th line of the input file holds information about the junction i : Ci, ric, tiB, tiP where Ci is either ‘B’ or ‘P’, indicating the initial color of the light at the junction i. \r", "Finally, the next M lines contain information on M roads. Each line is of the form: i, j, lij where i and j are the id-numbers of the junctions which are connected by this road . \r", "\r", "2 <= N <=300 where N is the number of junctions. The junctions are identified by integers 1 through N. These numbers are called id-numbers. \r", "1 <=M <=14,000 where M is the number of roads. \r", "1 <= lij <= 100 where lij is the time required to move from junction i to j using the road that connects i and j. \r", "1 <= tic <= 100 where tic is the duration of the color c for the light at the junction i. The index c is either B for blue or P for purple. \r", "1 <= ric <= tic where ric is the remaining time for the initial color c at junction i. \r", "The first line contains two numbers: The id-number of the source junction and the id-number of the destination junction. \r", "The second line contains two numbers: N, M. \r", "The following N lines contain information on N junctions. The (i+2)’th line of the input file holds information about the junction i : Ci, ric, tiB, tiP where Ci is either ‘B’ or ‘P’, indicating the initial color of the light at the junction i. \r", "Finally, the next M lines contain information on M roads. Each line is of the form: i, j, lij where i and j are the id-numbers of the junctions which are connected by this road . "], "OutPut": ["If a path exists: \r", "\r", "The first line will contain the time taken by a minimum-time path from the source junction to the destination junction. \r", "\r", "If a path does not exist:\r", "\r", "A single line containing only the integer 0. "], "SampleInput": ["1 4\r\n4 5\r\nB 2 16 99\r\nP 6 32 13\r\nP 2 87 4\r\nP 38 96 49\r\n1 2 4\r\n1 3 40\r\n2 3 75\r\n2 4 76\r\n3 4 77"], "SampleOutput": ["127"], "Hint": [], "Source": []},
{"Title": ["LITTLE SHOP OF FLOWERS"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 24955"], "Accepted": [" 11380"], "Description": ["You want to arrange the window of your flower shop in a most pleasant way. You have F bunches of flowers, each being of a different kind, and at least as many vases ordered in a row. The vases are glued onto the shelf and are numbered consecutively 1 through V, where V is the number of vases, from left to right so that the vase 1 is the leftmost, and the vase V is the rightmost vase. The bunches are moveable and are uniquely identified by integers between 1 and F. These id-numbers have a significance: They determine the required order of appearance of the flower bunches in the row of vases so that the bunch i must be in a vase to the left of the vase containing bunch j whenever i < j. Suppose, for example, you have bunch of azaleas (id-number=1), a bunch of begonias (id-number=2) and a bunch of carnations (id-number=3). Now, all the bunches must be put into the vases keeping their id-numbers in order. The bunch of azaleas must be in a vase to the left of begonias, and the bunch of begonias must be in a vase to the left of carnations. If there are more vases than bunches of flowers then the excess will be left empty. A vase can hold only one bunch of flowers.\r", "\r", "Each vase has a distinct characteristic (just like flowers do). Hence, putting a bunch of flowers in a vase results in a certain aesthetic value, expressed by an integer. The aesthetic values are presented in a table as shown below. Leaving a vase empty has an aesthetic value of 0.\r", "\r", "According to the table, azaleas, for example, would look great in vase 2, but they would look awful in vase 4.\r", "\r", "To achieve the most pleasant effect you have to maximize the sum of aesthetic values for the arrangement while keeping the required ordering of the flowers. If more than one arrangement has the maximal sum value, any one of them will be acceptable. You have to produce exactly one arrangement.\r"], "Input": ["\r"], "OutPut": ["The first line will contain the sum of aesthetic values for your arrangement. "], "SampleInput": ["3 5\r\n7 23 -5 -24 16\r\n5 21 -4 10 23\r\n-21 5 -4 -20 20"], "SampleOutput": ["53"], "Hint": [], "Source": []},
{"Title": ["A STRIP OF LAND"], "TimeLimit": [" 20000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 6993"], "Accepted": [" 2098"], "Description": ["The residents of Dingilville are trying to locate a region to build an airport. The map of the land is at hand. The map is a rectangular grid of unit squares, each identified by a pair of coordinates (x,y), where x is the horizontal (west-east) and y is the vertical (south-north) coordinate. The height of every square is shown on the map. \r", "\r", "Your task is to find a rectangular region of squares with the largest area (i.e. a rectangular region consisting of the largest number of squares) such that \r", "1.the height difference between the highest and the lowest squares of the region is less than or equal to a given limit C, and \r", "2.the width (i.e. the number of squares along the west-east direction) of the region is at most 100.\r", "\r", "In case there is more than one such region you are required to report only one of them."], "Input": ["The first line contains three integers: U, V and C. \r", "Each of the following V lines contains the integers Hxy for x = 1,...,U. More specifically, Hxy occurs as the x'th number on the (V-y+2)'th input line. \r", "a.1 <= U <= 700, 1 <= V <= 700 where U and V designate the dimensions of the map. More specifically, U is the number of squares in the west-east direction, and V, in the south-north direction. \r", "b.0 <= C <= 10\r", "c.-30,000 <= Hxy  <= 30,000 where the integer Hxy is the height of the square at coordinates (x, y), 1 <= x <= U, 1 <= y <= V.\r", "d.The southwest corner square of the map has the coordinates (1,1) and the northeast corner has the coordinates (U,V)."], "OutPut": ["Output the largest area."], "SampleInput": ["10 15 4\r\n41 40 41 38 39 39 40 42 40 40\r\n39 40 43 40 36 37 35 39 42 42\r\n44 41 39 40 38 40 41 38 35 37\r\n38 38 33 39 36 37 32 36 38 40\r\n39 40 39 39 39 40 40 41 43 41\r\n39 40 41 38 39 38 39 39 39 42\r\n36 39 39 39 39 40 39 41 40 41\r\n31 37 36 41 41 40 39 41 40 40\r\n40 40 40 42 41 40 39 39 39 39\r\n42 40 44 40 38 40 39 39 37 41\r\n41 41 40 39 39 40 41 40 39 40\r\n47 45 49 43 43 41 41 40 39 42\r\n42 41 41 39 40 39 42 40 42 42\r\n41 44 49 43 46 41 42 41 42 42\r\n45 40 42 42 46 42 44 40 42 41"], "SampleOutput": ["35"], "Hint": [], "Source": []},
{"Title": ["TELE"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 6948"], "Accepted": [" 3890"], "Description": ["A TV-network plans to broadcast an important football match. Their network of transmitters and users can be represented as a tree. The root of the tree is a transmitter that emits the football match, the leaves of the tree are the potential users and other vertices in the tree are relays (transmitters).\r", "The price of transmission of a signal from one transmitter to another or to the user is given. A price of the entire broadcast is the sum of prices of all individual signal transmissions.\r", "Every user is ready to pay a certain amount of money to watch the match and the TV-network then decides whether or not to provide the user with the signal.\r", "Write a program that will find the maximal number of users able to watch the match so that the TV-network's doesn't lose money from broadcasting the match."], "Input": ["The first line of the input file contains two integers N and M, 2 <= N <= 3000, 1 <= M <= N-1, the number of vertices in the tree and the number of potential users.\r", "The root of the tree is marked with the number 1, while other transmitters are numbered 2 to N-M and potential users are numbered N-M+1 to N.\r", "The following N-M lines contain data about the transmitters in the following form:\r", "K A1 C1 A2 C2 ... AK CK\r", "Means that a transmitter transmits the signal to K transmitters or users, every one of them described by the pair of numbers A and C, the transmitter or user's number and the cost of transmitting the signal to them.\r", "The last line contains the data about users, containing M integers representing respectively the price every one of them is willing to pay to watch the match."], "OutPut": ["The first and the only line of the output file should contain the maximal number of users described in the above text."], "SampleInput": ["9 6\r\n3 2 2 3 2 9 3\r\n2 4 2 5 2\r\n3 6 2 7 2 8 2\r\n4 3 3 3 1 1"], "SampleOutput": ["5"], "Hint": [], "Source": []},
{"Title": ["LETTERS"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 9941"], "Accepted": [" 4431"], "Description": ["A single-player game is played on a rectangular board divided in R rows and C columns. There is a single uppercase letter (A-Z) written in every position in the board.\r", "Before the begging of the game there is a figure in the upper-left corner of the board (first row, first column). In every move, a player can move the figure to the one of the adjacent positions (up, down,left or right). Only constraint is that a figure cannot visit a position marked with the same letter twice.\r", "The goal of the game is to play as many moves as possible.\r", "Write a program that will calculate the maximal number of positions in the board the figure can visit in a single game."], "Input": ["The first line of the input contains two integers R and C, separated by a single blank character, 1 <= R, S <= 20.\r", "The following R lines contain S characters each. Each line represents one row in the board."], "OutPut": ["The first and only line of the output should contain the maximal number of position in the board the figure can visit."], "SampleInput": ["3 6\r\nHFDFFB\r\nAJHGDH\r\nDGAGEH"], "SampleOutput": ["6"], "Hint": [], "Source": []},
{"Title": ["SAFE"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1102"], "Accepted": [" 263"], "Description": ["Mirko has decided to rob mini-safe owned by his son so that he could take away some football stickers which are missing in his big sticker collection.\r", "Lock on the safe consists of N equal discs, each of them being divided in 10,000,000 equal segments numbered from 1 to 10,000,000 clockwise. In the begining, segments on discs having the same number are placed one above (beneath) the other. Discs are layed one on the other such that the segments are overlaping and each disc is missing exactly one segment that is called hole.\r", "In order to unlock the lock, all holes must be one above (beneath) the other.In one second, Mirko can turn one disc in one direction (clockwise or counterclockwise) for one segment.\r", "Write a program which will find the minimal time that Mirko needs to open the safe."], "Input": ["The first line of the input contains an integer N, 2 <= N <= 100,000, the number of discs.\r", "The next N lines contain data describing the initial positions of the holes on each disc.\r", "The (i + 1)-th line contains an integer Pi, 1 <= Pi <= 10000000, the initial position of the hole on the i-th disc."], "OutPut": ["The first and only line of the output should contain the minimal time (in seconds).\r", "Note: take care of the size of that number."], "SampleInput": ["4\r\n9999999\r\n7\r\n16\r\n9999995"], "SampleOutput": ["29"], "Hint": [], "Source": []},
{"Title": ["An Easy Problem!"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 9536"], "Accepted": [" 2476"], "Description": ["Have you heard the fact \"The base of every normal number system is 10\" ? Of course, I am not talking about number systems like Stern Brockot Number System. This problem has nothing to do with this fact but may have some similarity.  \r", "\r", "You will be given an N based integer number R and you are given the guaranty that R is divisible by (N-1). You will have to print the smallest possible value for N. The range for N is 2 <= N <= 62 and the digit symbols for 62 based number is (0..9 and A..Z and a..z). Similarly, the digit symbols for 61 based number system is (0..9 and A..Z and a..y) and so on.  "], "Input": ["Each line in the input will contain an integer (as defined in mathematics) number of any integer base (2..62). You will have to determine what is the smallest possible base of that number for the given conditions. No invalid number will be given as input. The largest size of the input file will be 32KB."], "OutPut": ["If number with such condition is not possible output the line \"such number is impossible!\" For each line of input there will be only a single line of output. The output will always be in decimal number system."], "SampleInput": ["3\r\n5\r\nA"], "SampleOutput": ["4\r\n6\r\n11"], "Hint": [], "Source": []},
{"Title": ["Atlantis"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 35939"], "Accepted": [" 12236"], "Description": ["There are several ancient Greek texts that contain descriptions of the fabled island Atlantis. Some of these texts even include maps of parts of the island. But unfortunately, these maps describe different regions of Atlantis. Your friend Bill has to know the total area for which maps exist. You (unwisely) volunteered to write a program that calculates this quantity."], "Input": ["The input consists of several test cases. Each test case starts with a line containing a single integer n (1 <= n <= 100) of available maps. The n following lines describe one map each. Each of these lines contains four numbers x1;y1;x2;y2 (0 <= x1 < x2 <= 100000;0 <= y1 < y2 <= 100000), not necessarily integers. The values (x1; y1) and (x2;y2) are the coordinates of the top-left resp. bottom-right corner of the mapped area.\r", "The input file is terminated by a line containing a single 0. Don't process it."], "OutPut": ["For each test case, your program should output one section. The first line of each section must be \"Test case #k\", where k is the number of the test case (starting with 1). The second one must be \"Total explored area: a\", where a is the total explored area (i.e. the area of the union of all rectangles in this test case), printed exact to two digits to the right of the decimal point.\r", "Output a blank line after each test case."], "SampleInput": ["2\r\n10 10 20 20\r\n15 15 25 25.5\r\n0"], "SampleOutput": ["Test case #1\r\nTotal explored area: 180.00 "], "Hint": [], "Source": []},
{"Title": ["The Last Non-zero Digit"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 5999"], "Accepted": [" 1884"], "Description": ["In this problem you will be given two decimal integer number N, M. You will have to find the last non-zero digit of the ", "P", ".This means no of permutations of N things taking M at a time."], "Input": ["The input contains several lines of input. Each line of the input file contains two integers N (0 <= N<= 20000000), M (0 <= M <= N)."], "OutPut": ["For each line of the input you should output a single digit, which is the last non-zero digit of ", "P", ". For example, if ", "P", " is 720 then the last non-zero digit is 2. So in this case your output should be 2."], "SampleInput": ["10 10\r\n10 5\r\n25 6"], "SampleOutput": ["8\r\n4\r\n2"], "Hint": [], "Source": []},
{"Title": ["PIGS"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 26132"], "Accepted": [" 11797"], "Description": ["Mirko works on a pig farm that consists of M locked pig-houses and Mirko can't unlock any pighouse because he doesn't have the keys. Customers come to the farm one after another. Each of them has keys to some pig-houses and wants to buy a certain number of pigs.\r", "All data concerning customers planning to visit the farm on that particular day are available to Mirko early in the morning so that he can make a sales-plan in order to maximize the number of pigs sold.\r", "More precisely, the procedure is as following: the customer arrives, opens all pig-houses to which he has the key, Mirko sells a certain number of pigs from all the unlocked pig-houses to him, and, if Mirko wants, he can redistribute the remaining pigs across the unlocked pig-houses.\r", "An unlimited number of pigs can be placed in every pig-house.\r", "Write a program that will find the maximum number of pigs that he can sell on that day."], "Input": ["The first line of input  contains two integers M and N, 1 <= M <= 1000, 1 <= N <= 100, number of pighouses and number of customers. Pig houses are numbered from 1 to M and customers are numbered from 1 to N.\r", "The next line contains M integeres, for each pig-house initial number of pigs. The number of pigs in each pig-house is greater or equal to 0 and less or equal to 1000.\r", "The next N lines contains records about the customers in the following form ( record about the i-th customer is written in the (i+2)-th line):\r", "A K1 K2 ... KA B It means that this customer has key to the pig-houses marked with the numbers K1, K2, ..., KA (sorted nondecreasingly ) and that he wants to buy B pigs. Numbers A and B can be equal to 0."], "OutPut": ["The first and only line of the output should contain the number of sold pigs."], "SampleInput": ["3 3\r\n3 1 10\r\n2 1 2 2\r\n2 1 3 3\r\n1 2 6"], "SampleOutput": ["7"], "Hint": [], "Source": []},
{"Title": ["Utopia Divided"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1163"], "Accepted": [" 437"], "Description": ["The beautiful land of Utopia was once ravaged by war. When the hostilities subsided the country was divided into four regions by a longitude (north-south line) and a latitude (east-west line). The intersection of these lines became known as the point (0,0). All four parts claimed the name Utopia, but as time went by they generally became known as Utopia 1 (northeast), 2 (northwest), 3 (southwest) and 4 (southeast). A point in any of the regions was identified by its distance east and its distance north of (0,0). These distances could be negative; hence a point in Utopia 2 was designated by a (negative, positive) pair, in Utopia 3 by a (negative, negative) pair, in Utopia 4 by (positive, negative) and in Utopia 1 by a pair of positive numbers.\r", "\r", "A major problem was that citizens were not permitted to cross borders. Fortunately, some ingenious IOI contestants from Utopia developed a safe means of teleportation. The machine requires code numbers, each of which can only be used once. Now the challenge facing the team, and you, is to guide the teleporter from its initial position of (0,0) to the regions of Utopia in the order requested. You don抰 care where in a region you land, but you will have a sequence of N region numbers that specify the regions in which the teleporter is to land. You may be asked to land in the same region in two or more consecutive stops. After leaving the initial (0,0) point, you must never land on a border.\r", "\r", "You will receive as input a sequence of 2N code numbers and are to write them as a sequence of N code pairs, placing a plus or a minus sign before each number. If you are currently at the point (x,y) and use the code pair (+u,-v), you will be teleported to the point (x+u, y-v). You have the 2N numbers, and you can use them in any order you like, each with a plus or a minus sign.\r", "\r", "Suppose you have code numbers 7, 5, 6, 1, 3, 2, 4, 8 and are to guide the teleporter according to the sequence of region numbers 4, 1, 2 ,1. The sequence of code pairs (+7,-1), (-5,+2), (-4,+3), (+8,+6) achieves this as it teleports you from (0,0) to the locations (7,-1), (2,1), (-2,4) and (6,10) in that order. These points are located in Utopia 4, Utopia 1, Utopia 2, and Utopia 1, respectively. \r", "TASK\r", "You are given 2N distinct code numbers and a sequence of N region numbers indicating where the teleporter is to land. Construct a sequence of code pairs from the given numbers that guide the teleporter to go through the given region sequence.\r"], "Input": ["Your program is to read from standard input. The first line contains a positive integer N (1 <= N <= 10000). The second line contains the 2N distinct integer code numbers (1 <= code number <= 100000) separated by single spaces. The last line contains a sequence of N region numbers, each of which is 1, 2, 3 or 4."], "OutPut": ["Your program is to write to standard output. The output consists of N lines, each containing a pair of code numbers each preceded by a sign character. These are codes pairs that will direct the teleporter to the given region sequence. Note that there must be no blank following a sign, but there must be a single space after the first code number.\r", "\r", "If there are several solutions your program can output any one of them. If there are no solutions your program should output the single integer 0."], "SampleInput": ["4\r\n7 5 6 1 3 2 4 8\r\n4 1 2 1"], "SampleOutput": ["+7 -1\r\n-5 +2\r\n-4 +3\r\n+8 +6"], "Hint": [], "Source": []},
{"Title": ["Binary codes"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 6508"], "Accepted": [" 2583"], "Description": [], "Input": [], "OutPut": [], "SampleInput": ["5\r\n1 0 0 1 0"], "SampleOutput": ["0 0 0 1 1"], "Hint": [], "Source": []},
{"Title": ["ID Codes"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 8762"], "Accepted": [" 5121"], "Description": ["It is 2084 and the year of Big Brother has finally arrived, albeit a century late. In order to exercise greater control over its citizens and thereby to counter a chronic breakdown in law and order, the Government decides on a radical measure--all citizens are to have a tiny microcomputer surgically implanted in their left wrists. This computer will contains all sorts of personal information as well as a transmitter which will allow people's movements to be logged and monitored by a central computer. (A desirable side effect of this process is that it will shorten the dole queue for plastic surgeons.) \r", "\r", "An essential component of each computer will be a unique identification code, consisting of up to 50 characters drawn from the 26 lower case letters. The set of characters for any given code is chosen somewhat haphazardly. The complicated way in which the code is imprinted into the chip makes it much easier for the manufacturer to produce codes which are rearrangements of other codes than to produce new codes with a different selection of letters. Thus, once a set of letters has been chosen all possible codes derivable from it are used before changing the set. \r", "\r", "For example, suppose it is decided that a code will contain exactly 3 occurrences of `a', 2 of `b' and 1 of `c', then three of the allowable 60 codes under these conditions are: \r", "\r", "These three codes are listed from top to bottom in alphabetic order. Among all codes generated with this set of characters, these codes appear consecutively in this order. \r", "\r", "Write a program to assist in the issuing of these identification codes. Your program will accept a sequence of no more than 50 lower case letters (which may contain repeated characters) and print the successor code if one exists or the message `No Successor' if the given code is the last in the sequence for that set of characters. \r"], "Input": ["Input will consist of a series of lines each containing a string representing a code. The entire file will be terminated by a line consisting of a single #. "], "OutPut": ["Output will consist of one line for each code read containing the successor code or the words 'No Successor'. "], "SampleInput": ["abaacb\r\ncbbaa\r\n#"], "SampleOutput": ["ababac\r\nNo Successor"], "Hint": [",UVA 146"], "Source": []},
{"Title": ["Tree Summing"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 8994"], "Accepted": [" 2295"], "Description": ["LISP was one of the earliest high-level programming languages and, with FORTRAN, is one of the oldest languages currently being used. Lists, which are the fundamental data structures in LISP, can easily be adapted to represent other important data structures such as trees. \r", "\r", "This problem deals with determining whether binary trees represented as LISP S-expressions possess a certain property. \r", "Given a binary tree of integers, you are to write a program that determines whether there exists a root-to-leaf path whose nodes sum to a specified integer. For example, in the tree shown below there are exactly four root-to-leaf paths. The sums of the paths are 27, 22, 26, and 18. \r", "\r", "Binary trees are represented in the input file as LISP S-expressions having the following form. \r", "\r", "The tree diagrammed above is represented by the expression (5 (4 (11 (7 () ()) (2 () ()) ) ()) (8 (13 () ()) (4 () (1 () ()) ) ) ) \r", "\r", "Note that with this formulation all leaves of a tree are of the form (integer () () ) \r", "\r", "Since an empty tree has no root-to-leaf paths, any query as to whether a path exists whose sum is a specified integer in an empty tree must be answered negatively. \r"], "Input": ["The input consists of a sequence of test cases in the form of integer/tree pairs. Each test case consists of an integer followed by one or more spaces followed by a binary tree formatted as an S-expression as described above. All binary tree S-expressions will be valid, but expressions may be spread over several lines and may contain spaces. There will be one or more test cases in an input file, and input is terminated by end-of-file. "], "OutPut": ["There should be one line of output for each test case (integer/tree pair) in the input file. For each pair I,T (I represents the integer, T represents the tree) the output is the string yes if there is a root-to-leaf path in T whose sum is I and no if there is no path in T whose sum is I. "], "SampleInput": ["22 (5(4(11(7()())(2()()))()) (8(13()())(4()(1()()))))\r\n20 (5(4(11(7()())(2()()))()) (8(13()())(4()(1()()))))\r\n10 (3 \r\n     (2 (4 () () )\r\n        (8 () () ) )\r\n     (1 (6 () () )\r\n        (4 () () ) ) )\r\n5 ()"], "SampleOutput": ["yes\r\nno\r\nyes\r\nno"], "Hint": [",UVA 112"], "Source": []},
{"Title": ["Network"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 23043"], "Accepted": [" 10018"], "Description": ["A Telephone Line Company (TLC) is establishing a new telephone cable network. They are connecting several places numbered by integers from 1 to N . No two places have the same number. The lines are bidirectional and always connect together two places and in each place the lines end in a telephone exchange. There is one telephone exchange in each place. From each place it is \r", "possible to reach through lines every other place, however it need not be a direct connection, it can go through several exchanges. From time to time the power supply fails at a place and then the exchange does not operate. The officials from TLC realized that in such a case it can happen that besides the fact that the place with the failure is unreachable, this can also cause that some other places cannot connect to each other. In such a case we will say the place (where the failure \r", "occured) is critical. Now the officials are trying to write a program for finding the number of all such critical places. Help them. "], "Input": ["The input file consists of several blocks of lines. Each block describes one network. In the first line of each block there is the number of places N < 100. Each of the next at most N lines contains the number of a place followed by the numbers of some places to which there is a direct line from this place. These at most N lines completely describe the network, i.e., each direct connection of two places in the network is contained at least in one row. All numbers in one line are separated \r", "by one space. Each block ends with a line containing just 0. The last block has only one line with N = 0; "], "OutPut": ["The output contains for each block except the last in the input file one line containing the number of critical places. "], "SampleInput": ["5\r\n5 1 2 3 4\r\n0\r\n6\r\n2 1 3\r\n5 4 6 2\r\n0\r\n0"], "SampleOutput": ["1\r\n2"], "Hint": ["You need to determine the end of one line.In order to make it's easy to determine,there are no extra blank before the end of each line."], "Source": ["Central Europe 1996"]},
{"Title": ["Number Game"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 4306"], "Accepted": [" 1777"], "Description": ["Christine and Matt are playing an exciting game they just invented: the Number Game. The rules of this game are as follows.\r", "The players take turns choosing integers greater than 1. First, Christine chooses a number, then Matt chooses a number, then Christine again, and so on. The following rules restrict how new numbers may be chosen by the two players:\r", "\r", "If a player cannot choose any new number according to these rules, then that player loses the game.\r", "Here is an example: Christine starts by choosing 4. This prevents Matt from choosing 4, 8, 12, etc.Let's assume that his move is 3. Now the numbers 3, 6, 9, etc. are excluded, too; furthermore, numbers like: 7 = 3+4;10 = 2*3+4;11 = 3+2*4;13 = 3*3+4;... are also not available. So, in fact, the only numbers left are 2 and 5. Christine now selects 2. Since 5=2+3 is now forbidden, she wins because there is no number left for Matt to choose.\r", "Your task is to write a program which will help play (and win!) the Number Game. Of course, there might be an infinite number of choices for a player, so it may not be easy to find the best move among these possibilities. But after playing for some time, the number of remaining choices becomes finite, and that is the point where your program can help. Given a game position (a list of numbers which are not yet forbidden), your program should output all winning moves.\r", "A winning move is a move by which the player who is about to move can force a win, no matter what the other player will do afterwards. More formally, a winning move can be defined as follows.\r"], "Input": ["The input consists of several test cases. Each test case is given by exactly one line describing one position.\r", "Each line will start with a number n (1 <= n <= 20), the number of integers which are still available. The remainder of this line contains the list of these numbers a1;...;an(2 <= ai <= 20).\r", "The positions described in this way will always be positions which can really occur in the actual Number Game. For example, if 3 is not in the list of allowed numbers, 6 is not in the list, either.\r", "At the end of the input, there will be a line containing only a zero (instead of n); this line should not be processed."], "OutPut": ["For each test case, your program should output \"Test case #m\", where m is the number of the test case (starting with 1). Follow this by either \"There's no winning move.\" if this is true for the position described in the input file, or \"The winning moves are: w1 w2 ... wk\" where the wi are all winning moves in this position, satisfying wi < wi+1 for 1 <= i < k. After this line, output a blank line."], "SampleInput": ["2 2 5\r\n2 2 3\r\n5 2 3 4 5 6\r\n0"], "SampleOutput": ["Test Case #1\r\nThe winning moves are: 2\r\n\r\nTest Case #2\r\nThere's no winning move.\r\n\r\nTest Case #3\r\nThe winning moves are: 4 5 6"], "Hint": [], "Source": []},
{"Title": ["Smith Numbers"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 16340"], "Accepted": [" 5425"], "Description": ["While skimming his phone directory in 1982, Albert Wilansky, a mathematician of Lehigh University,noticed that the telephone number of his brother-in-law H. Smith had the following peculiar property: The sum of the digits of that number was equal to the sum of the digits of the prime factors of that number. Got it? Smith's telephone number was 493-7775. This number can be written as the product of its prime factors in the following way:\r", "\r", "The sum of all digits of the telephone number is 4+9+3+7+7+7+5= 42,and the sum of the digits of its prime factors is equally 3+5+5+6+5+8+3+7=42. Wilansky was so amazed by his discovery that he named this kind of numbers after his brother-in-law: Smith numbers.\r", "As this observation is also true for every prime number, Wilansky decided later that a (simple and unsophisticated) prime number is not worth being a Smith number, so he excluded them from the definition.\r", "Wilansky published an article about Smith numbers in the Two Year College Mathematics Journal and was able to present a whole collection of different Smith numbers: For example, 9985 is a Smith number and so is 6036. However,Wilansky was not able to find a Smith number that was larger than the telephone number of his brother-in-law. It is your task to find Smith numbers that are larger than 4937775!"], "Input": ["The input file consists of a sequence of positive integers, one integer per line. Each integer will have at most 8 digits. The input is terminated by a line containing the number 0."], "OutPut": ["For every number n > 0 in the input, you are to compute the smallest Smith number which is larger than n,and print it on a line by itself. You can assume that such a number exists."], "SampleInput": ["4937774\r\n0"], "SampleOutput": ["4937775"], "Hint": [], "Source": []},
{"Title": ["Brackets Sequence"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 39984"], "Accepted": [" 11503"], "Description": ["Let us define a regular brackets sequence in the following way:\r", "\r", "1. Empty sequence is a regular sequence.\r", "2. If S is a regular sequence, then (S) and [S] are both regular sequences.\r", "3. If A and B are regular sequences, then AB is a regular sequence.\r", "\r", "For example, all of the following sequences of characters are regular brackets sequences:\r", "\r", "(), [], (()), ([]), ()[], ()[()]\r", "\r", "And all of the following character sequences are not:\r", "\r", "(, [, ), )(, ([)], ([(]\r", "\r", "Some sequence of characters '(', ')', '[', and ']' is given. You are to find the shortest possible regular brackets sequence, that contains the given character sequence as a subsequence. Here, a string a1 a2 ... an is called a subsequence of the string b1 b2 ... bm, if there exist such indices 1 = i1 < i2 < ... < in = m, that aj = bij for all 1 = j = n."], "Input": ["The input file contains at most 100 brackets (characters '(', ')', '[' and ']') that are situated on a single line without any other characters among them."], "OutPut": ["Write to the output file a single line that contains some regular brackets sequence that has the minimal possible length and contains the given sequence as a subsequence."], "SampleInput": ["([(]"], "SampleOutput": ["()[()]"], "Hint": [], "Source": []},
{"Title": ["Expanding Fractions"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3850"], "Accepted": [" 1475"], "Description": ["In this problem you are to print the decimal expansion of a quotient of two integers. As you well know, the decimal expansions of many integer quotients result in decimal expansions with repeating sequences of digits. You must identify these. You will print the decimal expansion of the integer quotient given, stopping just as the expansion terminates or just as the repeating pattern is to repeat itself for the first time. If there is a repeating pattern, you will say how many of the digits are in the repeating pattern. "], "Input": ["There will be multiple input instances, each instance consists of two positive integers on a line. The first integer represents the numerator of the fraction and the second represents the denominator. In this problem, the numerator will always be less than the denominator and the denominator will be less than 1000. Input terminates when numerator and denominator are both zero. "], "OutPut": ["For each input instance, the output should consist of the decimal expansion of the fraction, starting with the decimal point. If the expansion terminates, you should print the complete decimal expansion. If the expansion is infinite, you should print the decimal expansion up to, but not including the digit where the repeated pattern first repeats itself. \r", "\r", "For instance, 4/11 = .3636363636..., should be printed as .36. (Note that the shortest repeating pattern should be found. In the above example, 3636 and 363636, among others, are repeating patterns, but the shortest repeating pattern is 36.) \r", "\r", "Since some of these expansions may be quite long, multiple line expansions should each contain exactly 50 characters on each line (except the last line, which, of course, may be shorter) - that includes the beginning decimal point. \r", "\r", "On the line immediately following the last line of the decimal expansion there should be a line saying either ``This expansion terminates.\", or ``The last n digits repeat forever.\", where n is the number of digits in the repeating pattern. \r", "\r", "Helpful hint: The number of digits before the pattern is repeated will never be more than the value of the denominator. \r"], "SampleInput": ["3 7\r\n345 800\r\n112 990\r\n53 122\r\n0 0"], "SampleOutput": [".428571\r\nThe last 6 digits repeat forever.\r\n.43125\r\nThis expansion terminates.\r\n.113\r\nThe last 2 digits repeat forever.\r\n.4344262295081967213114754098360655737704918032786\r\n885245901639\r\nThe last 60 digits repeat forever."], "Hint": [], "Source": []},
{"Title": ["Cat and Mouse"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1201"], "Accepted": [" 377"], "Description": ["In a house with many rooms live a cat and a mouse. The cat and the mouse each have chosen one room as their ``home\". From their ``home\" they regularly walk through the house. A cat can go from room A to room B if and only if there is a cat door from room A to room B. Cat doors can only be used in one direction. Similarly a mouse can go from room A to room B if and only if there is a mouse door from room A to room B . Also mouse doors can be used in only one direction. Furthermore, cat doors cannot be used by a mouse, and mouse doors cannot be used by a cat. \r", "\r", "Given a map of the house you are asked to write a program that finds out \r", "\r", "1.if there exist walks for the cat and mouse where they meet each other in some room, and\r", "2.if the mouse can make a walk through at least two rooms, end in its ``home\" room again, and along the way cannot ever meet the cat. (Here, the mouse may not ever meet the cat, whatever the cat does.) \r", "\r", "For example, in the map, the cat can meet the mouse in rooms 1, 2, and 3. Also, the mouse can make a walk through two rooms without ever meeting the cat, viz., a round trip from room 5 to 4 and back. "], "Input": ["The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. \r", "\r", "The input consists of integers and defines the configuration of the house. The first line has three integers separated by blanks: the first integer defines the number of rooms, the second the initial room of the cat (the cat's ``home\"), and the third integer defines the initial room of the mouse (the mouse's ``home\"). Next there are zero or more lines, each with two positive integers separated by a blank. These lines are followed by a line with two -1's separated by a blank. The pairs of positive integers define the cat doors. The pair A B represents the presence of a cat door from room A to room B . Finally there are zero or more lines, each with two positive integers separated by a blank. These pairs of integers define the mouse doors. Here, the pair A B represents the presence of a mouse door from room A to room B . Also end with -1,-1.\r", "\r", "The number of rooms is at least one and at most 100. All rooms are numbered consecutively starting at 1. You may assume that all positive integers in the input are legal room numbers. \r"], "OutPut": ["For each test case, the output must follow the description below.\r", "\r", "The output consists of two characters separated by a blank and ended by a new-line character. The first character is Y if there exist walks for the cat and mouse where they meet each other in some room. Otherwise, it is N. The second character is Y if the mouse can make a walk through at least two rooms, end in its ``home\" room again, and along the way cannot ever meet the cat. Otherwise, it is N. "], "SampleInput": ["1\r\n\r\n5 2 4\r\n1 2\r\n2 1\r\n3 1\r\n4 3\r\n5 2\r\n-1 -1\r\n1 3\r\n2 5\r\n3 4\r\n4 1\r\n4 2\r\n4 5\r\n5 4\r\n-1 -1"], "SampleOutput": ["Y Y"], "Hint": [], "Source": []},
{"Title": ["Ships"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1070"], "Accepted": [" 144"], "Description": ["Probably everyone who ever attended school knows the game where two opposing players place a set of ships on a sheet of paper and try to eliminate each other's ships by guessing their location. \r", "\r", "In our version of the game, your opponent has distributed the following seven ship patterns over a rectangular grid of squares:\r", "\r", "Given that information, you are to decide whether you can determine all remaining 'x' squares with at most one miss, i.e. whether you could uncover the '.' squares without getting more than one 'o' square before you had all 'x' squares uncovered. This means you are allowed to hit a 'o' if then the solution becomes unique. \r"], "Input": ["The input file contains several game situations. Every test case starts with a line containing two integers h and w. These define width and height of the game rectangle, where 2 <= w, h <= 16. \r", "\r", "Each of the next h lines contains a string of w characters. Each of these characters is either `x', `o' or `.', depending on the state of the corresponding square. \r", "\r", "A blank line separates each game from the next. The input file ends with a game having w = 0 and h = 0. This game should not be processed."], "OutPut": ["For each test case you should first output a line containing the number of the game, followed by a line containing either `yes.' (if you can determine all `x' with at most one miss) or `no.' (if you cannot determine all `x' without at least two misses). \r", "\r", "Output a blank line after every game. "], "SampleInput": ["10 10\r\n.x..x.....\r\noooooxoooo\r\noxooxxx...\r\nxxoooooo..\r\nxoooxooo..\r\nooxxxxoo..\r\noooooxxoox\r\nooooooxoox\r\nooooooooxx\r\noooooooooo\r\n\r\n0 0"], "SampleOutput": ["Game #1\r\nyes."], "Hint": [], "Source": []},
{"Title": ["The New Villa"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1889"], "Accepted": [" 582"], "Description": ["Mr. Black recently bought a villa in the countryside. Only one thing bothers him: although there are light switches in most rooms, the lights they control are often in other rooms than the switches themselves. While his estate agent saw this as a feature, Mr. Black has come to believe that the electricians were a bit absent-minded (to put it mildly) when they connected the switches to the outlets. \r", "\r", "One night, Mr. Black came home late. While standing in the hallway, he noted that the lights in all other rooms were switched off. Unfortunately, Mr. Black was afraid of the dark, so he never dared to enter a room that had its lights out and would never switch off the lights of the room he was in. \r", "\r", "After some thought, Mr. Black was able to use the incorrectly wired light switches to his advantage. He managed to get to his bedroom and to switch off all lights except for the one in the bedroom. \r", "\r", "You are to write a program that, given a description of a villa, determines how to get from the hallway to the bedroom if only the hallway light is initially switched on. You may never enter a dark room, and after the last move, all lights except for the one in the bedroom must be switched off. If there are several paths to the bedroom, you have to find the one which uses the smallest number of steps, where \"move from one room to another\", \"switch on a light\" and \"switch off a light\" each count as one step. "], "Input": ["The input file contains several villa descriptions. Each villa starts with a line containing three integers r, d, and s. r is the number of rooms in the villa, which will be at most 10. d is the number of doors/connections between the rooms and s is the number of light switches in the villa. The rooms are numbered from 1 to r; room number 1 is the hallway, room number r is the bedroom. \r", "\r", "This line is followed by d lines containing two integers i and j each, specifying that room i is connected to room j by a door. Then follow s lines containing two integers k and l each, indicating that there is a light switch in room k that controls the light in room l. \r", "\r", "A blank line separates the villa description from the next one. The input file ends with a villa having r = d = s = 0, which should not be processed. "], "OutPut": ["For each villa, first output the number of the test case ('Villa #1', 'Villa #2', etc.) in a line of its own. \r", "\r", "If there is a solution to Mr. Black's problem, output the shortest possible sequence of steps that leads him to his bedroom and only leaves the bedroom light switched on. (Output only one shortest sequence if you find more than one.) Adhere to the output format shown in the sample below. \r", "\r", "If there is no solution, output a line containing the statement `The problem cannot be solved.' \r", "\r", "Output a blank line after each test case. "], "SampleInput": ["3 3 4\r\n1 2\r\n1 3\r\n3 2\r\n1 2\r\n1 3\r\n2 1\r\n3 2\r\n\r\n2 1 2\r\n2 1\r\n1 1\r\n1 2\r\n\r\n0 0 0"], "SampleOutput": ["Villa #1\r\nThe problem can be solved in 6 steps:\r\n- Switch on light in room 2.\r\n- Switch on light in room 3.\r\n- Move to room 2.\r\n- Switch off light in room 1.\r\n- Move to room 3.\r\n- Switch off light in room 2.\r\n\r\nVilla #2\r\nThe problem cannot be solved.\r\n"], "Hint": [], "Source": []},
{"Title": ["Pendulum"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 476"], "Accepted": [" 94"], "Description": ["Consider a pendulum hanging on a string from a hook on a wall. When pushed, this pendulum will swing back and forth. Now imagine other hooks on the wall, placed in the path of our pendulum's string. The pendulum will bend around them, possibly even loop around them. In general, it will follow a much more complex path than before. After some time, the pendulum's motion will repeat, the pendulum will follow a periodic orbit. What we would like you to do is to compute the distance travelled by the pendulum as it completes one cycle of the orbit. \r", "\r", "More formally, we place a cartesian coordinate system on the wall. The pendulum's string is affixed at the origin (0, 0). As usual, the x-axis points to the right and the y-axis points upwards. The string of the pendulum has a length of r. The pendulum is released at position (-r, 0) and therefore starts swinging to the right. Furthermore, there are n additional hooks distributed over the plane which may influence the path of the pendulum. \r", "\r", "In our ideal world, the following assumptions are true: \r", "\r", "Your program should simulate the movement of the pendulum and output the spatial length of the periodic orbit that it finally enters. As you may remember from physics: due to gravity, the pendulum will never reach a height greater than the one it started from! That is, it will never get above the x-axis. It will either reach its initial height again or circle endlessly around a hook in the wall. \r"], "Input": ["The input file contains several test cases. Each case begins with a line containing an integer n (the number of hooks, 1 <= n < 500) and a real r (the length of the pendulum's string). The following n lines each contain two integers specifying the x- and y-coordinate of the corresponding hook. \r", "\r", "The file ends with a case having r = 0, which should not be processed. "], "OutPut": ["For each case output a line containing the number of the case ('Pendulum #1', 'Pendulum #2', etc.). \r", "\r", "Then print a line that contains the distance which the pendulum travels for completing one cycle of its periodic orbit. Do not count the distance travelled to reach the starting point of the orbit. (Adhere to the format shown in the output sample.) The distance should be exact to two digits to the right of the decimal point. \r", "\r", "Output a blank line after each test case. "], "SampleInput": ["2 16.0\r\n3 -4\r\n-3 -4\r\n1 18.0\r\n5 -12\r\n0 0"], "SampleOutput": ["Pendulum #1\r\nLength of periodic orbit = 87.66\r\n\r\nPendulum #2\r\nLength of periodic orbit = 31.42"], "Hint": [], "Source": []},
{"Title": ["Domino Effect"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 13487"], "Accepted": [" 3362"], "Description": ["Did you know that you can use domino bones for other things besides playing Dominoes? Take a number of dominoes and build a row by standing them on end with only a small distance in between. If you do it right, you can tip the first domino and cause all others to fall down in succession (this is where the phrase ``domino effect'' comes from). \r", "\r", "While this is somewhat pointless with only a few dominoes, some people went to the opposite extreme in the early Eighties. Using millions of dominoes of different colors and materials to fill whole halls with elaborate patterns of falling dominoes, they created (short-lived) pieces of art. In these constructions, usually not only one but several rows of dominoes were falling at the same time. As you can imagine, timing is an essential factor here. \r", "\r", "It is now your task to write a program that, given such a system of rows formed by dominoes, computes when and where the last domino falls. The system consists of several ``key dominoes'' connected by rows of simple dominoes. When a key domino falls, all rows connected to the domino will also start falling (except for the ones that have already fallen). When the falling rows reach other key dominoes that have not fallen yet, these other key dominoes will fall as well and set off the rows connected to them. Domino rows may start collapsing at either end. It is even possible that a row is collapsing on both ends, in which case the last domino falling in that row is somewhere between its key dominoes. You can assume that rows fall at a uniform rate. "], "Input": ["The input file contains descriptions of several domino systems. The first line of each description contains two integers: the number n of key dominoes (1 <= n < 500) and the number m of rows between them. The key dominoes are numbered from 1 to n. There is at most one row between any pair of key dominoes and the domino graph is connected, i.e. there is at least one way to get from a domino to any other domino by following a series of domino rows. \r", "\r", "The following m lines each contain three integers a, b, and l, stating that there is a row between key dominoes a and b that takes l seconds to fall down from end to end. \r", "\r", "Each system is started by tipping over key domino number 1. \r", "\r", "The file ends with an empty system (with n = m = 0), which should not be processed. "], "OutPut": ["For each case output a line stating the number of the case ('System #1', 'System #2', etc.). Then output a line containing the time when the last domino falls, exact to one digit to the right of the decimal point, and the location of the last domino falling, which is either at a key domino or between two key dominoes(in this case, output the two numbers in ascending order). Adhere to the format shown in the output sample. The test data will ensure there is only one solution. Output a blank line after each system. "], "SampleInput": ["2 1\r\n1 2 27\r\n3 3\r\n1 2 5\r\n1 3 5\r\n2 3 5\r\n0 0"], "SampleOutput": ["System #1\r\nThe last domino falls after 27.0 seconds, at key domino 2.\r\n\r\nSystem #2\r\nThe last domino falls after 7.5 seconds, between key dominoes 2 and 3."], "Hint": [], "Source": []},
{"Title": ["Hexagon"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 489"], "Accepted": [" 213"], "Description": ["Consider a game board consisting of 19 hexagonal fields, as shown in the figure below. We can easily distinguish three main directions in the shape of the board: from top to bottom, from top-left to bottom-right, and from top-right to bottom-left. For each of these primary directions, the board can be viewed as a series of rows, consisting of 3, 4, 5, 4, and 3 fields, respectively. \r", "\r", "The game board has to be completely covered using a set of hexagonal pieces. Each piece carries three numbers, one for every primary board direction. Only three different numbers are used for each direction. Every possible combination of three numbers for all three directions is assigned to a piece, leading to a set of 27 unique pieces. (The board in the above figure is still in the process of being covered.) \r", "\r", "The score of a board is calculated as the sum of all 15 row scores (5 rows for each primary direction). The row scores are calculated as follows: if all pieces in a row carry the same number for the direction of the row, the row score is this number multiplied by the number of pieces in the row. Otherwise (the pieces carry different numbers in the row direction) the row score is zero. Note that the pieces may not be rotated. For example, the score of the leftmost row in the figure is 3 . 3 = 9, the score of the row to its right is 4 . 11 = 44. \r", "\r", "While in the real game the pieces are chosen randomly and the set of pieces is fixed, we are interested in the highest possible score for a given set of numbers for each direction. This means you have to choose those 19 pieces that result in the highest score. \r", "\r", "Input Specification\r", "The first line of the input file contains an integer n which indicates the number of test cases. Each test case consists of three lines containing three integers each. Each of these three line contains the numbers for a single primary direction. From these numbers the set of pieces is generated. "], "Input": ["The first line of the input file contains an integer n which indicates the number of test cases. Each test case consists of three lines containing three integers each. Each of these three line contains the numbers for a single primary direction. From these numbers the set of pieces is generated. "], "OutPut": ["For each test case output a line containing the number of the case ('Test #1', 'Test #2', etc.), followed by a line containing the highest possible score for the given numbers. Add a blank line after each test case. "], "SampleInput": ["1\r\n9 4 3\r\n8 5 2\r\n7 6 1"], "SampleOutput": ["Test #1\r\n308"], "Hint": ["The following clarification was added to the problem during the last minute announcements:\r", "To simplify the problem, you should only consider boards where each row has a score greater than zero, i.e. each piece in a row carries the same number."], "Source": ["Southwestern European Regional Contest 1996"]},
{"Title": ["Stars"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1103"], "Accepted": [" 194"], "Description": ["On a clear moon-less night, you can see millions of stars glimmering in the sky. Faced with this overwhelming number, the Greeks started nearly 2,000 years ago to bring some order to the chaos. They identified groups of stars, called constellations, and gave them names, mostly from the Greek mythology, that are still in use today. Examples are ``Ursa Minor'', ``Pisces'', ``Cancer'', and many others. \r", "\r", "Given a sketch of the constellation, it is not easy for the amateur to actually find the constellation in the sky. Moreover, simple constellations, such as ``Triangulum'' (triangle,) which consists of only three stars, may appear several times in the sky. Again, singling out the ``correct'' occurrence is not easy. \r", "\r", "Traditionally, maps were printed for just this purpose. But in this problem, we will see how the computer can help us find constellations in the sky. \r", "\r", "You will be given a star map; for simplicity this will be a collection of points in the plane, each having a certain brightness associated with it. Then, given a constellation, also as a set of points in the plane, you are to determine: \r", "\r", "An occurrence is a subset of stars from the map that forms a (possibly) arbitrarily rotated and/or scaled copy of the stars in the constellation. \r", "\r", "The brightness of an occurrence is the average brightness of the stars it consists of, i.e. the sum of individual brightnesses divided by the number of stars in the constellation. \r"], "Input": ["The input file contains the descriptions of several star maps. Each map starts with a line containing a single integer n, specifying the number of stars in the map (1 <= n < 1000). The following n lines contain three integers each, namely the x- and y-coordinates and the brightness of every star. The larger the value, the brighter the star shines. \r", "\r", "The next line contains a single integer m, the number of constellations to follow (1 <= m < 50). Each constellation description starts with a line containing an integer si, the number of stars in constellation i, and a string Ni, the name of the constellation. (Ni will consist of no more than 40 characters and contain no blanks.) The following si lines then contain the coordinates of the constellation, again as x/y-pairs. \r", "\r", "A blank line separates the star map from the next map. The input file ends with an empty map (having n = 0), which should not be processed. \r", "\r", "N.B.: Since all star coordinates are integer numbers, you can easily rule out any rotated or scaled constellation whose points do not fall on integer coordinates. "], "OutPut": ["For each star map first output the number of the map ('Map #1', 'Map #2', etc.) on a line of its own. \r", "\r", "For each constellation, in the same order as in the input, output first its name and how many times it occurs in the map on one line, as shown in the output sample. \r", "\r", "If there is at least one occurrence, output the position of the brightest occurrence by listing the positions of the stars that form the brightest occurrence. The star positions have to be printed in ascending x-order. Positions having the same x-coordinates must be sorted in ascending y-order. If there are several equally bright solutions, output only one of them. Adhere to the format shown in the sample output. \r", "\r", "Output a blank line before each constellation and a line of 5 dashes ('-----') after every star map. \r"], "SampleInput": ["6\r\n1 2 1\r\n2 1 4\r\n2 4 3\r\n3 2 1\r\n4 1 5\r\n4 3 2\r\n2\r\n3 Triangulum\r\n1 1\r\n3 1\r\n2 4\r\n4 Cancer\r\n1 3\r\n4 3\r\n6 1\r\n7 5\r\n\r\n0"], "SampleOutput": ["Map #1\r\n\r\nTriangulum occurs 2 time(s) in the map.\r\nBrightest occurrence: (1,2) (4,1) (4,3)\r\n\r\nCancer occurs 0 time(s) in the map.\r\n-----"], "Hint": [], "Source": []},
{"Title": ["Border"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 4270"], "Accepted": [" 2045"], "Description": ["You are to write a program that draws a border around a closed path into a bitmap, as displayed in the following figure: \r", "\r", "The path is closed and runs along the grid lines, i.e. between the squares of the grid. The path runs counter-clockwise, so if following the path is considered as going ``forward'', the border pixels are always to the \"right'' of the path. The bitmap always covers 32 by 32 squares and has its lower left corner at (0, 0). You can safely assume that the path never touches the bounding rectangle of the bitmap and never touches or crosses itself. Note that a bit gets set if it is on the outside of the area surrounded by the path and if at least one of its edges belongs to the path, but not if only one of its corners is in the path. (A look at the convex corners in the figure should clarify that statement.) \r"], "Input": ["The first line of the input file contains the number of test cases in the file. Each test case that follows consists of two lines. The first line of each case contains two integer numbers x and y specifying the starting point of the path. The second line contains a string of variable length. Every letter in the string symbolizes a move of length one along the grid. Only the letters 'W' (\"west\"), 'E' (\"east\"), 'N' (\"north\"), 'S' (\"south\"), and '.' (\"end of path\", no move) appear in the string. The end-of-path character ( '.') is immediately followed by the end of the line. "], "OutPut": ["For each test case, output a line with the number of the case ('Bitmap #1', 'Bitmap #2', etc.). For each row of the bitmap from top to bottom, print a line where you print a character for every bit in that row from left to right. Print an uppercase 'X' for set bits and a period '.' for unset bits. Output a blank line after each bitmap. "], "SampleInput": ["1\r\n2 1\r\nEENNWNENWWWSSSES."], "SampleOutput": ["Bitmap #1\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n.XXX............................\r\nX...X...........................\r\nX..X............................\r\nX...X...........................\r\n.X..X...........................\r\n..XX............................"], "Hint": [], "Source": []},
{"Title": ["Octal Fractions"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 8472"], "Accepted": [" 4526"], "Description": ["Fractions in octal (base 8) notation can be expressed exactly in decimal notation. For example, 0.75 in octal is 0.953125 (7/8 + 5/64) in decimal. All octal numbers of n digits to the right of the octal point can be expressed in no more than 3n decimal digits to the right of the decimal point.\r", "\r", "Write a program to convert octal numerals between 0 and 1, inclusive, into equivalent decimal numerals.  "], "Input": ["The input to your program will consist of octal numbers, one per line, to be converted. Each input number has the form 0.d1d2d3 ... dk, where the di are octal digits (0..7). There is no limit on k."], "OutPut": ["Your output will consist of a sequence of lines of the form\r", "\r", "\r", "\r", "where the left side is the input (in octal), and the right hand side the decimal (base 10) equivalent. There must be no trailing zeros, i.e. Dm is not equal to 0."], "SampleInput": ["0.75\r\n0.0001\r\n0.01234567"], "SampleOutput": ["0.75 [8] = 0.953125 [10]\r\n0.0001 [8] = 0.000244140625 [10]\r\n0.01234567 [8] = 0.020408093929290771484375 [10]"], "Hint": [], "Source": []},
{"Title": ["Alien Security"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3217"], "Accepted": [" 1188"], "Description": ["You are in charge of security at a top-secret government research facility. Recently your government has captured a live extra-terrestrial (ET) life form, and is hosting an open day for fellow researchers. Of course, not all the guests can be trusted, so they are assigned different security clearance levels. Only guests with a level 5 rating will be allowed into the lab where the extra-terrestrial is being held; other than that, everyone is free to roam throughout the rest of the facility. Each room in the facility is connected via one-way airlocks, so that you can pass through the door in only one direction.\r", "\r", "To protect your precious ET you will put in place enhanced security measures (in the form of armed guards) on the route leading to the room containing the ET, but not in the room itself ?the guards do not have sufficient clearance to enter the room containing the ET.\r", "\r", "The guards will check the identity and the security rating of all guests trying to pass through the room in which they are stationed, so you would like to place the guards where they will cause the minimum amount of irritation to the guests who have no intention of visiting the ET. The room where the guards must be placed thus satisfies the following two conditions:\r", "\r", "1. In order to get to the room containing the ET, the guests must pass through the room containing the guards;\r", "\r", "2. There is no other room with this property that is closer to the room containing the ET ?remember, the guards cannot be placed in the room containing the ET itself.\r", "\r", "The diagram below illustrates one possible map of your facility: \r", "\r", "Note that placing the guards in room 2 would satisfy the first condition, but room 3 is closer to the ET, so the guards must be placed in room 3."], "Input": ["All guests enter through room 0, the entrance to your facility. Your program accepts a sequence of lines containing integers. The first line consists of two integers: the number of rooms, and the room in which the ET is being held (out of his own free will, of course).\r", "\r", "The rest of the input is a sequence of lines consisting of only two integers, specifying where the airlock-doors are located. The first number on these lines specifies the source room, and the second the destination room. Remember: you can pass only from the source room to the destination room."], "OutPut": ["The output of your program consists only of a single line:\r", "\r", "Put guards in room N.\r", "\r", "where N is the room you've decided to place the guards."], "SampleInput": ["9 4\r\n0 2\r\n2 3\r\n3 4\r\n5 3\r\n5 4\r\n3 6\r\n6 5\r\n6 7\r\n6 8\r\n4 7\r\n0 1\r\n1 7\r\n7 0"], "SampleOutput": ["Put guards in room 3."], "Hint": [], "Source": []},
{"Title": ["Channel Allocation"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 22158"], "Accepted": [" 11115"], "Description": ["When a radio station is broadcasting over a very large area, repeaters are used to retransmit the signal so that every receiver has a strong signal. However, the channels used by each repeater must be carefully chosen so that nearby repeaters do not interfere with one another. This condition is satisfied if adjacent repeaters use different channels.\r", "\r", "Since the radio frequency spectrum is a precious resource, the number of channels required by a given network of repeaters should be minimised. You have to write a program that reads in a description of a repeater network and determines the minimum number of channels required."], "Input": ["The input consists of a number of maps of repeater networks. Each map begins with a line containing the number of repeaters. This is between 1 and 26, and the repeaters are referred to by consecutive upper-case letters of the alphabet starting with A. For example, ten repeaters would have the names A,B,C,...,I and J. A network with zero repeaters indicates the end of input.\r", "\r", "Following the number of repeaters is a list of adjacency relationships. Each line has the form:\r", "\r", "A:BCDH\r", "\r", "which indicates that the repeaters B, C, D and H are adjacent to the repeater A. The first line describes those adjacent to repeater A, the second those adjacent to B, and so on for all of the repeaters. If a repeater is not adjacent to any other, its line has the form\r", "\r", "A:\r", "\r", "The repeaters are listed in alphabetical order.\r", "\r", "Note that the adjacency is a symmetric relationship; if A is adjacent to B, then B is necessarily adjacent to A. Also, since the repeaters lie in a plane, the graph formed by connecting adjacent repeaters does not have any line segments that cross. \r"], "OutPut": ["For each map (except the final one with no repeaters), print a line containing the minumum number of channels needed so that no adjacent channels interfere. The sample output shows the format of this line. Take care that channels is in the singular form when only one channel is required."], "SampleInput": ["2\r\nA:\r\nB:\r\n4\r\nA:BC\r\nB:ACD\r\nC:ABD\r\nD:BC\r\n4\r\nA:BCD\r\nB:ACD\r\nC:ABD\r\nD:ABC\r\n0"], "SampleOutput": ["1 channel needed.\r\n3 channels needed.\r\n4 channels needed. "], "Hint": [], "Source": []},
{"Title": ["Frame Stacking"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 6374"], "Accepted": [" 2212"], "Description": ["Consider the following 5 picture frames placed on an 9 x 8 array.\r", "\r", "Now place them on top of one another starting with 1 at the bottom and ending up with 5 on top. If any part of a frame covers another it hides that part of the frame below.\r", "\r", "Viewing the stack of 5 frames we see the following.\r", "\r", "\r", "\r", "In what order are the frames stacked from bottom to top? The answer is EDABC.\r", "\r", "Your problem is to determine the order in which the frames are stacked from bottom to top given a picture of the stacked frames. Here are the rules:\r", "\r", "1. The width of the frame is always exactly 1 character and the sides are never shorter than 3 characters.\r", "\r", "2. It is possible to see at least one part of each of the four sides of a frame. A corner shows two sides.\r", "\r", "3. The frames will be lettered with capital letters, and no two frames will be assigned the same letter. "], "Input": ["Each input block contains the height, h (h<=30) on the first line and the width w (w<=30) on the second. A picture of the stacked frames is then given as h strings with w characters each.\r", "Your input may contain multiple blocks of the format described above, without any blank lines in between. All blocks in the input must be processed sequentially."], "OutPut": ["Write the solution to the standard output. Give the letters of the frames in the order they were stacked from bottom to top. If there are multiple possibilities for an ordering, list all such possibilities in alphabetical order, each one on a separate line. There will always be at least one legal ordering for each input block. List the output for all blocks in the input sequentially, without any blank lines (not even between blocks)."], "SampleInput": ["9\r\n8\r\n.CCC....\r\nECBCBB..\r\nDCBCDB..\r\nDCCC.B..\r\nD.B.ABAA\r\nD.BBBB.A\r\nDDDDAD.A\r\nE...AAAA\r\nEEEEEE.."], "SampleOutput": ["EDABC"], "Hint": [], "Source": []},
{"Title": ["Jack Straws"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 6845"], "Accepted": [" 3058"], "Description": ["In the game of Jack Straws, a number of plastic or wooden \"straws\" are dumped on the table and players try to remove them one-by-one without disturbing the other straws. Here, we are only concerned with if various pairs of straws are connected by a path of touching straws. You will be given a list of the endpoints for some straws (as if they were dumped on a large piece of graph paper) and then will be asked if various pairs of straws are connected. Note that touching is connecting, but also two straws can be connected indirectly via other connected straws. "], "Input": ["Input consist multiple case,each case consists of multiple lines. The first line will be an integer n (1 < n < 13) giving the number of straws on the table. Each of the next n lines contain 4 positive integers,x1,y1,x2 and y2, giving the coordinates, (x1,y1),(x2,y2) of the endpoints of a single straw. All coordinates will be less than 100. (Note that the straws will be of varying lengths.) The first straw entered will be known as straw #1, the second as straw #2, and so on. The remaining lines of the current case(except for the final line) will each contain two positive integers, a and b, both between 1 and n, inclusive. You are to determine if straw a can be connected to straw b. When a = 0 = b, the current case is terminated. \r", "\r", "When n=0,the input is terminated.\r", "\r", "There will be no illegal input and there are no zero-length straws. \r"], "OutPut": ["You should generate a line of output for each line containing a pair a and b, except the final line where a = 0 = b. The line should say simply \"CONNECTED\", if straw a is connected to straw b, or \"NOT CONNECTED\", if straw a is not connected to straw b. For our purposes, a straw is considered connected to itself. "], "SampleInput": ["7\r\n1 6 3 3 \r\n4 6 4 9 \r\n4 5 6 7 \r\n1 4 3 5 \r\n3 5 5 5 \r\n5 2 6 3 \r\n5 4 7 2 \r\n1 4 \r\n1 6 \r\n3 3 \r\n6 7 \r\n2 3 \r\n1 3 \r\n0 0\r\n\r\n2\r\n0 2 0 0\r\n0 0 0 1\r\n1 1\r\n2 2\r\n1 2\r\n0 0\r\n\r\n0"], "SampleOutput": ["CONNECTED \r\nNOT CONNECTED \r\nCONNECTED \r\nCONNECTED \r\nNOT CONNECTED \r\nCONNECTED\r\nCONNECTED\r\nCONNECTED\r\nCONNECTED"], "Hint": [], "Source": []},
{"Title": ["Simply Syntax"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 5941"], "Accepted": [" 2648"], "Description": ["In the land of Hedonia the official language is Hedonian. A Hedonian professor had noticed that many of her students still did not master the syntax of Hedonian well. Tired of correcting the many syntactical mistakes, she decided to challenge the students and asked them to write a program that could check the syntactical correctness of any sentence they wrote. Similar to the nature of Hedonians, the syntax of Hedonian is also pleasantly simple. Here are the rules: \r", "\r", "\r", "0.The only characters in the language are the characters p through z and N, C, D, E, and I. \r", "\r", "1.Every character from p through z is a correct sentence. \r", "\r", "2.If s is a correct sentence, then so is Ns. \r", "\r", "3.If s and t are correct sentences, then so are Cst, Dst, Est and Ist. \r", "\r", "4.Rules 0. to 3. are the only rules to determine the syntactical correctness of a sentence. \r", "\r", "You are asked to write a program that checks if sentences satisfy the syntax rules given in Rule 0. - Rule 4. "], "Input": ["The input consists of a number of sentences consisting only of characters p through z and N, C, D, E, and I. Each sentence is ended by a new-line character. The collection of sentences is terminated by the end-of-file character. If necessary, you may assume that each sentence has at most 256 characters and at least 1 character. "], "OutPut": ["The output consists of the answers YES for each well-formed sentence and NO for each not-well-formed sentence. The answers are given in the same order as the sentences. Each answer is followed by a new-line character, and the list of answers is followed by an end-of-file character. "], "SampleInput": ["Cp\r\nIsz\r\nNIsz\r\nCqpq"], "SampleOutput": ["NO\r\nYES\r\nYES\r\nNO"], "Hint": [], "Source": []},
{"Title": ["Stockbroker Grapevine"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 44900"], "Accepted": [" 25199"], "Description": ["Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way.\r", "\r", "Unfortunately for you, stockbrokers only trust information coming from their \"Trusted sources\" This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information."], "Input": ["Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts (n), followed by n pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a '1' means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules.\r", "\r", "Each person is numbered 1 through to the number of stockbrokers. The time taken to pass the message on will be between 1 and 10 minutes (inclusive), and the number of contacts will range between 0 and one less than the number of stockbrokers. The number of stockbrokers will range from 1 to 100. The input is terminated by a set of stockbrokers containing 0 (zero) people.\r", "\r"], "OutPut": ["For each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes.\r", "It is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message \"disjoint\". Note that the time taken to pass the message from person A to person B is not necessarily the same as the time taken to pass it from B to A, if such transmission is possible at all. "], "SampleInput": ["3\r\n2 2 4 3 5\r\n2 1 2 3 6\r\n2 1 2 2 2\r\n5\r\n3 4 4 2 8 5 3\r\n1 5 8\r\n4 1 6 4 10 2 7 5 2\r\n0\r\n2 2 5 1 5\r\n0"], "SampleOutput": ["3 2\r\n3 10"], "Hint": [], "Source": []},
{"Title": ["Oh, Those Achin' Feet"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 557"], "Accepted": [" 152"], "Description": ["In recent days, a number of people have been injured after being pushed off the sidewalks due to overcrowding. City Hall is interested in figuring out how much pedestrian traffic its sidewalks receive every day. The results of this study will be used to determine whether the city needs to fund more sidewalks. The city has surveyed various buildings in several blocks to determine the traffic patterns they generate. Your job is to take this survey data and convert it into sidewalk utilization information. \r", "\r", "Your program will read in the size of the map and a map of several city blocks. Buildings, streets, and building entrance/exits will be marked on the map. You will also be given a list of pedestrian load between several pairs of exits and entrances. Your program will determine the paths used by pedestrians between each source and destination, add up the total pedestrian load from all paths using each street, and output a table of the total pedestrian load on each square. \r", "\r", "Notes: \r"], "Input": ["Line 1: X Y \r", "X is the number of columns in the map, Y is the number of rows. Each is a positive integer less than 20. \r", "\r", "Line 2-(Y+1): \r", "Each line contains exactly X symbols indicating the contents of that square on the map. The symbols are: \r", "X: building, non-entrance/exit \r", ".: (period) street \r", "{A-O}: letter indicating exit/entrance. Each letter may occur at most once. \r", "\r", "Lines (Y+2)-?: \r", "Each line indicates a pedestrian route and specifies a source, destination, and pedestrian load. Source and destination will each be a letter {A-O} with no spaces in between. The load factor will be a nonnegative integer, separated from the destination by whitespace. Source and destination will never be equal. At most 25 routes will be given. There will be a valid path in the map for each requested route. \r", "\r", "The file will terminate with the line: \r", "XX 0 "], "OutPut": ["The output consists of Y lines, each with X space-separated fields indicating the load factor. Each load factor is printed to two decimal places with 4 spaces for integer digits (C 7.2 format). "], "SampleInput": ["4 4 \r\n.... \r\nA.X. \r\nXXX. \r\nB... \r\nAB 2 \r\nBA 1 \r\nXX 0 "], "SampleOutput": ["   1.50   3.00   3.00   3.00 \r\n   0.00   1.50   0.00   3.00 \r\n   0.00   0.00   0.00   3.00 \r\n   0.00   3.00   3.00   3.00 "], "Hint": [], "Source": []},
{"Title": ["For the Porsche"], "TimeLimit": [" 5000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 526"], "Accepted": [" 157"], "Description": ["The Cash Cow Consulting Company is challenging the Vice Presidents to increase the profitability of their departments. In an effort to provide proper incentive, the Vice President whose department has the highest Profitability Index (PI) will win a brand new Porsche. The contest rules are as follows: \r", "\r", "\r", "Mike Miser is still driving his high school moped and has determined this is his chance to upgrade. He has instructed the engineering department to determine what it will cost for each feature to be developed. He then instructed the sales force to determine what features each customer requires, and what sales that will generate. (To make a sale to a customer all features required must be provided). \r", "\r", "Mike will then determine which feature combination his division should complete to maximize his chances of winning the contest. \r", "\r", "Notes: \r", "\r", "1. Because of the type of product the Cash Cow Consulting Company creates, the production costs are negligible, and do not need to be considered. Only the development costs should be considered. \r", "2. The tie breakers listed will result in the selection of exactly one feature set. \r", "3. At least one feature set will satisfy the requirements. \r", "4. The Profitability Index should be rounded to three decimal places. The values 3.4566 and 3.4574 will be considered equal.\r"], "Input": ["All input will be positive integers. \r", "\r", "The first line of input will indicate the number of data sets. \r", "\r", "The first line of each data set will contain 4 integers separated by white-space. In order they are the minimum cost, maximum cost, number of potential features (N) and number of potential customers (M). N and M will be no larger than 20. \r", "\r", "The next N lines (one for each feature) indicate the cost of each feature. \r", "\r", "The next M lines will contain the following (one line for each customer): \r", "Number of required features Feature number (for each required feature) Total Sales for that customer. \r", "For instance, if a given customer wanted 3 features, number 1,2 and 5 and would provide sales of 50, the line would read: \"3 1 2 5 50\"\r", "\r", "The next data set, if more remain, will begin on the next line. "], "OutPut": ["The first line of output for each data set should indicate which Feature Set is being considered. These should print \"Feature Set N\" where N is the feature set number, counting from 1. \r", "\r", "The next line of output for each data set should indicate the profitability index to 3 decimal places. \r", "\r", "The next line of output for each data set should indicate the sales dollars \r", "\r", "The next line of output for each data set should indicate the cost \r", "\r", "The next line of output for each data set should indicate which features are implemented. \r", "The first feature is feature number 1. They must be listed in order, white-space separated. \r", "\r", "The final line of output for each data set should indicate the customers who were satisfied. The first customer is customer #1. They must be listed in order, white-space separated. \r", "\r", "No extra output should appear. "], "SampleInput": ["1 \r\n100 2000 7 6 \r\n250 \r\n350 \r\n400 \r\n250 \r\n250 \r\n250 \r\n500 \r\n4 1 4 5 6 4000 \r\n4 1 4 5 6 500 \r\n4 1 4 5 6 60 \r\n3 1 4 5 7 \r\n4 1 2 3 5 5 \r\n4 1 2 3 7 6 "], "SampleOutput": ["Feature Set 1 \r\n4.567 \r\n4567 \r\n1000 \r\n1 4 5 6 \r\n1 2 3 4"], "Hint": [], "Source": []},
{"Title": ["FDNY to the Rescue!"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3581"], "Accepted": [" 1129"], "Description": ["The Fire Department of New York (FDNY) has always been proud of their response time to fires in New York City, but they want to make their response time even better. To help them with their response time, they want to make sure that the dispatchers know the closest firehouse to any address in the city. You have been hired to write this software and are entrusted with maintaining the proud tradition of FDNY. Conceptually, the software will be given the address of the fire, the locations of the firehouses, street intersections, and the time it takes to cover the distance between each intersection. It will then use this information to calculate how long it takes to reach an address from each firehouse. \r", "\r", "Given a specific fire location in the city, the software will calculate the time taken from all the fire stations located in the city to reach the fire location. The list of fire stations will be sorted from shortest time to longest time. The dispatcher can then pick the closest firestation with available firefighters and equipment to dispatch to the fire. "], "Input": ["Line 1: \r", "# of intersections in the city, a single integer (henceforth referred to as N) N<20 \r", "\r", "Lines 2 to N+1: \r", "A table (square matrix of integer values separated by one or more spaces) representing the time taken in minutes between every pair of intersections in the city. In the sample input shown below the value \"3\" on the 1st row and the 2nd column represents the time taken from intersection #1 to reach intersection #2. \r", "\r", "Similarly the value \"9\" on the 4th row and the 2nd column represents the time taken from intersection #4 to reach intersection #2. \r", "\r", "A value of -1 for time means that it is not possible to go directly from the origin intersection (row #) to the destination intersection (column #). All other values in the table are non-negative. \r", "\r", "Line N+2: \r", "An integer value n (<= N) indicating the intersection closest to the fire location followed by one or more integer values for the intersections closest to the fire stations (all on one line, separated by one or more spaces) will follow the input matrix. \r", "\r", "Notes on input format: \r", "\r", "1. The rows and columns are numbered from 1 to N. \r", "2. All input values are integers \r", "3. All fire locations are guaranteed reachable from all firehouses. \r", "4. All distance calculations are made from the intersection closest to each firehouse to the intersection closest to the fire. \r"], "OutPut": ["Line 1: \r", "A label line with the headings for each column, exactly as shown in the example. \r", "\r", "Line 2 onwards (one line for each fire station): \r", "A sorted list (based on time) showing the fire station (origin), the destination site, time taken and a complete shortest path of nodes from the originating fire station to the fire location. \r", "\r", "Notes on output format: \r", "1. Columns are tab separated. \r", "2. If two or more firehouses are tied in time they can be printed in any order. \r", "3. If more than one path exists that has the same minimal time for a given location & firehouse, either one can be printed on the output. \r", "4. If the fire location and the fire station locations happen to be the same intersection, the output will indicate that the origin and destination have the same intersection number, the time will be \"0\" and the nodes in the shortest path will show just one number, the fire location. \r", "Next is the picture for the sample input data.\r"], "SampleInput": ["6 \r\n0  3  4 -1 -1 -1 \r\n-1 0  4  5 -1 -1 \r\n2  3  0 -1 -1  2 \r\n8  9  5  0  1 -1 \r\n7  2  1 -1  0 -1 \r\n5 -1  4  5  4  0 \r\n2  4  5  6 \r\nIn the above input the last line indicates that \"2\" is the location of the fire and \"4\", \"5\" and \"6\" are the intersections where fire stations are located. "], "SampleOutput": ["Org\tDest\tTime\tPath\r\n5\t2\t2\t5\t2\r\n4\t2\t3\t4\t5\t2\r\n6\t2\t6\t6\t5\t2"], "Hint": [], "Source": []},
{"Title": ["Algernon's Noxious Emissions"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 524"], "Accepted": [" 172"], "Description": ["One of the greatest alchemists of the lower Middle Renaissance, Algernon da Vinci (one of Leonardo's lesserknown cousins), had the foresight to construct his chemical works directly over a fast-running stream. Through a series of clever pipes and sluices, he routed portions of the stream past each of the tables where his alchemists prepared their secret brews, allowing them to dispose of their chemical byproducts into the waters flowing by the table. \r", "\r", "As Algernon's business grew, he even added additional floors to his factory, with water lifted to the higher floors by treadmill-powered pumps (much to the dismay of the apprentices who found themselves assigned to pump duty). The pipework for the entire disposal system became quite complex. It was even rumored by some that the pipes actually circled back in some places, so that a particularly odorous compound flushed away from one table might return to that very same spot a few minutes later. \r", "\r", "All was not well, however. Algernon's factory suffered from a series of mishaps, minor explosions, gas clouds, etc. It became obvious that chemicals dumped at one table might react violently with other chemicals dumped from another table downstream. Algernon realized that he needed to trace the possible chemical flows through his factory. \r", "\r", "Write a program to aid Algernon in this task. To preserve the secrecy of the chemical processes that are Algernon's stock in trade, all chemicals will be identified by a single upper-case letter. All tables are identified by positive numbers in the range 1...N, where N is the number of tables. \r"], "Input": ["Line 1: \r", "# of work tables, integer (henceforth referred to as N). N < 50 \r", "\r", "Lines 2...N+1 \r", "For each table: \r", "?a list of chemicals dumped into the stream at that table, followed by \r", "?a list of chemicals that, if they appeared at that table, would be harmlessly neutralized by the reactions at that table, allowing no further trace of that chemical to flow downstream (we will assume that the rate of work at each table can be adjusted as necessary to guarantee total neutralization of whatever amount of these chemicals arrive from upstream). \r", "\r", "Each of these lists is given as a series of upper-case alphabetic characters. The only exception is that a special list, consisting of a single '.' character, will be used to denote an empty list. The two lists are separated from one other by one or more blanks. The same chemical will never appear in both lists. \r", "\r", "Lines N+2...? \r", "These lines provide a description of the pipeworks. Each line contains a pair of integers in the range 1...N, separated by one or more blanks: \r", "I J \r", "meaning that the table number I is upstream of table number J--anything dumped into the stream at table I or that arrives in the stream at table I and is not neutralized can then be counted on to arrive at table J. \r", "\r", "No (I,J) pair will be listed more than once, but the pairs may occur in any order. I and J will never be the same number. \r", "\r", "The end of input is signaled by a pair of zeros: \r", "0 0 \r", "\r", "Note that if a table only receives water directly from the stream entering the building, that table will never occur in the second position of a pair. Similarly, any table that discharges only into the stream leaving the building will never occur in the first position of a pair. \r"], "OutPut": ["There will be N lines of output, one for each table, in the same order as they appeared in the program input. Each line will contain the list of chemicals that can be expected at that table's output. This list will be printed as a (possibly empty) list of upper-case alphabetic characters between two colons (:). No empty spaces should be printed on the line. The characters in the list should be sorted in alphabetic order. \r", "\r", "This is the picture for the sample input date:\r"], "SampleInput": ["4 \r\nAB C \r\nC BDA \r\nBCD . \r\n. A \r\n1 2 \r\n2 4 \r\n3 1 \r\n1 3 \r\n3 4 \r\n0 0 "], "SampleOutput": [":ABD: \r\n:C: \r\n:ABCD: \r\n:BCD:"], "Hint": [], "Source": []},
{"Title": ["A New Growth Industry"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2864"], "Accepted": [" 1351"], "Description": ["A biologist experimenting with DNA modification of bacteria has found a way to make bacterial colonies sensitive to the surrounding population density. By changing the DNA, he is able to \"program\"the bacteria to respond to the varying densities in their immediate neighborhood. \r", "\r", "The culture dish is a square, divided into 400 smaller squares (20x20). Population in each small square is measured on a four point scale (from 0 to 3). The DNA information is represented as an array D, indexed from 0 to 15, of integer values and is interpreted as follows: \r", "\r", "In any given culture dish square, let K be the sum of that square's density and the densities of the four squares immediately to the left, right, above and below that square (squares outside the dish are considered to have density 0). Then, by the next day, that dish square's density will change by D[K] (which may be a positive, negative, or zero value). The total density cannot, however, exceed 3 nor drop below 0. \r", "\r", "Now, clearly, some DNA programs cause all the bacteria to die off (e.g., [-3, -3, ..., -3]). Others result in immediate population explosions (e.g., [3,3,3, ..., 3]), and others are just plain boring (e.g., [0, 0,...,0]). The biologist is interested in how some of the less obvious DNA programs might behave. \r", "\r", "Write a program to simulate the culture growth, reading in the number of days to be simulated, the DNA rules, and the initial population densities of the dish. "], "Input": ["Input to this program consists of three parts: \r", "\r", "1. The first line will contain a single integer denoting the number of days to be simulated. \r", "\r", "2. The second line will contain the DNA rule D as 16 integer values, ordered from D[0] to D[15], separated from one another by one or more blanks. Each integer will be in the range -3...3, inclusive. \r", "\r", "3. The remaining twenty lines of input will describe the initial population density in the culture dish. Each line describes one row of squares in the culture dish, and will contain 20 integers in the range 0?, separated from one another by 1 or more blanks"], "OutPut": ["The program will produce exactly 20 lines of output, describing the population densities in the culture dish at the end of the simulation. Each line represents a row of squares in the culture dish, and will consist of 20 characters, plus the usual end-of-line terminator. \r", "\r", "Each character will represent the population density at a single dish square, as follows: \r", "\r", "No other characters may appear in the output. "], "SampleInput": ["2 \r\n0 1 1 1 2 1 0 -1 -1 -1 -2 -2 -3 -3 -3 -3 \r\n3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "], "SampleOutput": ["##!................. \r\n#!.................. \r\n!................... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n.........!.......... \r\n........!#!......... \r\n.......!#X#!........ \r\n........!#!......... \r\n.........!.......... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n.................... \r\n...................."], "Hint": [], "Source": []},
{"Title": ["Start Up the Startup"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2456"], "Accepted": [" 603"], "Description": ["Clearly the economy is bound to pick up again soon. As a forward-thinking Internet entrepreneur, you think that the 'Net will need a new search engine to serve all the people buying new computers. Because you're frustrated with the poor results most search engines produce, your search engine will be better. \r", "\r", "You've come up with what you believe is an innovative approach to document matching. By giving weight to the number of times a term appears in both the search string and in the document being checked, you believe you can produce a more accurate search result. \r", "\r", "Your program will be given a search string, followed by a set of documents. You will calculate the score for each document and print it to output in the order the document appears in the input. To calculate the score for a document you must first calculate the term score for each term appearing in the search string. A term score is the number of times a term occurs in the search string multiplied by the number of times it occurs in the document. The document score is the sum of the square roots of each term score. \r"], "Input": ["The input consists of a set of documents separated by single lines containing only ten dashes, \"---------\" No line will be longer than 250 characters. No document will be longer than 100 lines. The first document is the search string. The input terminates with two lines of ten dashes in a row. \r", "\r", "The input documents will use the full ASCII character set. You must parse each document into a set of terms. \r", "\r", "Terms are separated by whitespace in the input document. Comparisons between terms are case-insensitive. Punctuation is removed from terms prior to comparisons, e.g. \"don't\" becomes \"dont\" The resulting terms should contain only the characters {[a-z],[0-9]}. A term in the input consisting only of punctuation should be ignored. You may assume the search string and each document will have at least one valid term. "], "OutPut": ["The output is a series of scores, one per line, printed to two decimal places. The scores are printed in the order the documents occur in the input. No other characters may appear in the output. "], "SampleInput": ["fee fi fo fum \r\n---------- \r\nfee, fi, fo! fum!! \r\n---------- \r\nfee fee fi, me me me \r\n---------- \r\n---------- "], "SampleOutput": ["4.00\r\n2.41"], "Hint": [], "Source": []},
{"Title": ["Lining Up"], "TimeLimit": [" 2000MS"], "MemoryLimit": [" 32768K"], "TotalSubmissions": [" 27578"], "Accepted": [" 8628"], "Description": ["\"How am I ever going to solve this problem?\" said the pilot. \r", "\r", "Indeed, the pilot was not facing an easy task. She had to drop packages at specific points scattered in a dangerous area. Furthermore, the pilot could only fly over the area once in a straight line, and she had to fly over as many points as possible. All points were given by means of integer coordinates in a two-dimensional space. The pilot wanted to know the largest number of points from the given set that all lie on one line. Can you write a program that calculates this number? \r", "\r", "\r", "Your program has to be efficient! \r"], "Input": ["Input consist several case,First line of the each case is an integer N ( 1 < N < 700 ),then follow N pairs of integers. Each pair of integers is separated by one blank and ended by a new-line character. The input ended by N=0."], "OutPut": ["output one integer for each input case ,representing the largest number of points that all lie on one line. "], "SampleInput": ["5\r\n1 1\r\n2 2\r\n3 3\r\n9 10\r\n10 11\r\n0"], "SampleOutput": ["3"], "Hint": [], "Source": []},
{"Title": ["Pairs of Integers"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 4342"], "Accepted": [" 1128"], "Description": ["You are to find all pairs of integers such that their sum is equal to the given integer number N and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit."], "Input": ["The input file consists of a single integer N (10 <= N <= 10^9)."], "OutPut": ["On the first line of the output file write the total number of different pairs of integers that satisfy the problem statement. On the following lines write all those pairs. Write one pair on a line in ascending order of the first integer in the pair. Each pair must be written in the following format:\r", "\r", "X + Y = N\r", "\r", "Here X, Y, and N, must be replaced with the corresponding integer numbers. There should be exactly one space on both sides of '+' and '=' characters."], "SampleInput": ["302"], "SampleOutput": ["5\r\n251 + 51 = 302\r\n275 + 27 = 302\r\n276 + 26 = 302\r\n281 + 21 = 302\r\n301 + 01 = 302"], "Hint": [], "Source": []},
{"Title": ["Library"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1055"], "Accepted": [" 370"], "Description": ["Castaway Robinson Crusoe is living alone on a remote island. One day a ship carrying a royal library has wrecked nearby. Usually Robinson brings any useful stuff from the shipwreck to his island, and this time he has brought a big chest with books.\r", "\r", "Robinson has decided to build a bookcase for these books to create his own library. He cut a rectangular niche in the rock for that purpose, hammered in wooden pegs, and placed wooden planks on every pair of pegs that have the same height, so that all planks are situated horizontally and suit to act as shelves.\r", "\r", "Unfortunately, Robinson has discovered that one especially old and big tome does not fit in his bookcase. He measured the height and width of this tome and has decided to redesign his bookcase in such a way, as to completely fit the tome on one of the shelves, taking into account locations of other shelves and the dimensions of the niche. With each shelf in the bookcase, one of the following operations should be made:\r", "\r", "1. Leave the shelf on its original place.\r", "\r", "2. Move the shelf to the left or to the right.\r", "\r", "3. Shorten the shelf by cutting off a part of the plank and optionally move it to the left or to the right.\r", "\r", "4. Move one of the pegs to a different place at the same height and move the shelf to the left or to the right.\r", "\r", "5. Shorten the shelf by cutting off a part of the plank, move one of the pegs to a different place at the same height, and optionally move the shortened shelf to the left or to the right.\r", "\r", "6. Remove the shelf from the bookcase along with both supporting pegs.\r", "\r", "We say that the shelf is properly supported by its pegs, if exactly two distinct pegs support the shelf and the center of the shelf is between its pegs or coincides with one of the pegs. The original design of Robinson's library has all the shelves properly supported by their pegs and lengths of all shelves are integer number of inches. The Robinson may only cut an integer number of inches from the planks, because he has no tools for more precise measurements. All remaining shelves after the redesign must be properly supported by their pegs.\r", "\r", "You are to find the way to redesign Robinson's library to fit the special old tome without changing original design too much. You have to minimize the number of pegs that are to be removed from their original places during the redesign (operations 4 and 5 remove one peg, and operation 6 removes two pegs). If there are different ways to solve the problem, then you are to find the one that minimizes the total length of planks that are to be cut off (operations 3 and 5 involve cutting something from the planks, and operation 6 counts as if cutting off the whole plank). Width of planks and diameter of pegs shall be considered zero.\r", "\r", "The tome may not be rotated. The tome should completely (to all its width) stand on one of the shelves and may only touch other shelves, their pegs or niche's edge.\r"], "Input": ["The first line of the input file contains four integer numbers XN, YN, XT, and YT, separated by spaces. They are, correspondingly, width and height of the niche, and width and height of the old tome in inches (1 <= XN, YN, XT, YT <= 1000).\r", "\r", "The second line of the input file contains a single integer number N (1 <= N <= 100) that represents the number of the shelves. Then N lines follow. Each line represents a single shelf along with its two supporting pegs, and contains five integer numbers yi, xi, li, x1i, x2i, separated by spaces, where:\r", "\r", "?yi (0 < yi < YN) - the height of the ith shelf above the bottom of the niche in inches.\r", "?xi (0 <= xi < XN) - the distance between the left end of the ith shelf and the left edge of the niche in inches.\r", "?li (0 < li <= XN - xi) - the length of the ith shelf in inches.\r", "?x1i (0 <= x1i <= li/2) - the distance between the left end of the ith shelf and its leftmost supporting peg in inches.\r", "?x2i (li/2 <= x2i <= li; x1i < x2i) - the distance between the left end of the ith shelf and its rightmost supporting peg in inches.\r", "\r", "All shelves are situated on different heights and are properly supported by their pegs. The problem is guaranteed to have a solution for the input data.\r"], "OutPut": ["The output file shall contain two integer numbers separated by a space. The first one is the minimal number of pegs that are to be removed by Robinson from their original locations to place the tome. The second one is the minimal total length of planks in inches that are to be cut off during the redesign that removes the least number of pegs."], "SampleInput": ["11 8 4 6\r\n4\r\n1 1 7 1 4\r\n4 3 7 1 6\r\n7 2 6 3 4\r\n2 0 3 0 3"], "SampleOutput": ["1 3"], "Hint": [], "Source": []},
{"Title": ["Statistical Trouble"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 411"], "Accepted": [" 99"], "Description": ["Your team was hired by the international corporation ACM (Analytical Calculation Maxims). Every year ACM creates and conducts various surveys. Surveys themselves are simple forms with a list of questions and a list of possible answers for every question. Surveys are distributed around the globe, where field agents question the target group of people. All the answers are gathered in the ICPC (International Computation and Processing Center), where teams of well-paid analysts mine raw data in search for relevant correlations. The raw data for each individual survey consists of lots of lines of answers. Each line corresponds to every questioned person and for every question lists answers that the person has made on that particular survey.\r", "\r", "The first step of analysis that your team was hired to automate is to create cross tables that correlate answers on interesting pairs of questions. In its most simple way, given a pair of questions, cross table has a row for every possible answer on the first question, and has a column for every possible answer on the second question. Each cell of the cross table contains a number of lines in the raw data that has both answers for the corresponding questions at the same time.\r", "\r", "However, your task is complicated by the fact that you are to compute and output not only simple cross table values, but also total values for every row and column in the cross table (that is the sum of values in the corresponding row and column) that are placed in an additional last column and last row, as well as a percentage distributions for every row and column. Percentage distribution for a row is an additional number in every cell in that row that shows percent ratio of the value in that cell to the total value for that row, unless the total value is zero (in that case percentage distribution for this row is not defined). The same applies to the percentage distributions of columns. Thus, the cross table in your output will have at most three values in every cell (the value itself, row-wise percent, and column-wise percent). Please note, that percentage distributions also apply to totals. For example, in the total column for every row the row-wise percent will be always 100%, unless the total value for the row is zero (in that case row-wise percents are not defined), and column -wise percent shows percents ratio of the total value for this row to the total number of lines in the raw data (which is the value that can be found in the last column of the last row).\r", "\r", "Percents are rounded to integers on output. Percent that has a non-zero fractional part is rounded to either the smallest integer number greater than the resulting percent, or the largest integer number smaller than the resulting percent, in such a way, that the sums of all corresponding row-wise percents by row (without row totals) or column -wise percents by column (without column totals) are equal to 100% unless they are undefined. There are various rounding algorithms that produce results satisfying the above constraints. You are free to use any rounding algorithm as long as the above constraints are satisfied."], "Input": ["The input consists of 3 sections: survey description, survey results, and cross table descriptions.\r", "\r", "The first line of the input contains the name of the survey, which is at most 100 characters long. Subsequent lines describe all the questions in the survey. On the first line of every question there is a 3-character question code (capital letters and digits only) followed by a space, and followed by the question name, which is at most 80 characters long. Each subsequent line for a question describes one possible answer on the question and starts with a space, followed by a single-character code for the answer (capital letter, digit, or character '.', '*', or '@'), followed by a space and followed by an answer description, which is at most 40 characters long. The list of questions is terminated by the line with a single character '#'. All answer codes are unique within the question, and all question codes are unique within the input file. There are at least 2 and at most 10 possible answers per question and at least 2 and at most 100 questions.\r", "\r", "Next lines in the input file describe survey results. Every line contains a character per question (in the order they appear in the input file) that gives the answer code for the corresponding question. The characters follow one another without any delimiters. This section is terminated by the line with a single character '#'. There is at least one line with answers in the section and at most 10000 answers in total (the number of lines times the number of questions).\r", "\r", "Next lines in the input  describe cross tables that are to be created. Each cross table description occupies one line. That line contains the code for the first question, followed by a space, followed by the different code for the second question, followed by a space, and followed by the cross table name, which is at most 100 characters long. This section is terminated by the line with a single character '#'. There are at most 100 cross table descriptions in the input file.\r", "\r", "The input has no trailing spaces on any line. All names do not start or end with a space, but may contain spaces.\r"], "OutPut": ["Write to the output  a cross table for every cross table description in the input file in the order they appear in the input file. On the first line of the cross table write the survey name, followed by a space, followed by a '-' (dash) character, followed by a space, followed by the cross table name. Then write the description of the first question, and the description of the second question exactly as they appear in the input file and in the same format. Then write an empty line, followed by the table itself.\r", "\r", "The table contains exactly 1+3*(N1+1) lines and exactly 6*(N2+2) characters on every line, where N1 is the number of possible answers for the first question, and N2 is the number of possible answers for the second question. The table has one line for column headings, and N1+1 rows (3 lines per row). The first N1 of these rows correspond to the answers on the first question in the order they appear in the input file, and the last row is for column totals. The table also has N2+2 columns, where each column is 6 characters wide. The first column is for row headings; the subsequent N2 columns correspond to the answers on the second question in the order they appear in the input file, and the last column is for row totals. All information in the cells (including headings) is aligned to the right and is padded on the left with spaces to become 6 characters wide.\r", "\r", "The heading for the first column is empty. The headings for the subsequent N2 columns are composed from the second question code, followed by a ':' (colon) character, and followed by the corresponding answer code. The heading for the last column is the string \"TOTAL\" (without quotes). The headings for the first N1 3-line rows of the cross table are composed from the first question code, followed by a ':' (colon) character, and followed by the corresponding answer code. The heading for the last row is the string \"TOTAL\" (without quotes). Row headings are situated on the first line of the corresponding row. The subsequent 2 lines in the heading column of every row must be blank.\r", "\r", "All non-heading cells in the table contain computed values and percents. On the first line of every cell the corresponding cross table integer value is situated. The second line contains properly rounded to integers row-wise percent, with a mandatory trailing '%' (percent) character, or a single '-' (dash) character if the corresponding row-wise percent is not defined. The third line contains column -wise percent in the same format. All cross tables in the output file must be separated by a single empty line.\r"], "SampleInput": ["New Year Phone Survey for ACM ICPC\r\nQ01 Hello!\r\n H Hello!\r\n Y Yes!\r\n * Uhm...\r\n . (silence)\r\n @ (other)\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\nBYE Happy New Year!\r\n Y You too.\r\n * (censored)\r\n @ (other)\r\n . (hang up)\r\n#\r\n.@.\r\nHH@\r\n.@.\r\nYFY\r\nHQ*\r\nH@.\r\nYYY\r\n.H@\r\nHFY\r\nHH@\r\n#\r\nQ01 Q02 Health vs greeting style\r\nQ02 BYE Politeness matrix\r\n#\r\n"], "SampleOutput": ["New Year Phone Survey for ACM ICPC - Health vs greeting style\r\nQ01 Hello!\r\n H Hello!\r\n Y Yes!\r\n * Uhm...\r\n . (silence)\r\n @ (other)\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\n\r\n       Q02:H Q02:Y Q02:F Q02:Q Q02:@ TOTAL\r\n Q01:H     2     0     1     1     1     5\r\n         40%    0%   20%   20%   20%  100%\r\n         66%    0%   50%  100%   33%   50%\r\n Q01:Y     0     1     1     0     0     2\r\n          0%   50%   50%    0%    0%  100%\r\n          0%  100%   50%    0%    0%   20%\r\n Q01:*     0     0     0     0     0     0\r\n           -     -     -     -     -     -\r\n          0%    0%    0%    0%    0%    0%\r\n Q01:.     1     0     0     0     2     3\r\n         33%    0%    0%    0%   67%  100%\r\n         34%    0%    0%    0%   67%   30%\r\n Q01:@     0     0     0     0     0     0\r\n           -     -     -     -     -     -\r\n          0%    0%    0%    0%    0%    0%\r\n TOTAL     3     1     2     1     3    10\r\n         30%   10%   20%   10%   30%  100%\r\n        100%  100%  100%  100%  100%  100%\r\n\r\nNew Year Phone Survey for ACM ICPC - Politeness matrix\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\nBYE Happy New Year!\r\n Y You too.\r\n * (censored)\r\n @ (other)\r\n . (hang up)\r\n\r\n       BYE:Y BYE:* BYE:@ BYE:. TOTAL\r\n Q02:H     0     0     3     0     3\r\n          0%    0%  100%    0%  100%\r\n          0%    0%  100%    0%   30%\r\n Q02:Y     1     0     0     0     1\r\n        100%    0%    0%    0%  100%\r\n         33%    0%    0%    0%   10%\r\n Q02:F     2     0     0     0     2\r\n        100%    0%    0%    0%  100%\r\n         67%    0%    0%    0%   20%\r\n Q02:Q     0     1     0     0     1\r\n          0%  100%    0%    0%  100%\r\n          0%  100%    0%    0%   10%\r\n Q02:@     0     0     0     3     3\r\n          0%    0%    0%  100%  100%\r\n          0%    0%    0%  100%   30%\r\n TOTAL     3     1     3     3    10\r\n         30%   10%   30%   30%  100%\r\n        100%  100%  100%  100%  100%\r\n"], "Hint": [], "Source": []},
{"Title": ["Chemical Reactions"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1019"], "Accepted": [" 417"], "Description": ["Bill teaches chemistry in the school and has prepared a number of tests for his students. Each test has a chemical formula and a number of possible reaction outcomes that his students are to choose one correct from. However, Bill wants to make sure that he has not made any typos while entering his tests into a computer and that his students won't easily throw away wrong answers simply by counting a number of chemical elements on the left and on the right side of the equation, which should be always equal in a valid reaction.\r", "\r", "You are to write a program that will help Bill. The program shall read the description of the test for the students that consists of the given left side of the equation and a number of possible right sides, and determines if the number of chemical elements on each right side of the equation is equal to the number of chemical elements on the given left side of the equation.\r", "\r", "To help you, poor computer folks, that are unaware of the complex world of chemistry, Bill has formalized your task. Each side of the equation is represented by a string of characters without spaces, and consists of one or more chemical sequences separated by a '+' (plus) characters. Each sequence has an optional preceding integer multiplier that applies to the whole sequence and a number of elements. Each element is optionally followed by an integer multiplier that applies to it. An element in this equation can be either distinct chemical element or a whole sequence that is placed in round parenthesis. Every distinct chemical element is represented by either one capital letter or a capital letter that is followed by a small letter.\r", "\r", "Even more formally, using notation that is similar to BNF, we can write:\r", "\r", "�"], "Input": ["The first line of the input file represents a chemical formula that is to be tested as the left side of the equation. The second line of the input file contains a single integer number N (1 <= N <= 10), which is the number of right sides of the equation that are to be tested. Each one of the following N lines represents one such formula."], "OutPut": ["You are to write to the output file N lines - one line per each possible answer of the chemical test for Bill's students that is given in the input file. For each right-hand side formula that is encountered in the input file, write to the output file:\r", "\r", "< left_formula >==< right_formula >\r", "\r", "if the total number of occurrences of each distinct chemical element on the left-hand side equals to the total number of occurrences of this chemical element on the right-hand side. Otherwise write:\r", "\r", "< left_formula >!=< right_formula >\r", "\r", "Here < left_formula > must be replaced exactly (character by character) with the original left-hand side formula as it is given in the first line of the input file, and < right_formula > must be replaced exactly with each right-hand side formula as they are given in the input file. Do not place any spaces in the lines you write to the output file.\r"], "SampleInput": ["C2H5OH+3O2+3(SiO2)\r\n7\r\n2CO2+3H2O+3SiO2\r\n2C+6H+13O+3Si\r\n99C2H5OH+3SiO2\r\n3SiO4+C2H5OH\r\nC2H5OH+3O2+3(SiO2)+Ge\r\n3(Si(O)2)+2CO+3H2O+O2\r\n2CO+3H2O+3O2+3Si"], "SampleOutput": ["C2H5OH+3O2+3(SiO2)==2CO2+3H2O+3SiO2\r\nC2H5OH+3O2+3(SiO2)==2C+6H+13O+3Si\r\nC2H5OH+3O2+3(SiO2)!=99C2H5OH+3SiO2\r\nC2H5OH+3O2+3(SiO2)==3SiO4+C2H5OH\r\nC2H5OH+3O2+3(SiO2)!=C2H5OH+3O2+3(SiO2)+Ge\r\nC2H5OH+3O2+3(SiO2)==3(Si(O)2)+2CO+3H2O+O2\r\nC2H5OH+3O2+3(SiO2)!=2CO+3H2O+3O2+3Si"], "Hint": [], "Source": []},
{"Title": ["Wall"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 47738"], "Accepted": [" 16165"], "Description": ["Once upon a time there was a greedy King who ordered his chief Architect to build a wall around the King's castle. The King was so greedy, that he would not listen to his Architect's proposals to build a beautiful brick wall with a perfect shape and nice tall towers. Instead, he ordered to build the wall around the whole castle using the least amount of stone and labor, but demanded that the wall should not come closer to the castle than a certain distance. If the King finds that the Architect has used more resources to build the wall than it was absolutely necessary to satisfy those requirements, then the Architect will loose his head. Moreover, he demanded Architect to introduce at once a plan of the wall listing the exact amount of resources that are needed to build the wall.\r", "\r", "Your task is to help poor Architect to save his head, by writing a program that will find the minimum possible length of the wall that he could build around the castle to satisfy King's requirements.\r", "\r", "The task is somewhat simplified by the fact, that the King's castle has a polygonal shape and is situated on a flat ground. The Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of all castle's vertices in feet."], "Input": ["The first line of the input file contains two integer numbers N and L separated by a space. N (3 <= N <= 1000) is the number of vertices in the King's castle, and L (1 <= L <= 1000) is the minimal number of feet that King allows for the wall to come close to the castle.\r", "\r", "Next N lines describe coordinates of castle's vertices in a clockwise order. Each line contains two integer numbers Xi and Yi separated by a space (-10000 <= Xi, Yi <= 10000) that represent the coordinates of ith vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices."], "OutPut": ["Write to the output file the single number that represents the minimal possible length of the wall in feet that could be built around the castle to satisfy King's requirements. You must present the integer number of feet to the King, because the floating numbers are not invented yet. However, you must round the result in such a way, that it is accurate to 8 inches (1 foot is equal to 12 inches), since the King will not tolerate larger error in the estimates."], "SampleInput": ["9 100\r\n200 400\r\n300 400\r\n300 300\r\n400 300\r\n400 400\r\n500 400\r\n500 200\r\n350 200\r\n200 200"], "SampleOutput": ["1628"], "Hint": ["结果四舍五入就可以了"], "Source": ["Northeastern Europe 2001"]},
{"Title": ["Team Them Up!"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 9185"], "Accepted": [" 2512"], "Description": ["Your task is to divide a number of persons into two teams, in such a way, that:\r", "\r", "everyone belongs to one of the teams;\r", "\r", "every team has at least one member;\r", "\r", "every person in the team knows every other person in his team;\r", "\r", "teams are as close in their sizes as possible.\r", "\r", "This task may have many solutions. You are to find and output any solution, or to report that the solution does not exist."], "Input": ["For simplicity, all persons are assigned a unique integer identifier from 1 to N.\r", "\r", "The first line in the input file contains a single integer number N (2 <= N <= 100) - the total number of persons to divide into teams, followed by N lines - one line per person in ascending order of their identifiers. Each line contains the list of distinct numbers Aij (1 <= Aij <= N, Aij != i) separated by spaces. The list represents identifiers of persons that ith person knows. The list is terminated by 0."], "OutPut": ["If the solution to the problem does not exist, then write a single message \"No solution\" (without quotes) to the output file. Otherwise write a solution on two lines. On the first line of the output file write the number of persons in the first team, followed by the identifiers of persons in the first team, placing one space before each identifier. On the second line describe the second team in the same way. You may write teams and identifiers of persons in a team in any order."], "SampleInput": ["5\r\n2 3 5 0\r\n1 4 5 3 0\r\n1 2 5 0\r\n1 2 3 0\r\n4 3 2 1 0"], "SampleOutput": ["3 1 3 5\r\n2 2 4"], "Hint": [], "Source": []},
{"Title": ["Image Perimeters"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 10551"], "Accepted": [" 6094"], "Description": ["Technicians in a pathology lab analyze digitized images of slides. Objects on a slide are selected for analysis by a mouse click on the object. The perimeter of the boundary of an object is one useful measure. Your task is to determine this perimeter for selected objects. \r", "\r", "The digitized slides will be represented by a rectangular grid of periods, '.', indicating empty space, and the capital letter 'X', indicating part of an object.  Simple examples are \r", "\r", "An X in a grid square indicates that the entire grid square, including its boundaries, lies in some object.  The X in the center of the grid below is adjacent to the X in any of the 8 positions around it. The grid squares for any two adjacent X's overlap on an edge or corner, so they are connected. \r", "\r", "An object consists of the grid squares of all X's that can be linked to one another through a sequence of adjacent X's.  In Grid 1, the whole grid is filled by one object.  In Grid 2 there are two objects.  One object contains only the lower left grid square.  The remaining X's belong to the other object. \r", "\r", "The technician will always click on an X, selecting the object containing that X.  The coordinates of the click are recorded.  Rows and columns are numbered starting from 1 in the upper left hand corner.  The technician could select the object in Grid 1 by clicking on row 2 and column 2.  The larger object in Grid 2 could be selected by clicking on row 2, column 3. The click could not be on row 4, column 3. \r", "\r", " One useful statistic is the perimeter of the object.  Assume each X corresponds to a square one unit on each side.  Hence the object in Grid 1 has perimeter 8 (2 on each of four sides).  The perimeter for the larger object in Grid 2 is illustrated in the figure at the left.  The length is 18. \r", "\r", "Objects will not contain any totally enclosed holes, so the leftmost grid patterns shown below could NOT appear. The variations on the right could appear: \r"], "Input": ["The input will contain one or more grids.  Each grid is preceded by a line containing the number of rows and columns in the grid and the row and column of the mouse click.  All numbers are in the range 1-20.  The rows of the grid follow, starting on the next line, consisting of '.' and 'X' characters. \r", "\r", "The end of the input is indicated by a line containing four zeros.  The numbers on any one line are separated by blanks.  The grid rows contain no blanks. \r"], "OutPut": ["For each grid in the input, the output contains a single line with the perimeter of the specified object. "], "SampleInput": ["2 2 2 2\r\nXX\r\nXX\r\n6 4 2 3\r\n.XXX\r\n.XXX\r\n.XXX\r\n...X\r\n..X.\r\nX...\r\n5 6 1 3\r\n.XXXX.\r\nX....X\r\n..XX.X\r\n.X...X\r\n..XXX.\r\n7 7 2 6\r\nXXXXXXX\r\nXX...XX\r\nX..X..X\r\nX..X...\r\nX..X..X\r\nX.....X\r\nXXXXXXX\r\n7 7 4 4\r\nXXXXXXX\r\nXX...XX\r\nX..X..X\r\nX..X...\r\nX..X..X\r\nX.....X\r\nXXXXXXX\r\n0 0 0 0"], "SampleOutput": ["8\r\n18\r\n40\r\n48\r\n8"], "Hint": [], "Source": []},
{"Title": ["Double Vision"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 609"], "Accepted": [" 246"], "Description": ["The DoubleVision company designs inks and fonts that can be easily read by both humans and machines. They design their fonts on a rectangular grid. Shown below is a very simple 5x3 design for the first five digits.\r", "\r", "The ink appears to be normal black ink, but just underneath the surface DoubleVision adds a special polymer that can be detected by an infrared scanner. A human sees the black ink but not the polymer, and a machine sees the polymer but not the black ink. The only problem is that the polymer is much more expensive than the ink, so DoubleVision wants to use as little of it as possible. They have discovered that with many fonts, each symbol can be uniquely identified by at most two pixels. By only adding the polymer to one or two pixels per symbol, they drastically lower costs while still ensuring 100% accuracy in their scanners. The font shown above has this property; pixels that uniquely identify each letter are highlighted with '#'. (There are other choices that would work as well.)\r", "\r", "Your job is to write a program to determine if a given font has this property, and if so highlight the pixels.\r", "\r"], "Input": ["The input consists of one or more test cases, followed by a line containing '0 0 0' (three zeros) that signals the end of the input. Each test case begins with a line containing three positive integers n, r, and c, separated by a space: n is the number of symbols in the font, r is the number of rows in each grid, and c is the number of columns in each grid. The next r lines contain the image of each symbol, using the exact format shown in the examples: a dot '.' represents an empty part of the grid, a lowercase 'o' represents a pixel, and adjacent grids are separated by a space. The total width of each line will be at most 79 characters (not counting end-of-line characters), and r will be at most 10. The test cases are implicitly numbered starting with 1."], "OutPut": ["For test case i, first output a line that says 'Test i'. Then determine if each symbol can be uniquely identified with one or two pixels. If not, output a line with the word 'impossible'. Otherwise, output the font in the same format except that the identifying pixels for each symbol are replaced with '#'. \r", "\r", "In general there may be several different pixels or pixel pairs that uniquely identify a symbol. To ensure that the output is unique, we add the following definition and rules. When comparing two pixels, the topmost-leftmost pixel is the one closest to the top of the grid. If both pixels are on the same row, then the topmost-leftmost is the one closest to the left of the grid.\r", "\r", "If one pixel will work, highlight the topmost-leftmost pixel that works. Never highlight a two-pixel solution if a one-pixel solution is possible. If two pixels are needed, highlight the pair with the topmost-leftmost pixel. If two or more pairs have the same topmost-leftmost pixel, highlight the one with the topmost-leftmost other pixel.\r"], "SampleInput": ["3 2 2\r\noo oo .o\r\no. .o o.\r\n3 2 2\r\noo oo .o\r\no. .o oo\r\n5 5 3\r\n.o. .o. oo. oo. o.o\r\no.o .o. ..o ..o o.o\r\no.o .o. .o. oo. ooo\r\no.o .o. o.. ..o ..o\r\n.o. .o. ooo oo. ..o\r\n1 2 4\r\n.o..\r\n...o\r\n0 0 0"], "SampleOutput": ["Test 1\r\nimpossible\r\nTest 2\r\n#o #o .o\r\n#. .# ##\r\nTest 3\r\n.#. .o. #o. oo. o.#\r\n#.o .#. ..o ..o o.o\r\no.o .o. .o. #o. ooo\r\no.o .o. #.. ..o ..o\r\n.o. .o. ooo #o. ..o\r\nTest 4\r\n.#..\r\n...o"], "Hint": [], "Source": []},
{"Title": ["Index Generation"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 428"], "Accepted": [" 117"], "Description": ["Most nonfiction and reference books have an index to help readers find references to specific terms or concepts in the text. Here is a sample index.\r", "\r", "\r", "\r", "Each index entry contains a primary entry followed by zero or more secondary entries, which begin with a '+'. Entries will normally be followed by a list of page references, but a primary entry might not be if at least one secondary entry is present (as is the case with mango, above). Primary entries are sorted, and secondary entries following a primary entry are also sorted. Sorting is case-insensitive. Page references for an entry are in ascending order and do not include duplicates. (A duplicate could occur if there are two or more identical entries on the same page.)\r", "\r", "Your task is to read a document that has index information embedded within it and produce the index. Documents consist of one or more lines of ASCII text. The page number starts at 1, and the character '&' indicates the start of a new page (which adds 1 to the current page number). Index entries are indicated by a marker, which in its most elaborate form has the following syntax:\r", "\r", "{text%primary$secondary} \r", "Here text is the text to be indexed, primary is an alternative primary entry, and secondary is a secondary entry. Both '%primary' and '$secondary' are optional, but if both are present they must appear in the order given. If primary is present then it is used as the primary entry, and if not then text is used as the primary entry. If secondary is present then the marker adds a page reference for that secondary entry; otherwise it adds a page reference for the primary entry. A single marker cannot add a page reference for both a primary and secondary entry. Here are examples of each of the four possible types of marker, which correspond to four of the entries in the sample index above.\r", "\r", "... his {lumbago} was acting up, so ...\r", "... {Lenny%Lenny Kravitz} lit up the crowd with his version of ...\r", "... Monty Python often used the {larch$Monty Python and} in ...\r", "... when storing {mangos%mango$storage of}, be sure to ...\r", "\r"], "Input": ["The input consists of one or more documents, followed by a line containing only '**' that signals the end of the input. Documents are implictly numbered starting with 1. Each document consists of one or more lines of text followed by a line containing only '*'. Each line of text will be at most 79 characters long, not counting end-of-line characters. For document i, output the line 'DOCUMENT i' followed by the sorted index using the exact output format shown in the examples."], "OutPut": ["Note:\r", "\r", "A document will contain at most 100 markers, with at most 20 primary entries. \r", "A primary entry will have at most 5 secondary entries. \r", "An entry will have at most 10 unique page references (not including duplicates). \r", "The character '&' will not appear anywhere within a marker, and will appear at most 500 times within a document. \r", "The character '*' is used only to signal the end of a document or the end of the input. \r", "The characters '{', '}', '%', and '$' will only be used to define markers, and will not appear in any text or entries. \r", "A marker may span one or more lines. Every end-of-line within a marker must be converted to a single space. \r", "A space within a marker (including a converted end-of-line) is normally included in the text/entry, just like any other character. However, any space that immediately follows '{', immediately precedes '}', or is immediately adjacent to '%' or '$' must be ignored. \r", "The total length of a marker, measured from the opening '{' to the closing '}', and in which all embedded end-of-lines are converted to spaces, will be at most 79 characters. "], "SampleInput": ["Call me Ishmael.\r\n*\r\nOne {fish $unary}, two {fish$ binary},&red {fish $ scarlet}, blue {fish$\r\nazure}. & By { Dr. Seuss }.\r\n*\r\nThis is a {simple } & & { document} that &{\r\nsimply %simple\r\n$adverb\r\n} & {illustrates %vision} &&&&& one {simple-minded% simple} {Judge}'s {vision} \r\nfor what a {document } might { look % vision} like.\r\n*\r\n**"], "SampleOutput": ["DOCUMENT 1\r\nDOCUMENT 2\r\nDr. Seuss, 3\r\nfish\r\n+ azure, 2\r\n+ binary, 1\r\n+ scarlet, 2\r\n+ unary, 1\r\nDOCUMENT 3\r\ndocument, 3, 10\r\nJudge, 10\r\nsimple, 1, 10\r\n+ adverb, 4\r\nvision, 5, 10"], "Hint": [], "Source": []},
{"Title": ["Split Windows"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 405"], "Accepted": [" 203"], "Description": ["The Dotty Software Company makes software that is displayed on inexpensive text based terminals. One application for this system has a main window that can be subdivided into further subwindows. Your task is to take a description of the screen layout after a sequence of window splits and draw the minimum sized window grid that is consistent with the description.\r", "In this problem we will concentrate on the boundaries of windows, so all the characters inside of windows will be left blank. Each window that is not further subdivided has a label. Each label is a distinct uppercase letter. For a text terminal the boundaries of windows must be drawn with characters, chosen as follows: A capital letter label is placed in the upper left-hand corner of each undivided window. Asterisks,'*', appear in corners of windows where there is not a label. Dashes, '-', appear on upper and lower boundaries where there are not corners. Vertical bars, '|', appear on side boundaries where there are not corners.\r", "\r", "For example, the sequence of splits below would generate Window 1: Initially there could be an application window labeled M, that is split next into left and right subwindows, adding label R, and the left subwindow is split into top and bottom subwindows, adding the label C.\r", "\r", "For each pattern of splits there is a binary tree of characters that can describe it. The window splitting and tree structures are described together, building up from the simplest cases.\r", "\r", "1. A window may be an undivided rectangle. Such a window has a capital letter as label. The tree for the window contains just the label.\r", "\r", "2. A window may either be split into left and right subwindows or into top and bottom subwindows, and the corresponding trees have as root the boundary character for the split: a vertical line '|' or a horizontal dash '-' respectively. The root has left and right subtrees corresponding to the top and bottom or left and right subwindows respectively.\r", "\r", "Tree 1, above, and Trees 2-4, below, would be consistent with Windows 1-4. Note that Tree 4 contains Trees 2 and 3. \r", "\r", "\r", "The trees may be more succinctly expressed via a preorder traversal:\r", "\r", "1. The preorder traversal of a tree with just one node (containing a letter) is that letter.\r", "\r", "2. The preorder traversal of a tree with a left and a right subtree is the character from the root of the tree ('-' or '|') followed by the preorder traversal of the left subtree, and then the preorder traversal of the right subtree.\r", "\r", "The preorder traversals for Trees 1 through 4 are\r", "\r", "|-MCR -|-ABC-D|E-FG -P-|Q|RST |-|-ABC-D|E-FG-P-|Q|RST\r", "\r", "Each undivided window must have space for at least one character inside. Hence each tree of splits will be associated with a minimum window size. Windows 1-4 are minimum sized windows for Trees 1-4. Each window illustrates the fact that even in a minimum sized window, not all undivided windows contain only one character.\r", "\r", "Consider Tree 4 and Window 4. The main window is split into a left window with Tree 2 and right window with Tree 3. The left window is like Window 2, but the right window is not just like Window 3. The heights of left and right subwindows must match, so the right window must be stretched.\r", "\r", "The stretching rule depends on a definition of the size of windows. For dimension calculations it is easiest to imagine that a window contains its interior and a half character wide boundary on all sides, so the total dimensions of a window are one more than the dimensions of the interior. Hence the minimum dimensions of a window are 2 by 2, since a window must contain one character inside, and we add one for the boundary. This definition also means that the sum of the widths of left and right subwindows is the width of their enclosing window. The sum of the heights of top and bottom subwindows is the height of their enclosing window.\r", "\r", "The right window in Window 4 must be stretched to match the height 10 of the left window. The right window is split into a top with tree P having minimum height 2 and a bottom with tree -|Q|RST having minimum height 4. The rule for the dimensions in the stretched window is that the heights of the subwindows expand in proportion to their minimum heights, if possible. Some symbols may help here: Let D = 10 be the height of the combined stretched window. We want to determine D1 and D2, the stretched heights of the top and bottom subwindow. Call the corresponding minimum dimensions d = 6, d1 = 2, and d2 = 4. If the window were expanded from a total height d to D in proportion, we would have D1 = d1*(D/d) = 2*(10/6) = 3.333...and D2 = d2*(D/d) = 6.666.... Since the results are not integers we increase D1 to 4 and decrease D2 to 6.\r", "\r", "There is a similar calculation for the bottom window with tree -|Q|RST. It is further subdivided into a top with tree |Q|RS and a bottom with tree T, each having minimum height 2 = d1 = d2. The heights need to add up to D = 6, so they are increased proportionally to D1 = D2 = 2*(6/4) = 3 (exact integers).\r", "\r", "The final dimensions of an enclosing window are always determined before the final dimensions of its subwindows. In this example only heights needed to be apportioned. If all horizontal and vertical splits were interchanged in this example, producing a tree -|-|ABC|D-E|FG|P|-Q-RST, then widths would be apportioned correspondingly, as shown in the third part of the sample output below. If the proportion calculations do not work out to integers, it is always the top or left subwindow whose dimension is increased to the next integer.\r"], "Input": ["The first line of input contains one integer, which is the total number of preorder traversals describing window structures. This line is followed by one line for each preorder traversal. Each preorder traversal will contain appropriate dividers '|' and '-' and from 1 to 26 uppercase letters."], "OutPut": ["For each preorder traversal, print the number of the preorder traversal on one line followed by the minimum sized window grid that the traversal could represent. "], "SampleInput": ["3\r\n|-MCR\r\n|-|-ABC-D|E-FG-P-|Q|RST\r\n-|-|ABC|D-E|FG|P|-Q-RST "], "SampleOutput": ["1\r\nM-R-*\r\n| | |\r\nC-* |\r\n| | |\r\n*-*-*\r\n2\r\nA-C-P-----*\r\n| | |     |\r\nB-* |     |\r\n| | |     |\r\nD-*-Q-R-S-*\r\n|   | | | |\r\nE-F-* | | |\r\n| | T-*-*-*\r\n| G-*     |\r\n| | |     |\r\n*-*-*-----*\r\n3\r\nA-B-D-E---*\r\n| | | |   |\r\nC-*-* F-G-*\r\n|   | | | |\r\nP---Q-*T*-*\r\n|   |  |  |\r\n|   R--*  |\r\n|   |  |  |\r\n|   S--*  |\r\n|   |  |  |\r\n*---*--*--*"], "Hint": [], "Source": []},
{"Title": ["W's Cipher"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 6052"], "Accepted": [" 2990"], "Description": ["Weird Wally's Wireless Widgets, Inc. manufactures an eclectic assortment of small, wireless, network capable devices, ranging from dog collars, to pencils, to fishing bobbers. All these devices have very small memories. Encryption algorithms like Rijndael, the candidate for the Advanced Encryption Standard (AES) are demonstrably secure but they don't fit in such a tiny memory. In order to provide some security for transmissions to and from the devices, WWWW uses the following algorithm, which you are to implement.\r", "\r", "Encrypting a message requires three integer keys, k1, k2, and k3. The letters [a-i] form one group, [j-r] a second group, and everything else ([s-z] and underscore) the third group. Within each group the letters are rotated left by ki positions in the message. Each group is rotated independently of the other two. Decrypting the message means doing a right rotation by ki positions within each group.\r", "\r", "Consider the message the_quick_brown_fox encrypted with ki values of 2, 3 and 1. The encrypted string is _icuo_bfnwhoq_kxert. The figure below shows the decrypting right rotations for one character in each of the three character groups.  \r", "\r", "Looking at all the letters in the group [a-i] we see {i,c,b,f,h,e} appear at positions {2,3,7,8,11,17} within the encrypted message. After a right rotation of k1=2, these positions contain the letters {h,e,i,c,b,f}. The table below shows the intermediate strings that come from doing all the rotations in the first group, then all rotations in the second group, then all the rotations in the third group. Rotating letters in one group will not change any letters in any of the other groups.\r", "\r", "All input strings contain only lowercase letters and underscores(_). Each string will be at most 80 characters long. The ki are all positive integers in the range 1-100.\r"], "Input": ["Input consists of information for one or more encrypted messages. Each problem begins with one line containing k1, k2, and k3 followed by a line containing the encrypted message. The end of the input is signalled by a line with all key values of 0."], "OutPut": ["For each encrypted message, the output is a single line containing the decrypted string. "], "SampleInput": ["2 3 1\r\n_icuo_bfnwhoq_kxert\r\n1 1 1\r\nbcalmkyzx\r\n3 7 4\r\nwcb_mxfep_dorul_eov_qtkrhe_ozany_dgtoh_u_eji\r\n2 4 3\r\ncjvdksaltbmu\r\n0 0 0\r\n"], "SampleOutput": ["the_quick_brown_fox\r\nabcklmxyz\r\nthe_quick_brown_fox_jumped_over_the_lazy_dog\r\najsbktcludmv"], "Hint": [], "Source": []},
{"Title": ["Transmitters"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 6439"], "Accepted": [" 3330"], "Description": ["In a wireless network with multiple transmitters sending on the same frequencies, it is often a requirement that signals don't overlap, or at least that they don't conflict. One way of accomplishing this is to restrict a transmitter's coverage area. This problem uses a shielded transmitter that only broadcasts in a semicircle. \r", "\r", "A transmitter T is located somewhere on a 1,000 square meter grid. It broadcasts in a semicircular area of radius r. The transmitter may be rotated any amount, but not moved. Given N points anywhere on the grid, compute the maximum number of points that can be simultaneously reached by the transmitter's signal. Figure 1 shows the same data points with two different transmitter rotations. \r", "\r", "All input coordinates are integers (0-1000). The radius is a positive real number greater than 0. Points on the boundary of a semicircle are considered within that semicircle. There are 1-150 unique points to examine per transmitter. No points are at the same location as the transmitter. \r"], "Input": ["Input consists of information for one or more independent transmitter problems. Each problem begins with one line containing the (x,y) coordinates of the transmitter followed by the broadcast radius, r. The next line contains the number of points N on the grid, followed by N sets of (x,y) coordinates, one set per line. The end of the input is signalled by a line with a negative radius; the (x,y) values will be present but indeterminate. Figures 1 and 2 represent the data in the first two example data sets below, though they are on different scales. Figures 1a and 2 show transmitter rotations that result in maximal coverage. "], "OutPut": ["For each transmitter, the output contains a single line with the maximum number of points that can be contained in some semicircle. "], "SampleInput": ["25 25 3.5\r\n7\r\n25 28\r\n23 27\r\n27 27\r\n24 23\r\n26 23\r\n24 29\r\n26 29\r\n350 200 2.0\r\n5\r\n350 202\r\n350 199\r\n350 198\r\n348 200\r\n352 200\r\n995 995 10.0\r\n4\r\n1000 1000\r\n999 998\r\n990 992\r\n1000 999\r\n100 100 -2.5"], "SampleOutput": ["3\r\n4\r\n4"], "Hint": [], "Source": []},
{"Title": ["S-Trees"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2999"], "Accepted": [" 1498"], "Description": ["A Strange Tree (S-tree) over the variable set Xn = {x1,x2,...,xn} is a binary tree representing a Boolean function f:{0,1}->{0,1}. Each path of the S-tree begins at the root node and consists of n+1 nodes. Each of the S-tree's nodes has a depth, which is the amount of nodes between itself and the root (so the root has depth 0). The nodes with depth less than n are called non-terminal nodes. All non-terminal nodes have two children: the right child and the left child. Each non-terminal node is marked with some variable xi from the variable set Xn. All non-terminal nodes with the same depth are marked with the same variable, and non-terminal nodes with different depth are marked with different variables. So, there is a unique variable xi1 corresponding to the root, a unique variable xi2 corresponding to the nodes with depth 1, and so on. The sequence of the variables xi1,xi2,...,xin is called the variable ordering. The nodes having depth n are called terminal nodes. They have no children and are marked with either 0 or 1. Note that the variable ordering and the distribution of 0's and 1's on terminal nodes are sufficient to completely describe an S-tree. \r", "As stated earlier, each S-tree represents a Boolean function f. If you have an S-tree and values for the variables x1,x2,...,xn, then it is quite simple to find out what f(x1,x2,...,xn) is: start with the root. Now repeat the following: if the node you are at is labelled with a variable xi, then depending on whether the value of the variable is 1 or 0, you go its right or left child, respectively. Once you reach a terminal node, its label gives the value of the function. \r", "\r", "\r", "On the picture, two S-trees representing the same Boolean function,f(x1,x2,x3) = x1 and (x2 or x3), are shown. For the left tree, the variable ordering is x1, x2, x3, and for the right tree it is x3, x1, x2. \r", "\r", "The values of the variables x1,x2,...,xn, are given as a Variable Values Assignment (VVA) \r", "\r", "with b1,b2,...,bn in {0,1}. For instance, ( x1 = 1, x2 = 1 x3 = 0) would be a valid VVA for n = 3, resulting for the sample function above in the value f(1,1,0) = 1 and (1 or 0) = 1. The corresponding paths are shown bold in the picture. \r", "\r", "Your task is to write a program which takes an S-tree and some VVAs and computes f(x1,x2,...,xn) as described above. "], "Input": ["The input contains the description of several S-trees with associated VVAs which you have to process. Each description begins with a line containing a single integer n, 1 <= n <= 7, the depth of the S-tree. This is followed by a line describing the variable ordering of the S-tree. The format of that line is xi1 xi2 ...xin. (There will be exactly n different space-separated strings). So, for n = 3 and the variable ordering x3, x1, x2, this line would look as follows: \r", "x3 x1 x2 \r", "\r", "In the next line the distribution of 0's and 1's over the terminal nodes is given. There will be exactly 2^n characters (each of which can be 0 or 1), followed by the new-line character. The characters are given in the order in which they appear in the S-tree, the first character corresponds to the leftmost terminal node of the S-tree, the last one to its rightmost terminal node. \r", "\r", "The next line contains a single integer m, the number of VVAs, followed by m lines describing them. Each of the m lines contains exactly n characters (each of which can be 0 or 1), followed by a new-line character. Regardless of the variable ordering of the S-tree, the first character always describes the value of x1, the second character describes the value of x2, and so on. So, the line \r", "\r", "110 \r", "\r", "corresponds to the VVA ( x1 = 1, x2 = 1, x3 = 0). \r", "\r", "The input is terminated by a test case starting with n = 0. This test case should not be processed. "], "OutPut": ["For each S-tree, output the line \"S-Tree #j:\", where j is the number of the S-tree. Then print a line that contains the value of f(x1,x2,...,xn) for each of the given m VVAs, where f is the function defined by the S-tree. \r", "\r", "Output a blank line after each test case. "], "SampleInput": ["3\r\nx1 x2 x3\r\n00000111\r\n4\r\n000\r\n010\r\n111\r\n110\r\n3\r\nx3 x1 x2\r\n00010011\r\n4\r\n000\r\n010\r\n111\r\n110\r\n0"], "SampleOutput": ["S-Tree #1:\r\n0011\r\n\r\nS-Tree #2:\r\n0011"], "Hint": [], "Source": []},
{"Title": ["Robbery"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 32768K"], "TotalSubmissions": [" 1327"], "Accepted": [" 540"], "Description": ["Inspector Robstop is very angry. Last night, a bank has been robbed and the robber has not been caught. And this happened already for the third time this year, even though he did everything in his power to stop the robber: as quickly as possible, all roads leading out of the city were blocked, making it impossible for the robber to escape. Then, the inspector asked all the people in the city to watch out for the robber, but the only messages he got were of the form \"We don't see him.\" \r", "But this time, he has had enough! Inspector Robstop decides to analyze how the robber could have escaped. To do that, he asks you to write a program which takes all the information the inspector could get about the robber in order to find out where the robber has been at which time. \r", "\r", "Coincidentally, the city in which the bank was robbed has a rectangular shape. The roads leaving the city are blocked for a certain period of time t, and during that time, several observations of the form \"The robber isn't in the rectangle Ri at time ti\" are reported. Assuming that the robber can move at most one unit per time step, your program must try to find the exact position of the robber at each time step. "], "Input": ["The input contains the description of several robberies. The first line of each description consists of three numbers W, H, t (1 <= W,H,t <= 100) where W is the width, H the height of the city and t is the time during which the city is locked. \r", "\r", "The next contains a single integer n (0 <= n <= 100), the number of messages the inspector received. The next n lines (one for each of the messages) consist of five integers ti, Li, Ti, Ri, Bi each. The integer ti is the time at which the observation has been made (1 <= ti <= t), and Li, Ti, Ri, Bi are the left, top, right and bottom respectively of the (rectangular) area which has been observed. (1 <= Li <= Ri <= W, 1 <= Ti <= Bi <= H; the point (1, 1) is the upper left hand corner, and (W, H) is the lower right hand corner of the city.) The messages mean that the robber was not in the given rectangle at time ti. \r", "\r", "The input is terminated by a test case starting with W = H = t = 0. This case should not be processed. "], "OutPut": ["For each robbery, first output the line \"Robbery #k:\", where k is the number of the robbery. Then, there are three possibilities: \r", "\r", "If it is impossible that the robber is still in the city considering the messages, output the line \"The robber has escaped.\" \r", "\r", "In all other cases, assume that the robber really is in the city. Output one line of the form \"Time step : The robber has been at x,y.\" for each time step, in which the exact location can be deduced. (x and y are the column resp. row of the robber in time step .) Output these lines ordered by time . \r", "\r", "If nothing can be deduced, output the line \"Nothing known.\" and hope that the inspector will not get even more angry. \r", "\r", "Output a blank line after each processed case. "], "SampleInput": ["4 4 5\r\n4\r\n1 1 1 4 3\r\n1 1 1 3 4\r\n4 1 1 3 4\r\n4 4 2 4 4\r\n10 10 3\r\n1\r\n2 1 1 10 10\r\n0 0 0"], "SampleOutput": ["Robbery #1:\r\nTime step 1: The robber has been at 4,4.\r\nTime step 2: The robber has been at 4,3.\r\nTime step 3: The robber has been at 4,2.\r\nTime step 4: The robber has been at 4,1.\r\n\r\nRobbery #2:\r\nThe robber has escaped."], "Hint": [], "Source": []},
{"Title": ["Maze"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1937"], "Accepted": [" 824"], "Description": ["By filling a rectangle with slashes (/) and backslashes (\\), you can generate nice little mazes. Here is an example: \r", "\r", "As you can see, paths in the maze cannot branch, so the whole maze only contains cyclic paths and paths entering somewhere and leaving somewhere else. We are only interested in the cycles. In our example, there are two of them. \r", "\r", "Your task is to write a program that counts the cycles and finds the length of the longest one. The length is defined as the number of small squares the cycle consists of (the ones bordered by gray lines in the picture). In this example, the long cycle has length 16 and the short one length 4. \r"], "Input": ["The input contains several maze descriptions. Each description begins with one line containing two integers w and h (1 <= w,h <= 75), the width and the height of the maze. The next h lines represent the maze itself, and contain w characters each; all these characters will be either \"/\" or \"\\\". \r", "\r", "The input is terminated by a test case beginning with w = h = 0. This case should not be processed. "], "OutPut": ["For each maze, first output the line \"Maze #n:\", where n is the number of the maze. Then, output the line \"k Cycles; the longest has length l.\", where k is the number of cycles in the maze and l the length of the longest of the cycles. If the maze does not contain any cycles, output the line \"There are no cycles.\". \r", "\r", "Output a blank line after each test case. "], "SampleInput": ["6 4\r\n\\//\\\\/\r\n\\///\\/\r\n//\\\\/\\\r\n\\/\\///\r\n3 3\r\n///\r\n\\//\r\n\\\\\\\r\n0 0"], "SampleOutput": ["Maze #1:\r\n2 Cycles; the longest has length 16.\r\n\r\nMaze #2:\r\nThere are no cycles."], "Hint": [], "Source": []},
{"Title": ["LC-Display"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 17284"], "Accepted": [" 6914"], "Description": ["A friend of you has just bought a new computer. Until now, the most powerful computer he ever used has been a pocket calculator. Now, looking at his new computer, he is a bit disappointed, because he liked the LC-display of his calculator so much. So you decide to write a program that displays numbers in an LC-display-like style on his computer. "], "Input": ["The input contains several lines, one for each number to be displayed. Each line contains two integers s, n (1 <= s <= 10, 0 <= n <= 99 999 999), where n is the number to be displayed and s is the size in which it shall be displayed. \r", "\r", "The input file will be terminated by a line containing two zeros. This line should not be processed. "], "OutPut": ["Output the numbers given in the input file in an LC-display-style using s \"-\" signs for the horizontal segments and s \"|\" signs for the vertical ones. Each digit occupies exactly s+2 columns and 2s+3 rows. (Be sure to fill all the white space occupied by the digits with blanks, also for the last digit.) There has to be exactly one column of blanks between two digits. \r", "\r", "Output a blank line after each number. (You will find a sample of each digit in the sample output.) "], "SampleInput": ["2 12345\r\n3 67890\r\n0 0"], "SampleOutput": ["      --   --        -- \r\n   |    |    | |  | | \r\n   |    |    | |  | | \r\n      --   --   --   -- \r\n   | |       |    |    |\r\n   | |       |    |    |\r\n      --   --        -- \r\n\r\n ---   ---   ---   ---   --- \r\n|         | |   | |   | |   |\r\n|         | |   | |   | |   |\r\n|         | |   | |   | |   |\r\n ---         ---   --- \r\n|   |     | |   |     | |   |\r\n|   |     | |   |     | |   |\r\n|   |     | |   |     | |   |\r\n ---         ---   ---   ---"], "Hint": [], "Source": []},
{"Title": ["The Game"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 15784"], "Accepted": [" 5215"], "Description": ["One morning, you wake up and think: \"I am such a good programmer. Why not make some money?'' So you decide to write a computer game. \r", "The game takes place on a rectangular board consisting of w * h squares. Each square might or might not contain a game piece, as shown in the picture. \r", "\r", "One important aspect of the game is whether two game pieces can be connected by a path which satisfies the two following properties: \r", "\r", "It consists of straight segments, each one being either horizontal or vertical. \r", "\r", "\r", "It does not cross any other game pieces. \r", "\r", "(It is allowed that the path leaves the board temporarily.) \r", "\r", "Here is an example: \r", "\r", "The game pieces at (1,3) and at (4, 4) can be connected. The game pieces at (2, 3) and (3, 4) cannot be connected; each path would cross at least one other game piece. \r", "\r", "The part of the game you have to write now is the one testing whether two game pieces can be connected according to the rules above. "], "Input": ["The input contains descriptions of several different game situations. The first line of each description contains two integers w and h (1 <= w,h <= 75), the width and the height of the board. The next h lines describe the contents of the board; each of these lines contains exactly w characters: a \"X\" if there is a game piece at this location, and a space if there is no game piece. \r", "\r", "Each description is followed by several lines containing four integers x1, y1, x2, y2 each satisfying 1 <= x1,x2 <= w, 1 <= y1,y2 <= h. These are the coordinates of two game pieces. (The upper left corner has the coordinates (1, 1).) These two game pieces will always be different. The list of pairs of game pieces for a board will be terminated by a line containing \"0 0 0 0\". \r", "\r", "The entire input is terminated by a test case starting with w=h=0. This test case should not be procesed. "], "OutPut": ["For each board, output the line \"Board #n:\", where n is the number of the board. Then, output one line for each pair of game pieces associated with the board description. Each of these lines has to start with \"Pair m: \", where m is the number of the pair (starting the count with 1 for each board). Follow this by \"ksegments.\", where k is the minimum number of segments for a path connecting the two game pieces, or \"impossible.\", if it is not possible to connect the two game pieces as described above. \r", "\r", "Output a blank line after each board. "], "SampleInput": ["5 4\r\nXXXXX\r\nX   X\r\nXXX X\r\n XXX \r\n2 3 5 3\r\n1 3 4 4\r\n2 3 3 4\r\n0 0 0 0\r\n0 0"], "SampleOutput": ["Board #1:\r\nPair 1: 4 segments.\r\nPair 2: 3 segments.\r\nPair 3: impossible."], "Hint": [], "Source": []},
{"Title": ["Dreisam Equations"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3692"], "Accepted": [" 748"], "Description": ["During excavations in the Dreisamwuste, a desert on some far away and probably uncivilized planet, sheets of paper containing mysterious symbols had been found. After a long investigation, the project scientists have concluded that the symbols might be parts of equations. If this were true, it would be proof that the Dreisamwuste was civilized a long long time ago. \r", "The problem, however, is that the only symbols found on the sheets are digits, parantheses and equality signs. There is strong evidence that the people living in the Dreisamwuste knew only of three arithmetic operations: addition, subtraction, and multiplication. It is also known that the people of the Dreisamwuste did not have prioritization rules for arithmetic operations - they evaluate all terms strictly left to right. For example, for them the term 3 + 3 * 5 would be equal to 30, and not 18. \r", "\r", "But currently, the sheets do not contain any arithmetic operators. So if the hypothesis is true, and the numbers on the sheets form equations, then the operators must have faded away over time. \r", "\r", "You are the computer expert who is supposed to find out whether the hypothesis is sensible or not. For some given equations (without arithmetic operators) you must find out if there is a possibility to place +, -, and * in the expression, so that it yields a valid equation. For example, on one sheet, the string \"18=7 (5 3) 2\" has been discovered. Here, one possible solution is \"18=7+(5-3)*2\". But if there was a sheet containing \"5=3 3\", then this would mean that the Dreisamwuste people did not mean an equation when writing this. "], "Input": ["Each equation to deal with occupies one line in the input. Each line begins with a positive integer (less than 2", ") followed by an equality sign =. (For your convenience, the Dreisamwuste inhabitants used equations with trivial left sides only.) This is followed by up to 12 positive integers forming the right side of the equation. (The product of these numbers will be less than 2", ".) There might be some parentheses around groups of one or more numbers. There will be no line containing more than 80 characters. There is no other limit for the amount of the parentheses in the equation. There will always be at least one space or parenthesis between two numbers, otherwise the occurrence of white space is unrestricted. \r", "\r", "The line containing only the number 0 terminates the input, it should not be processed. "], "OutPut": ["For each equation, output the line \"Equation #n:\", where n is the number of the equation. Then, output one line containing a solution to the problem, i. e. the equation with the missing +, -, and * signs inserted. Do not print any white space in the equation. \r", "\r", "If there is no way to insert operators to make the equation valid, then output the line \"Impossible\". \r", "\r", "Output one blank line after each test case. "], "SampleInput": ["18 = 7 (5 3) 2\r\n30 = 3 3 5\r\n18 = 3 3 5\r\n5 = 3 3\r\n0"], "SampleOutput": ["Equation #1:\r\n18=7+(5-3)*2\r\n\r\nEquation #2:\r\n30=3+3*5\r\n\r\nEquation #3:\r\nImpossible\r\n\r\nEquation #4:\r\nImpossible"], "Hint": ["In case of mutiple answers, output the least one in order (+ < - < *)."], "Source": ["Mid-Central European Regional Contest 1999"]},
{"Title": ["Moving Tables"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 39186"], "Accepted": [" 13027"], "Description": ["The famous ACM (Advanced Computer Maker) Company has rented a floor of a building whose shape is in the following figure. \r", "\r", "The  floor  has  200  rooms  each  on  the  north  side  and  south  side  along  the  corridor. Recently  the Company made a plan  to  reform  its  system. The  reform  includes moving a  lot of  tables between  rooms. Because  the corridor is narrow and all the tables are big, only one table can pass through the corridor. Some plan is needed to make  the moving efficient. The manager  figured out  the  following plan: Moving a  table  from a  room  to another  room can be done within 10 minutes. When moving a  table  from  room  i  to  room  j,  the part of  the corridor  between  the  front  of  room  i  and  the  front  of  room  j  is  used.  So,  during  each  10 minutes,  several moving between two rooms not sharing the same part of the corridor will be done simultaneously. To make it clear the manager illustrated the possible cases and impossible cases of simultaneous moving.  \r", "\r", "For each room, at most one table will be either moved in or moved out. Now, the manager seeks out a method to minimize the time to move all the tables.  Your job is to write a program to solve the manager's problem. "], "Input": ["The input consists of T  test cases. The number of test cases  ) (T  is given in the first line of the input file. Each test case begins with a line containing an integer  N , 1 <= N <= 200, that represents the number of tables to move. \r", "Each of the following  N  lines contains two positive integers s and t, representing that a table is to move from room number s to room number t each room number appears at most once in the N lines). From the  3 + N -rd \r", "line, the remaining test cases are listed in the same manner as above. "], "OutPut": ["The output should contain the minimum time in minutes to complete the moving, one per line. "], "SampleInput": ["3 \r\n4 \r\n10 20 \r\n30 40 \r\n50 60 \r\n70 80 \r\n2 \r\n1 3 \r\n2 200 \r\n3 \r\n10 100 \r\n20 80 \r\n30 50 \r\n"], "SampleOutput": ["10\r\n20\r\n30"], "Hint": [], "Source": []},
{"Title": ["Calendar Game"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 7429"], "Accepted": [" 3634"], "Description": ["Adam and Eve enter this year's ACM International Collegiate Programming Contest. Last night, they played the Calendar Game,  in celebration of  this contest. This game consists of  the dates  from  January 1, 1900  to November 4, 2001, the contest day. The game starts by randomly choosing a date from this interval. Then, the players, Adam and Eve, make moves in their turn with Adam moving first: Adam, Eve, Adam, Eve, etc. There is only one rule for moves and it is simple: from a current date, a player in his/her turn can move either to the next calendar date or the same day of the next month. When the next month does not have the same day, the player moves only to the next calendar date. For example, from December 19, 1924, you can move either to December  20,  1924,  the  next  calendar  date,  or  January  19,  1925,  the  same  day  of  the  next month.  From January 31 2001, however, you can move only to February 1, 2001, because February 31, 2001 is invalid.  \r", " \r", "A player wins the game when he/she exactly reaches the date of November 4, 2001. If a player moves to a date after November 4, 2001, he/she looses the game. \r", " \r", "Write a program that decides whether, given an initial date, Adam, the first mover, has a winning strategy. \r", " \r", "For this game, you need to identify leap years, where February has 29 days. In the Gregorian calendar, leap years occur in years exactly divisible by four. So, 1993, 1994, and 1995 are not leap years, while 1992 and 1996 are leap years. Additionally, the years ending with 00 are leap years only if they are divisible by 400. So, 1700, 1800, 1900, 2100, and 2200 are not leap years, while 1600, 2000, and 2400 are leap years.  "], "Input": ["The input consists of T test cases. The number of test cases (T ) is given in the first line of the input file. Each test case is written in a line and corresponds to an initial date. The three integers in a line, YYYY MM DD, represent  the  date  of  the DD-th  day  of  MM-th month  in  the  year  of  YYYY. Remember  that  initial  dates  are randomly chosen from the interval between January 1, 1900 and November 4, 2001. "], "OutPut": ["Print exactly one line for each test case. The line should contain the answer \"YES\" or \"NO\" to the question of whether Adam has a winning strategy against Eve. Since we have T  test cases, your program should output totally T  lines of \"YES\" or \"NO\". "], "SampleInput": ["3 \r\n2001 11 3 \r\n2001 11 2 \r\n2001 10 3 "], "SampleOutput": ["YES\r\nNO\r\nNO"], "Hint": [], "Source": []},
{"Title": ["You Who?"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1239"], "Accepted": [" 350"], "Description": ["On the first day of first grade at Friendly Elementrary School, it is customary for each student to spend one minute talking to every classmate that he or she does not already know.  When student Bob sees an unfamilar face, he says ``You who?''  A typical response is ``Me Charlie, you who?''  Then Bob says, ``Me Bob!'' and they talk for a minute.  It's very cute.  Then, after a minute, they part and each looks for another stranger to greet. This takes time.  In class of twenty-nine or thirty mutual strangers, it takes 29 minutes; time that, according to teachers, could be better spent learning the alphabet.  Of course, it is rare to have a first grade class where nobody knows anyone else; there are neighbors and playmates who already know each other, so they don't have to go through the get-to-know-you minutes with each other. \r", "The two first grade teachers have requested that, to save time, students be allocated to their two classes so that the difference in the sizes of the classes is at most one, and the time it takes to complete these introductions is as small as possible.  There are no more than 60 students in the incoming first grade class. \r", "\r", "How can the assignment of students to classes be made?  Your job is to write the software that answers the question. \r", "\r"], "Input": ["The school records include information about these student friendships, represented as lists of numbers.  If there are 29 students, then they are represented by the numbers 1 to 29.  The record for a single student includes, first, his/her student identification number (1 to 29, in this example), then the number of his/her acquaintances, then a list of them in no particular order. So, for example, this record \r", "17 4 5 2 14 22 \r", "\r", "indicates that student 17 knows 4 students: 5, 2, and so on.  The records for all the students in the incoming class are represented as the list of numbers that results from concatenating all the student records together.  Spaces and line breaks are irrelevent in this format.  Thus, this \r", "\r", "1 1 2 2 1 1 \r", "\r", "is a whole database, indicating that there are only two students in the incoming class, and they know each other; and this \r", "\r", "1 2 3 4 \r", "2 2 3 4 \r", "3 2 1 2 \r", "4 2 1 2 \r", "\r", "indicates that 1 doesn't know 2, and 3 doesn't know 4, but all other pairs know each other. \r", "\r", "The database has been checked for consistency, so that if A knows B, then B knows A.\r"], "OutPut": ["Your output should begin with a number that tells how long it will take to complete the introductions in the best possible legal class assignment.  For the simple two student problem above, the only legal answer is \r", "\r", "0"], "SampleInput": ["1 2 3 4 \r\n2 2 3 4 \r\n3 2 1 2 \r\n4 2 1 2 "], "SampleOutput": ["0"], "Hint": ["To make this problem more tractable, the following changes are being made.  There will be exactly two classes.  There will be no more that 30 students.  The students will be divided as evenly as possible between the classes.  The loneliness of a student is the number of students in his class whom he does not know.  You are to arrange the classes to minimize the loneliness of the loneliest student. for the sample data ,you can arrange 1 and 3 to the first class,and 2 and 4 to the second class,then they need no time to know each other."], "Source": ["South Central USA 1998"]},
{"Title": ["Human Gene Functions"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 22959"], "Accepted": [" 12838"], "Description": ["It is well known that a human gene can be considered as a sequence, consisting of four nucleotides, which are simply denoted by four letters, A, C, G, and T. Biologists have been interested in identifying human genes and  determining  their  functions,  because  these  can  be  used  to  diagnose  human  diseases  and  to  design  new drugs for them. \r", " \r", "A human gene can be  identified  through a  series of  time-consuming biological experiments, often with  the help of computer programs. Once a sequence of a gene is obtained, the next job is to determine its function. \r", "One of the methods for biologists to use in determining the function of a new gene sequence that they have just identified is to search a database with the new gene as a query. The database to be searched stores many gene sequences and their functions – many researchers have been submitting their genes and functions to the database and the database is freely accessible through the Internet. \r", " \r", "A database  search will  return a  list of gene  sequences  from  the database  that are  similar to  the query gene. \r", "Biologists  assume  that  sequence  similarity  often  implies  functional  similarity.  So,  the  function  of  the  new gene might be one of the functions that the genes from the list have. To exactly determine which one is the right one another series of biological experiments will be needed. \r", " \r", "Your job is to make a program that compares two genes and determines their similarity as explained below. Your program may be used as a part of the database search if you can provide an efficient one.  \r", "Given two genes AGTGATG and GTTAG, how similar are they? One of the methods to measure the similarity \r", "of two genes is called alignment. In an alignment, spaces are inserted, if necessary, in appropriate positions of \r", "the genes to make them equally long and score the resulting genes according to a scoring matrix.  \r", " \r", "For example, one space is inserted into AGTGATG to result in AGTGAT-G, and three spaces are inserted into GTTAG  to  result  in –GT--TAG. A  space  is denoted by  a minus  sign  (-). The  two genes are now of  equal \r", "length. These two strings are aligned:  \r", " \r", "AGTGAT-G \r", "-GT--TAG  \r", " \r", "In this alignment, there are four matches, namely, G in the second position, T in the third, T in the sixth,  and G in the eighth. Each pair of aligned characters is assigned a score according to the following scoring matrix. \r", "\r", "  denotes  that  a  space-space match  is  not  allowed. The  score  of  the  alignment  above  is  (-3)+5+5+(-2)+(-3)+5+(-3)+5=9. \r", " \r", "Of course, many other alignments are possible. One is shown below (a different number of spaces are inserted into different positions): \r", " \r", "AGTGATG \r", "-GTTA-G \r", " \r", "This alignment gives a score of  (-3)+5+5+(-2)+5+(-1) +5=14. So, this one is better than the previous one. As a matter of fact, this one is optimal since no other alignment can have a higher score. So, it is said that the \r", "similarity of the two genes is 14. "], "Input": ["The input consists of T  test cases. The number of test cases  ) (T  is given in the first line of the input file. Each test case consists of two lines: each line contains an integer, the length of a gene, followed by a gene sequence. The length of each gene sequence is at least one and does not exceed 100. "], "OutPut": ["The output should print the similarity of each test case, one per line. "], "SampleInput": ["2 \r\n7 AGTGATG \r\n5 GTTAG \r\n7 AGCTATT \r\n9 AGCTTTAAA "], "SampleOutput": ["14\r\n21 "], "Hint": [], "Source": []},
{"Title": ["Ratio"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 4473"], "Accepted": [" 1653"], "Description": ["If you ever see a televised report on stock market activity, you'll hear the anchorperson say something like ``Gainers outnumbered losers 14 to 9,'' which means that for every 14 stocks that increased in value that day, approximately 9 other stocks declined in value. Often, as you hear that, you'll see on the screen something like this: \r", "Gainers 1498 \r", "Losers   902 \r", "\r", "As a person with a head for numbers, you'll notice that the anchorperson could have said ``Gainers outnumbered losers 5 to 3'', which is a more accurate approximation to what really happened.  After all, the exact ratio of winners to losers is (to the nearest millionth) 1.660754, and he reported a ratio of 14 to 9, which is 1.555555, for an error of 0.105199; he could have said ``5 to 3'', and introduced an error of only 1.666667-1.660754=0.005913.  The estimate ``5 to 3'' is not as accurate as ``1498 to 902'' of course; evidently, another goal is to use small integers to express the ratio. So, why did the anchorperson say ``14 to 9?''  Because his algorithm is to lop off the last two digits of each number and use those as the approximate ratio. \r", "\r", "What the anchorman needs is a list of rational approximations of increasing accuracy, so that he can pick one to read on the air. Specifically, he needs a sequence {a_1, a_2, ..., a_n} where a_1 is a rational number with denominator 1 that most exactly matches the true ratio of winners to losers (rounding up in case of ties), a_{i+1} is the rational number with least denominator that provides a more accurate approximation than a_i, and a_n is the exact ratio, expressed with the least possible denominator.  Given this sequence, the anchorperson can decide which ratio gives the best tradeoff between accuracy and simplicity. \r", "\r", "For example, if 5 stocks rose in price and 4 fell, the best approximation with denominator 1 is 1/1; that is, for every stock that fell, about one rose.  This answer differs from the exact answer by 0.25 (1.0 vs 1.25).  The best approximations with two in the denominator are 2/2 and 3/2, but neither is an improvement on the ratio 1/1, so neither would be considered.  The best approximation with three in the denominator 4/3, is more accurate than any seen so far, so it is one that should be reported.  Finally, of course, 5/4 is exactly the ratio, and so it is the last number reported in the sequence. \r", "\r", "Can you automate this process and help the anchorpeople? \r"], "Input": ["input contains several pairs of positive integers. Each pair is on a line by itself, beginning in the first column and with a space between the two numbers.  The first number of a pair is the number of gaining stocks for the day, and the second number is the number of losing stocks for the day.   The total number of stocks never exceeds 5000. "], "OutPut": ["For each input pair, the standard output should contain a series of approximations to the ratio of gainers to losers.  The first approximation has '1' as denominator, and the last is exactly the ratio of gainers to losers, expressed as a fraction with least possible denominator.  The approximations in between are increasingly accurate and have increasing denominators, as described above. \r", "The approximations for a pair are printed one to a line, beginning in column one, with the numerator and denominator of an approximation separated by a slash (``/'').  A blank line separates one sequence of approximations from another. \r", "\r"], "SampleInput": ["5 4 \r\n1498 902 "], "SampleOutput": ["1/1 \r\n4/3 \r\n5/4 \r\n\r\n2/1 \r\n3/2 \r\n5/3 \r\n48/29 \r\n53/32 \r\n58/35 \r\n63/38 \r\n68/41 \r\n73/44 \r\n78/47 \r\n83/50 \r\n88/53 \r\n93/56 \r\n377/227 \r\n470/283 \r\n563/339 \r\n656/395 \r\n749/451"], "Hint": [], "Source": []},
{"Title": ["Gizilch"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1997"], "Accepted": [" 771"], "Description": ["The game of gizilch has very simple rules.  First 100 grapes are labeled, in nontoxic ink, with the numbers 1 to 100.  Then, with a cry of ``GIZILCH!'', the referee fires the grapes up into the air with a giant gizilcher.  The two players, who each start with a score of  ``1'', race to eat the falling (or, shortly thereafter, fallen) grapes and, at the same time, multiply their scores by the numbers written on the grapes they eat.  After a minute, the hungry squirrels are let loose to finish the remaining grapes, and each contestant reports his score, the product of the numbers on the grapes he's eaten.  The unofficial winner is the player who announces the highest score. \r", "Inevitably, though, disputes arise, and so the official winner is not determined until the disputes are resolved.  The player who claims the lower score is entitled to challenge his opponent's score.  The player with the lower score is presumed to have told the truth, because if he were to lie about his score, he would surely come up with a bigger better lie.  The challenge is upheld if the player with the higher score has a score that cannot be achieved with grapes not eaten by the challenging player.  So, if the challenge is successful, the player claiming the lower score wins. \r", "\r", "So, for example, if one player claims 343 points and the other claims 49, then clearly the first player is lying; the only way to score 343 is by eating grapes labeled 7 and 49, and the only way to score 49 is by eating a grape labeled 49.  Since each of two scores requires eating the grape labeled 49, the one claiming 343 points is presumed to be lying. \r", "\r", "On the other hand, if one player claims 162 points and the other claims 81, it is possible for both to be telling the truth (e.g. one eats grapes 2, 3 and 27, while the other eats grape 81), so the challenge would not be upheld. \r", "\r", "Unfortunately, anyone who is willing to referee a game of gizilch is likely to have himself consumed so many grapes (in a liquid form) that he or she could not reasonably be expected to perform the intricate calculations that refereeing requires.  Hence the need for you, sober programmer, to provide a software solution. \r"], "Input": ["Pairs of unequal, positive numbers, with each pair on a single line, that are claimed scores from a game of gizilch. "], "OutPut": ["Numbers, one to a line, that are the winning scores, assuming that the player with the lower score always challenges the outcome. "], "SampleInput": ["343 49 \r\n3599 610 \r\n62 36 "], "SampleOutput": ["49 \r\n610 \r\n62 "], "Hint": ["A clarification was made at the beginning of the contest to resolve some ambiguity in the problem description noticed a couple of days before the contest. The rules for deciding the winner of a game of gizilch are, first, if both players might be telling the truth, the larger score wins.  Second, if the player with the lower score cannot be telling the truth, the player with the higher score wins.  Finally, if neither of the previous two conditions holds, the lower score wins.. "], "Source": ["South Central USA 1998"]},
{"Title": ["Eight"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 48060"], "Accepted": [" 18923"], "Description": ["The 15-puzzle has been around for over 100 years; even if you don't know it by that name, you've seen it.  It is constructed with 15 sliding tiles, each with a number from 1 to 15 on it, and all packed into a 4 by 4 frame with one tile missing.  Let's call the missing tile 'x'; the object of the puzzle is to arrange the tiles so that they are ordered as: \r", "\r", "where the only legal operation is to exchange 'x' with one of the tiles with which it shares an edge.  As an example, the following sequence of moves solves a slightly scrambled puzzle: \r", "\r", "The letters in the previous row indicate which neighbor of the 'x' tile is swapped with the 'x' tile at each step; legal values are 'r','l','u' and 'd', for right, left, up, and down, respectively. \r", "\r", "Not all puzzles can be solved; in 1870, a man named Sam Loyd was famous for distributing an unsolvable version of the puzzle, and \r", "frustrating many people.  In fact, all you have to do to make a regular puzzle into an unsolvable one is to swap two tiles (not counting the missing 'x' tile, of course). \r", "\r", "In this problem, you will write a program for solving the less well-known 8-puzzle, composed of tiles on a three by three \r", "arrangement. \r"], "Input": ["You will receive  a description of a configuration of the 8 puzzle.  The description is just a list of the tiles in their initial positions, with the rows listed from top to bottom, and the tiles listed from left to right within a row, where the tiles are represented by numbers 1 to 8, plus 'x'.  For example, this puzzle \r", "\r", "is described by this list: \r"], "OutPut": ["You will print to standard output either the word ``unsolvable'', if the puzzle has no solution, or a string consisting entirely of the letters 'r', 'l', 'u' and 'd' that describes a series of moves that produce a solution.  The string should include no spaces and start at the beginning of the line. "], "SampleInput": [" 2  3  4  1  5  x  7  6  8 "], "SampleOutput": ["ullddrurdllurdruldr"], "Hint": [], "Source": []},
{"Title": ["Bowl"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 1202"], "Accepted": [" 254"], "Description": ["Technology hasn't come quickly to Joe's Bowl-a-rama.  Minimum wage teens, and not those fancy machines, still reset the pins, and the grizzled veteran bowlers still mark up their own score sheets. Unfortunately for Joe Junior, who now runs the Bowl-a-rama, people  his age are a little shaky on the scoring, especially after the second beer, and are staying away in droves, bowling instead at the new CyberBowl 2000 down the street, which scores automatically.  Joe Junior figures that if he puts a cheap PC next to every lane, he can get a cheap, semi-automatic scoring system going.  His plan is for the PC's to run software that only requires a bowler to enter the  number of pins that remain standing after every throw -- and the software will keep score and tell the bowler when his game is over.  Joe  Junior would like to hire you to write the software. \r", "Of course, since you may not know how to score a game of bowling either, Joe Junior has provided a description of the rules.  The basic game consists of ten frames.  In a frame, you get two chances to throw a ball down the alley and knock over as many pins as you can.   There are ten pins standing at the beginning of a frame, and none are replaced after getting knocked over on the first ball, so the most pins you can knock over in a frame is ten.  You get one point for each pin knocked over.  In addition, there are two bonuses you can  earn. If you knock over all ten pins on your first ball of the frame, you have scored a ``strike''; besides the ten points for the pins, your score in this frame is increased by the total number of pins knocked down with your next two balls.  Those next two balls are usually part of another frame (or two) and score points in that frame (or those frames) as well.  If you knock over all ten pins in a frame, but it takes you two balls to do it, you have scored a ``spare''; in addition to your ten points for pins knocked down, your score for the frame is increased by the number of pins you knock down on your next ball.  Of course, those pins also count as part of the next frame.  If you  score a spare (or strike) in the final (tenth) frame, you are entitled to one (or two) extra balls to determine your tenth frame bonus.  A perfect game scores 300 points, because each frame scores 30, 10 for knocking down 10 pins, and 20 for knocking down 20 pins with the next two balls combined. \r", "\r", "Now, are you ready to sign on to write the software? \r", "\r"], "Input": ["Input contains several complete or partial games.  A game is described by a single line with a single name, not to exceed 12 characters, and sequence of numbers, one for each ball thrown indicating the number of pins still standing after that throw,ended with -1. According  to the rules, there are from 11 to 21 throws in a game; no input line will show throws beyond the last throw of the game.  The number of games described in a file is not predetermined, so you'll have to detect the end of the input file. \r"], "OutPut": ["The standard output will contain, on successful completion of the program, two output lines for each input line.  The first output line contains the name of the bowler and a record of the throws in each frame.  This record shows, for each frame, the number of pins knocked down for each throw as a digit, with some exceptions.  For a throw that knocks down no pins, a dash (\\verb$-$) is used instead of a `0'. An 'X' indicates a throw that knocks down all 10 pins on the first try.  A slash ('/') indicates a throw that finishes knocking down all the pins, after the previous throw left some standing.  Otherwise, a throw is shown as a digit (`1' to `9').  The number of throws in a frame may be one (a strike in frames 1 to 9), or three (a strike or spare in frame 10, followed by bonus balls), but is usually two.  Here are examples of throw markings for a variety of situations: \r", "\r", "The second output line shows cumulative scores.  The cumulative score for the first frame is just the score for pins knocked down in frame, plus bonus points if they apply.  The cumulative score for any other frame is the cumulative score for the previous frame plus the score for pins knocked down in that frame, plus the bonus pins that may have been earned for a strike or spare in this frame.  It is possible to have markings on line one for a frame, but no score on line two, in the event that the frame is a strike or spare but the bonus points for the frame aren't yet known. \r", "\r", "The format for this output requires that the bowler's name be left-justified.  The fields for each frame are three characters wide, with a space separating each field.  The fields begin in columns 14, 18, 22, and so on.  The record of the throws in the first line is left justified in its field.  The cumulative score is right justified in its field.  There is a blank line that separates the scores of one bowler from the scores of another. \r"], "SampleInput": ["Chuck 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 -1\r\nSolly 0 0 0 0 0 0 0 0 0 0 0 8 -1\r\nLothar 10 0 10 0 10 0 -1\r\nBrutus 5 1 2 0 6 0 9 -1\r\nMcGillicuddy 0 0 1 0 -1\r\nHomer 0 10 0 0 0 0 -1\r\nBarney 0 0 0 0 0 0 0 0 0 0 1 0 -1"], "SampleOutput": ["The line of digits is intended to guide you in proper output alignment, and is not part of the output that your solution should produce. \r\n  \r\n1234567890123456789012345678901234567890123456789012 \r\nChuck        9/  9/  9/  9/  9/  9/  9/  9/  9/  9/9 \r\n              19  38  57  76  95 114 133 152 171 190 \r\n\r\nSolly        X   X   X   X   X   X   X   X   X   XX2 \r\n              30  60  90 120 150 180 210 240 270 292 \r\n\r\nLothar       -/  -/  -/ \r\n              10  20 \r\n\r\nBrutus       54  8/  4/  1 \r\n               9  23  34 \r\n\r\nMcGillicuddy X   X   9/ \r\n              29  49 \r\n\r\nHomer        X   -/  X   X   X \r\n              20  40  70 \r\n\r\nBarney       X   X   X   X   X   X   X   X   X   X9/ \r\n              30  60  90 120 150 180 210 240 269 289 \r\n"], "Hint": [], "Source": []},
{"Title": ["University Entrance Examination"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1017"], "Accepted": [" 293"], "Description": ["There is a fierce competition among high-school graduates in Iran to pass the centralized nationwide university entrance examination. Ministry of Science, Research, and Technology has set up the Education Evaluation Organization (EEO) to take care of all aspects of this big exam. This year the EEO managed to select some 150,000 students to enter universities out of 1.4 million high school graduates participated in a tough 4.5 hours multiple-choice exam. This annual event is usually preceded by a multi-billion Rial business offering preparatory courses to enthusiastic students. A few weeks after the big exam day, each participant receives a score sheet, and a list of Field-Department-University (FDU), displaying each field of study in the universities’ departments (e.g., the Software Engineering field of Computer Engineering department at Sharif University of Technology) along with their capacity for that year. The eligible participants (those who have scored enough to be allowed to declare their FDU priorities) fill out a priority indication form, and declare the FDUs they like to enter, in the order of their preference. The EEO processes the forms, and considering the total score, the participant’s FDU priority list, and some other selection rules, enters the accepted participants’ names in the list of each FDU, until all capacities are exhausted. Those who are not entered in a list are considered failed and may try again next year. Each accepted participant’s name may be entered in only one list.\r", "\r", "One of the interesting selection rules is to persuade participants to enter universities in the vicinity of their home towns. This is to help reduce the number of requests for staying in the university dormitories. \r", "\r", "The selection process is so complex and so sensitive to many, that EEO has decided to hire the very best programmers in Iran to design a new selection algorithm and write a completely new program for what they have been doing for years. ACM programming contest is where these programmers can be found.\r", "\r", "There are N students S1 to SN , and M items F1 to FM , each representing one of the FDUs. There are also a number of geographic regions. For each participant, the total score, the geographic region where his/her high school diploma was awarded, and a priority list of his/her wanted FDUs are available. For each FDU, the geographic region where the corresponding university is located, and its capacity for that year is recorded.\r", "\r", "Write a program to compute the list of accepted students with the FDU they can enter to, given the above list of input data. Your program must abide with the following rules:\r", "\r", "1. (Local student selection rule) Suppose two students A and B have both selected F in their priority lists and F is in region R. Also suppose that score of A is greater than B's score. Then, if B is from region R (local) and A is from other regions (non-local), and B's score is greater than 70% of A's score, then B has priority over A to enter F. In all other cases A has priority over B to enter F.\r", "2. (Fairness rule) Students should be treated according to their priority list of FDUs. That is, an accepted student will be accepted to the first possible FDU he/she can enter.\r", "\r", "Note: We assume that scores are all different integer values.\r"], "Input": ["The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains N (1 <= N <= 150) and M (1 <= M <= 50) followed by N lines, each for one student. The format of these lines is Ri, Mi, K, Fi1, …, FiK in this order. In this line, that is for student i, Ri is his/her region number, Mi is his/her score in the entrance exam, K is the number of FDUs in his/her priority list (0 <= K <= M), and his/her priority list containing the FDU numbers in order of interest. Then there are M lines, one for each FDU. Each line contains Ri, and Ci in that order, which respectively is region number of Fi (the ith FDU) and the capacity of Fi. Note that region numbers are arbitrary integers. \r"], "OutPut": ["Outputs for different test cases are separated by exactly one blank line. For each test case, you should write N lines, one for each of the N students. If student i has been accepted to FDU Fj, then ith line should contain j, and not accepted, if that student has not been accepted in any FDU of his/her interest. "], "SampleInput": ["1\r\n9 2\r\n1 100 2 1 2\r\n2 80 2 2 1\r\n1 90 1 1\r\n2 40 1 2\r\n2 50 1 1\r\n1 60 1 2\r\n2 75 1 1\r\n1 95 1 1\r\n2 30 1 2\r\n1 3\r\n2 4\r\n"], "SampleOutput": ["1\r\n2\r\n1\r\n2\r\nnot accepted\r\n2\r\nnot accepted\r\n1\r\n2\r\n"], "Hint": [], "Source": []},
{"Title": ["Parallel Expectations"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1186"], "Accepted": [" 346"], "Description": ["We are to predict some facts about the behavior of a single processor designed for running two programs in parallel. Programs are sequences of commands according to the following grammar:\r", "\r", "A "], "Input": ["The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The data for each test case consists of a pair of programs. Each program is written as a sequence of consecutive lines, each line containing exactly one command. Programs end with a line containing only the word END. You may assume that no variable in any program is named 'END'. There is no blank line between programs of one test case. There are at least one and at most 25 lines in each program. Total number of variables in two programs is no more than 10."], "OutPut": ["For each test case, the output file should contain the expected final value of all variables in alphabetical order of variable names (digits precede letters in this order). Output for different test cases should be separated by exactly one blank line. Round the numbers in the output to 4 digits after decimal point. Do not omit trailing zeros after decimal point (e.g. write 1.2000 instead of 1.2)."], "SampleInput": ["1\r\nS := 1 + 3\r\nEND\r\nS := S+S\r\nEND\r\n"], "SampleOutput": ["3.0000"], "Hint": [], "Source": []},
{"Title": ["The Willy Memorial Program"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 949"], "Accepted": [" 255"], "Description": ["Willy the spider used to live in the chemistry laboratory of Dr. Petro. He used to wander about the lab pipes and sometimes inside empty ones. One night while he was in a pipe, he fell asleep. The next morning, Dr. Petro came to the lab. He didn't notice Willy while opening the valve to fill the pipes with hot water. Meanwhile, Stanley the gray mouse got what was going to happen. No time to lose! Stan ran hard to reach the valve before Willy gets drawn, but... Alas! He couldn't make it! \r", "\r", "Poor Willy was boiled in hot water, but his memory is still in our hearts. Though Stan tried his best, we want to write a program, in the memory of Willy, to compute the time Stan had, to rescue Willy, assuming he started to run just when the doctor opened the valve.\r", "\r", "To simplify the problem, assume the pipes are all vertical cylinders with diameter 1 cm. Every pipe is open from the top and closed at the bottom. Some of the pipes are connected through special horizontal pipes named links. The links have very high flow capacity, but are so tiny that at any given time, the volume of water inside them is negligible. The water enters from top of one of the pipes with a constant rate of 0.25PI cm", "/sec and begins to fill the pipe from the bottom until the water reaches a link through which it flows horizontally and begins to fill the connected pipe. From elementary physics we know if two pipes are connected and the surface of the water is above the connecting link, the level of water in both pipes remains the same when we try to fill one of them. In this case the water fills each pipe with a rate equal to half of the rate of incoming water. As an example, consider the following configuration:\r", "\r", "First, the lower 2 centimeters of the left pipe is filled with water at full rate, then, the lower 3 centimeters of the right pipe is filled, and after that, the upper part of the two pipes are filled in parallel at half rate. The input to your program is a configuration of pipes and links, and a target level in one of the pipes (the heavy dotted line in the above figure). The program should report how long it takes for the level of water to reach the target level. For the above configuration, the output is 9 seconds.\r", "\r", "It is assumed that the water falls very rapidly, such that the time required for the water to fall can be neglected. The target level is always assumed to be a bit higher than the specified level for it. As an example, if we set the target point to level 4 in the left pipe in the figure above, the elapsed time for water to reach that target is assumed to be 5 (not 2), Also note that if the water reaches to the top of a pipe (say in level x), it won't pour out outside the pipe until empty spaces in connected pipes below level x are filled (if can be filled, i.e. the level of water reaches the connecting links). (Note that there may be some links at level x, to which water is entered). After all such spaces are filled; the water level would not go up further.\r", "\r"], "Input": ["To describe positions, we assume the coordinates are expressed as (x, y) and the origin lies in the top-left of all pipes and links. (Note that y coordinates are increased downwards). All coordinates are integer numbers between 0 and 100, inclusive.\r", "The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case is p (1 <= p <= 20), the number of pipes, followed by p lines, each describing a pipe. Each pipe description line consists of three numbers. The first two are (x, y) coordinates of the upper-left corner of the pipe and the third number is the height of the pipe (at least 1 cm and at most 20 cm). Note that diameter of each pipe is 1 cm.\r", "\r", "After input data describing the pipes, there is a line containing a single integer l, which is the number of links (0 <= l <= 50). After it, there are l lines describing links. Each link description contains 3 integers. The first two are (x, y) coordinates of the left end-point of the link and the third is the length of the link (at least 1 cm and at most 20 cm). It is assumed that the width of the link is zero.\r", "\r", "The last line for each test case contains two numbers. The first is the number of target pipe (starting from one, with the order appeared in test data). The second line is the desired y for the level of water in the target pipe (note that the specified level may be out of the pipe at all).\r", "\r", "You can assume the following about the input:\r", ".\tThe water enters into the first pipe.\r", ".\tNo link crosses a pipe.\r", ".\tNo two links have the same y coordinates.\r", ".\tNo two pipes have the same upper-left x coordinates.\r", ".\tBoth endpoints of each link are connected to pipes.\r"], "OutPut": ["The output should contain exactly t lines with no blank lines in between, each corresponding to one test case. Each output line should contain the time required for the water to reach the target level in the target pipe (an integer number). If in a specific test case, the water never reaches the target level, the line should contain No Solution string in it."], "SampleInput": ["1\r\n2\r\n2 0 6\r\n5 1 6\r\n1\r\n3 4 2\r\n2 2\r\n"], "SampleOutput": ["9"], "Hint": [], "Source": []},
{"Title": ["Puzzle Out"], "TimeLimit": [" 5000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 1545"], "Accepted": [" 354"], "Description": ["The scientific committee members of the 26th ACM/ICPC, who design the contest problems, use the following encryption algorithm to communicate the problem drafts securely through the Internet. To encrypt a text, all occurrences of each letter is replaced with another letter (possibly itself), such that no two letters are encrypted to the same letter. Both original and encrypted texts consist of only upper-case letters and blanks. Blanks are not encrypted and are repeated exactly in the encrypted text. As an example, the string GSRH RH GSV URIHG HZNKOV is the encrypted form of THIS IS THE FIRST SAMPLE according to the encryption table (A -> Z, B -> Y, C -> X,..., Z -> A).\r", "\r", "A recipient of a problem draft has lost the encryption table, but he has a dictionary which includes all the possible words appearing in the problems. You are to help him set up a decryption table to enable him restore the original problem draft from the encrypted one. Given a dictionary of the original words used in the text, and the encrypted text, we want to find the right encryption table such that after decrypting the given encrypted text back to the original one, all words can be found in the dictionary. \r"], "Input": ["The first part of the input file is a dictionary of English words common to all test cases. The first line of the file is d (1 <= d <= 50000); the number of words in the dictionary, followed by d lines each containing a word in the dictionary. The words in the dictionary are sorted in alphabetical order and all are in uppercase. Each word has at most 20 characters, but you can assume that sum of the length of all words in the dictionary is no more than 350,000. The next line contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. Each test case, which is preceded by a single blank line, consists of multiple lines in the input file forming the encrypted text. Each line has a string containing only uppercase letters and blank. You may assume that no line break is occurred in the middle of a word and there may be arbitrary number of blank characters at the end of each line. Maximum length of input lines is 80. "], "OutPut": ["The output contains exactly t lines, each corresponding to a test case. Each line should contain a single string of 26 characters which is the encryption of the string ABCDEFGHIJKLMNOPQRSTUVWXYZ according to the encryption table used in the test case. Letters in the output string should be in uppercase. It is possible that some letters do not appear in the encrypted text at all. In this case, put a * mark in place of those letters not appearing in the decrypted version of the input text. If the test case has no solution, the output line should contain #No solution#. If there is more than one possible encryption table for a test case, the output line should contain #More than one solution#."], "SampleInput": ["14\r\nBE\r\nCHANGE\r\nFIRST\r\nIN\r\nIS\r\nMUST\r\nSAMPLE\r\nSEE\r\nTHE\r\nTHIS\r\nTO\r\nWISH\r\nWORLD\r\nYOU\r\n4\r\n\r\nGSRH RH GSV URIHG HZNKOV\r\n\r\nIZM BMVU    SP UGP \r\nRGTANP IZM KFVG UZ VPP \r\nFA UGP KZWCQ\r\n\r\nXYZ ABCDEFG\r\n\r\nXZY ABD\r\n\r\n\r\n\r\n"], "SampleOutput": ["Z***VU*SR**ON**K*IHG******\r\nTSRQP*NGF**CBAZ**WVUM*K*I*\r\n#No solution#\r\n#More than one solution#"], "Hint": [], "Source": []},
{"Title": ["Illusive Chase"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1503"], "Accepted": [" 695"], "Description": ["Tom the robocat is presented in a Robotics Exhibition for an enthusiastic audience of youngsters, placed around an m * n field. Tom which is turned off initially is placed in some arbitrary point in the field by a volunteer from the audience. At time zero of the show, Tom is turned on by a remote control. Poor Tom is shown a holographic illusion of Jerry in a short distance such that a direct path between them is either vertical or horizontal. There may be obstacles in the field, but the illusion is always placed such that in the direct path between Tom and the illusion, there would be no obstacles. Tom tries to reach Jerry, but as soon as he gets there, the illusion changes its place and the chase goes on. Let's call each chase in one direction (up, down, left, and right), a chase trip. Each trip starts from where the last illusion was deemed and ends where the next illusion is deemed out. After a number of chase trips, the holographic illusion no more shows up, and poor Tom wonders what to do next. At this time, he is signaled that for sure, if he returns to where he started the chase, a real Jerry is sleeping and he can catch it.\r", "\r", "To simplify the problem, we can consider the field as a grid of squares. Some of the squares are occupied with obstacles. At any instant, Tom is in some unoccupied square of the grid and so is Jerry, such that the direct path between them is either horizontal or vertical. It's assumed that each time Tom is shown an illusion; he can reach it by moving only in one of the four directions, without bumping into an obstacle. Tom moves into an adjacent square of the grid by taking one and only one step.\r", "\r", "The problem is that Tom's logging mechanism is a bit fuzzy, thus the number of steps he has taken in each chase trip is logged as an interval of integers, e.g. 2 to 5 steps to the left. Now is your turn to send a program to Tom's memory to help him go back. But to ease your task in this contest, your program should only count all possible places that he might have started the chase from.\r"], "Input": ["The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integers m and n, which are the number of rows and columns of the grid respectively (1 <= m, n <= 100). Next, there are m lines, each containing n integers which are either 0 or 1, indicating whether the corresponding cell of the grid is empty (0) or occupied by an obstacle (1). After description of the field, there is a sequence of lines, each corresponding to a chase trip of Tom (in order). Each line contains two positive integers which together specify the range of steps Tom has taken (inclusive), followed by a single upper-case character indicating the direction of the chase trip, which is one of the four cases of R (for right), L (for left), U (for up), and D (for down). (Note that these directions are relative to the field and are not directions to which Tom turns). This part of the test case is terminated by a line containing exactly two zeros."], "OutPut": ["For each test case, there should be a single line, containing an integer indicating the number of cells that Tom might have started the chase from."], "SampleInput": ["2\r\n6 6\r\n0 0 0 0 0 0\r\n0 0 0 1 1 0\r\n0 1 0 0 0 0\r\n0 0 0 1 0 0\r\n0 0 0 1 0 1\r\n0 0 0 0 0 1\r\n1 2 R\r\n1 2 D\r\n1 1 R\r\n0 0\r\n3 4\r\n0 0 0 0\r\n0 0 0 0\r\n0 0 0 0\r\n1 2 R\r\n3 7 U\r\n0 0\r\n"], "SampleOutput": ["10\r\n0\r\n"], "Hint": [], "Source": []},
{"Title": ["Deformed Wheel"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 919"], "Accepted": [" 192"], "Description": ["The village's carpentry is located by a hill side. The carpenter's two little boys play with a piece of wood which looks like a deformed wheel with two identical convex polygon-shaped faces. One boy sets the wooden wheel on a slope at the hill top and let it roll down. The other boy is to quickly place himself at where he guesses the rolling wood would stop. Your program is to help him make the right guess.\r", "\r", "More formally, we consider the wooden wheel as a simple convex polygon and we approximate the hill by a sequence of connected line segments with decreasing slopes. The slope of the last segment in the sequence is assumed to be zero, and the slope of the first segment is assumed to be a positive number. Initially, the wheel is placed on the hill such that there is at least one point of contact between the wheel and segments. For example in the following figure, the wheel in its initial position is drawn in solid lines, while the final position is drawn in dashed lines.\r", "\r", "At any instant, the wheel rotates around one of its vertices, say P, if the y-coordinate of its center of gravity is decreased (note that this condition is necessary at any instant during the motion). It can be easily shown that at any instant, there is at most one such vertex. Rotation around P is stopped when the wheel touches a segment. The motion continues until no vertex can be found such that the wheel can rotate around it. At any instant, assume that changing the position of the center of gravity in any direction for at most 10-5 units, does not affect the stability of the wheel. Also assume that the friction between the wheel and the surface of the hill is so high that the wheel never slides on the surface."], "Input": ["The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. In the first line of each test case there is an integer n (1 <= n <= 10), that indicates the number of the wheel vertices. In each of the next n lines, there is a pair of numbers which are x and y coordinates of the initial position of a vertex. After this, there is a single line containing the initial x and y coordinates of the center of gravity of the wheel. You can assume that the center of gravity is inside or on the boundary of the polygon (note that the given center of gravity is not necessarily computable from wheel's geometric shape). Next lines of the test data will describe the shape of the hill. The surface of the hill is approximated with a series of line segments with decreasing slopes ending with a horizontal line segment. For each segment, there is a line containing length and slope of a segment (both of them are real numbers). The lines are ordered in decreasing slope (The last line of this part of the input has slope zero). You can assume that the last (horizontal) line is long enough that the wheel would not pass its end. In the last line of the test case, there is a line containing the x and y coordinates of the right end-point of the first segment. All coordinates and slopes are real numbers."], "OutPut": ["For each test case, there should be a single line in the output , containing two numbers which are x and y coordinates of the wheel's center of gravity. Round the numbers in the output to 3 digits after decimal point."], "SampleInput": ["1\r\n4\r\n40 30\r\n30 37\r\n24 30\r\n30 26\r\n27 29\r\n30 1\r\n100 0\r\n40 30\r\n"], "SampleOutput": ["28.854 20.031"], "Hint": [], "Source": []},
{"Title": ["The Bermuda Triangle"], "TimeLimit": [" 2000MS"], "MemoryLimit": [" 32768K"], "TotalSubmissions": [" 1758"], "Accepted": [" 808"], "Description": ["People in the hidden region of the Bermuda Triangle make everything they need in triangular shapes. One day, someone decided to break the rule and bake a hexagonally shaped cake. But as usual, he has to serve the cake in triangular pieces. The pieces are equilateral triangles but in different sizes for different people. He can use as many triangles as needed to cut the cake into pieces, such that nothing remains from the cake. For example, the following figure shows one way that a hexagon with side 9 can be cut into triangles with side 2 and 3. (The cake is cut along the thick lines, thin lines are drawn to show the sizes).\r", "\r", "Input is a hexagon and triangle types (specified by the length of their sides) and the goal is to decide if the hexagon can be completely divided by the given triangle types."], "Input": ["The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. Each test case consists of a single line, containing s (1 <= s <= 25), the length of the hexagon's side, followed by n, the number of triangle types (1 <= n <= 10), followed by n integers representing the length of each triangle type's side (between 1 and 25, inclusive)."], "OutPut": ["There should be one output line per test case containing either YES or NO depending on whether the hexagon can be completely divided by the given triangle types."], "SampleInput": ["3\r\n5 2 2 3\r\n7 2 3 2\r\n13 2 2 3\r\n"], "SampleOutput": ["NO\r\nNO\r\nYES\r\n"], "Hint": [], "Source": []},
{"Title": ["Parencodings"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 31373"], "Accepted": [" 18490"], "Description": ["Let S = s1 s2...s2n  be a well-formed string of parentheses. S can be encoded in two different ways:\r", "q\tBy an integer sequence P = p1 p2...pn where pi is the number of left parentheses before the ith right parenthesis in S (P-sequence).\r", "q\tBy an integer sequence W = w1 w2...wn where for each right parenthesis, say a in S, we associate an integer which is the number of right parentheses counting from the matched left parenthesis of a up to a. (W-sequence).\r", "\r", "Following is an example of the above encodings:\r", "\r", "Write a program to convert P-sequence of a well-formed string to the W-sequence of the same string.\r"], "Input": ["The first line of the input contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case is an integer n (1 <= n <= 20), and the second line is the P-sequence of a well-formed string. It contains n positive integers, separated with blanks, representing the P-sequence."], "OutPut": ["The output file consists of exactly t lines corresponding to test cases. For each test case, the output line should contain n integers describing the W-sequence of the string corresponding to its given P-sequence."], "SampleInput": ["2\r\n6\r\n4 5 6 6 6 6\r\n9 \r\n4 6 6 6 6 8 9 9 9\r\n"], "SampleOutput": ["1 1 1 4 5 6\r\n1 1 2 4 5 1 1 3 9"], "Hint": [], "Source": []},
{"Title": ["取石子游戏"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 53074"], "Accepted": [" 18196"], "Description": ["有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。"], "Input": ["输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。"], "OutPut": ["输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。"], "SampleInput": ["2 1\r\n8 4\r\n4 7"], "SampleOutput": ["0\r\n1\r\n0"], "Hint": [], "Source": []},
{"Title": ["Treasure Hunt"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 10193"], "Accepted": [" 4165"], "Description": ["Archeologists from the Antiquities and Curios Museum (ACM) have flown to Egypt to examine the great pyramid of Key-Ops. Using state-of-the-art technology they are able to determine that the lower floor of the pyramid is constructed from a series of straightline walls, which intersect to form numerous enclosed chambers. Currently, no doors exist to allow access to any chamber. This state-of-the-art technology has also pinpointed the location of the treasure room. What these dedicated (and greedy) archeologists want to do is blast doors through the walls to get to the treasure room. However, to minimize the damage to the artwork in the intervening chambers (and stay under their government grant for dynamite) they want to blast through the minimum number of doors. For structural integrity purposes, doors should only be blasted at the midpoint of the wall of the room being entered. You are to write a program which determines this minimum number of doors. \r", "An example is shown below: \r"], "Input": ["The input will consist of one case. The first line will be an integer n (0  <= n <= 30) specifying number of interior walls, followed by n lines containing integer endpoints of each wall x1 y1 x2 y2 . The 4 enclosing walls of the pyramid have fixed endpoints at (0,0); (0,100); (100,100) and (100,0) and are not included in the list of walls. The interior walls always span from one exterior wall to another exterior wall and are arranged such that no more than two walls intersect at any point. You may assume that no two given walls coincide. After the listing of the interior walls there will be one final line containing the floating point coordinates of the treasure in the treasure room (guaranteed not to lie on a wall). "], "OutPut": ["Print a single line listing the minimum number of doors which need to be created, in the format shown below. "], "SampleInput": ["7 \r\n20 0 37 100 \r\n40 0 76 100 \r\n85 0 0 75 \r\n100 90 0 90 \r\n0 71 100 61 \r\n0 14 100 38 \r\n100 47 47 100 \r\n54.5 55.4 "], "SampleOutput": ["Number of doors = 2 "], "Hint": [], "Source": []},
{"Title": ["Wooden Sticks"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 31068"], "Accepted": [" 13418"], "Description": ["There is a pile of  n  wooden sticks. The length and weight of each stick are known in advance. The sticks are to be processed by a woodworking machine in one by one fashion. It needs some time, called setup time, for the  machine  to  prepare  processing  a  stick.  The  setup  times  are  associated  with  cleaning  operations  and changing tools and shapes in the machine. The setup times of the woodworking machine are given as follows: \r", " (a) The setup time for the first wooden stick is 1 minute. \r", " (b) Right after processing a stick of length  l  and weight  w , the machine will need no setup time for a stick of length  l'  and weight  w'  if l <= l' and  w <= w'. Otherwise, it will need 1 minute for setup. \r", "You are to find the minimum setup time to process a given pile of  n  wooden sticks. For example, if you have five sticks whose pairs of length and weight are  ( 9 , 4 ) ,  ( 2 , 5 ) ,  ( 1 , 2 ) ,  ( 5 , 3 ) , and  ( 4 , 1 ) , then the minimum setup time should be 2 minutes since there is a sequence of pairs  ( 4 , 1 ) ,  ( 5 , 3 ) ,  ( 9 , 4 ) ,  ( 1 , 2 ) ,  ( 2 , 5 ) . "], "Input": ["The input consists of T  test cases. The number of test cases  (T)  is given in the first line of the input file. Each test  case  consists  of  two  lines: The  first  line  has  an  integer  n ,  1 <= n <= 5000 ,  that  represents  the  number  of wooden  sticks  in  the  test case, and  the  second  line  contains  2n  positive  integers  l1 ,  w1 ,  l2 ,  w2 ,..., ln ,  wn , each  of  magnitude  at  most 10000 ,  where  li  and  wi  are  the  length  and  weight  of  the  i th  wooden  stick, respectively. The  2n  integers are delimited by one or more spaces. "], "OutPut": ["The output should contain the minimum setup time in minutes, one per line. "], "SampleInput": ["3 \r\n5 \r\n4 9 5 2 2 1 3 5 1 4 \r\n3 \r\n2 2 1 1 2 2 \r\n3 \r\n1 3 2 2 3 1 \r\n"], "SampleOutput": ["2\r\n1\r\n3"], "Hint": [], "Source": []},
{"Title": ["Cable master"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 98971"], "Accepted": [" 20138"], "Description": ["Inhabitants of the Wonderland have decided to hold a regional programming contest. The Judging Committee has volunteered and has promised to organize the most honest contest ever. It was decided to connect computers for the contestants using a \"star\" topology - i.e. connect them all to a single central hub. To organize a truly honest contest, the Head of the Judging Committee has decreed to place all contestants evenly around the hub on an equal distance from it.\r", "To buy network cables, the Judging Committee has contacted a local network solutions provider with a request to sell for them a specified number of cables with equal lengths. The Judging Committee wants the cables to be as long as possible to sit contestants as far from each other as possible.\r", "The Cable Master of the company was assigned to the task. He knows the length of each cable in the stock up to a centimeter,and he can cut them with a centimeter precision being told the length of the pieces he must cut. However, this time, the length is not known and the Cable Master is completely puzzled.\r", "You are to help the Cable Master, by writing a program that will determine the maximal possible length of a cable piece that can be cut from the cables in the stock, to get the specified number of pieces."], "Input": ["The first line of the input file contains two integer numb ers N and K, separated by a space. N (1 = N = 10000) is the number of cables in the stock, and K (1 = K = 10000) is the number of requested pieces. The first line is followed by N lines with one number per line, that specify the length of each cable in the stock in meters. All cables are at least 1 meter and at most 100 kilometers in length. All lengths in the input file are written with a centimeter precision, with exactly two digits after a decimal point."], "OutPut": ["Write to the output file the maximal length (in meters) of the pieces that Cable Master may cut from the cables in the stock to get the requested number of pieces. The number must be written with a centimeter precision, with exactly two digits after a decimal point.\r", "If it is not possible to cut the requested number of pieces each one being at least one centimeter long, then the output file must contain the single number \"0.00\" (without quotes)."], "SampleInput": ["4 11\r\n8.02\r\n7.43\r\n4.57\r\n5.39"], "SampleOutput": ["2.00"], "Hint": [], "Source": []},
{"Title": ["Flip and Shift"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 8373"], "Accepted": [" 3832"], "Description": ["This puzzle consists of a random sequence of m black disks and n white disks on an oval-shaped track, with a turnstile capable of flipping (i.e., reversing) three consecutive disks. In Figure 1, there are 8 black disks and 10 white disks on the track. You may spin the turnstile to flip the three disks in it or shift one position clockwise for each of  the disks on the track (Figure 1).  \r", "\r", "The goal of  this puzzle  is  to gather  the disks of  the  same color  in adjacent positions using  flips and  shifts. (Figure 2) \r", "\r", "You  are  to write  a  program which  decides whether  a  given  sequence  can  reach  a  goal  or  not.  If  a  goal  is reachable, then write a message \"YES\"; otherwise, write a message \"NO\". "], "Input": ["The input consists of T  test cases. The number of test cases  ) (T  is given in the first line of the input file. Each of the next T  lines gives a test case. A test case consists of an integer, representing the sum of m and n, and a sequence of m+n  0s and 1s, representing an initial sequence. A 0 denotes a white disk and a 1 denotes a black disk. The sum of m and n is at least 10 and does not exceed  30. There is a space between numbers. "], "OutPut": ["The output should print  either \"YES\" or \"NO\" for each test case, one per line.  "], "SampleInput": ["2 \r\n18 0 0 1 0 1 1 1 1 0 1 0 0 1 0 0 0 0 1 \r\n14 1 1 0 0 1 1 1 0 0 1 1 0 1 0 \r\n"], "SampleOutput": ["YES\r\nNO"], "Hint": [], "Source": []},
{"Title": ["昂贵的聘礼"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 70853"], "Accepted": [" 22045"], "Description": ["年轻的探险家来到了一个印第安部落里。在那里他和酋长的女儿相爱了，于是便向酋长去求亲。酋长要他用10000个金币作为聘礼才答应把女儿嫁给他。探险家拿不出这么多金币，便请求酋长降低要求。酋长说：\"嗯，如果你能够替我弄到大祭司的皮袄，我可以只要8000金币。如果你能够弄来他的水晶球，那么只要5000金币就行了。\"探险家就跑到大祭司那里，向他要求皮袄或水晶球，大祭司要他用金币来换，或者替他弄来其他的东西，他可以降低价格。探险家于是又跑到其他地方，其他人也提出了类似的要求，或者直接用金币换，或者找到其他东西就可以降低价格。不过探险家没必要用多样东西去换一样东西，因为不会得到更低的价格。探险家现在很需要你的帮忙，让他用最少的金币娶到自己的心上人。另外他要告诉你的是，在这个部落里，等级观念十分森严。地位差距超过一定限制的两个人之间不会进行任何形式的直接接触，包括交易。他是一个外来人，所以可以不受这些限制。但是如果他和某个地位较低的人进行了交易，地位较高的的人不会再和他交易，他们认为这样等于是间接接触，反过来也一样。因此你需要在考虑所有的情况以后给他提供一个最好的方案。\r", "为了方便起见，我们把所有的物品从1开始进行编号，酋长的允诺也看作一个物品，并且编号总是1。每个物品都有对应的价格P，主人的地位等级L，以及一系列的替代品Ti和该替代品所对应的\"优惠\"Vi。如果两人地位等级差距超过了M，就不能\"间接交易\"。你必须根据这些数据来计算出探险家最少需要多少金币才能娶到酋长的女儿。\r"], "Input": ["输入第一行是两个整数M，N（1 <= N <= 100），依次表示地位等级差距限制和物品的总数。接下来按照编号从小到大依次给出了N个物品的描述。每个物品的描述开头是三个非负整数P、L、X（X < N），依次表示该物品的价格、主人的地位等级和替代品总数。接下来X行每行包括两个整数T和V，分别表示替代品的编号和\"优惠价格\"。"], "OutPut": ["输出最少需要的金币数。"], "SampleInput": ["1 4\r\n10000 3 2\r\n2 8000\r\n3 5000\r\n1000 2 1\r\n4 200\r\n3000 2 1\r\n4 200\r\n50 2 0\r\n"], "SampleOutput": ["5250"], "Hint": [], "Source": []},
{"Title": ["青蛙的约会"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 153440"], "Accepted": [" 36284"], "Description": ["两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。\r", "我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。\r"], "Input": ["输入只包括一行5个整数x，y，m，n，L，其中x≠y < 2000000000，0 < m、n < 2000000000，0 < L < 2100000000。"], "OutPut": ["输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行\"Impossible\""], "SampleInput": ["1 2 3 4 5"], "SampleOutput": ["4"], "Hint": [], "Source": []},
{"Title": ["Modular multiplication of polynomials"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 5341"], "Accepted": [" 2454"], "Description": ["Consider polynomials whose coefficients are 0 and 1. Addition of two polynomials is achieved by 'adding' the coefficients  for  the  corresponding  powers  in  the polynomials. The  addition  of  coefficients  is  performed  by addition modulo 2, i.e., (0 + 0) mod 2 = 0, (0 + 1) mod 2 = 1, (1 + 0) mod 2 = 1, and (1 + 1) mod 2 = 0. Hence, it is the same as the exclusive-or operation. \r", "\r", "(x^6 + x^4 + x^2 + x + 1) + (x^7 + x + 1) = x^7 + x^6 + x^4 + x^2  \r", "\r", "Subtraction of two polynomials is done similarly. Since subtraction of coefficients is performed by subtraction modulo  2  which  is  also  the  exclusive-or  operation,  subtraction  of  polynomials  is  identical  to  addition  of polynomials. \r", " \r", "  (x^6 + x^4 + x^2 + x + 1) - (x^7 + x + 1) = x^7 + x^6 + x^4 + x^2  \r", " \r", "Multiplication of two polynomials is done in the usual way (of course, addition of coefficients is performed by addition modulo 2). \r", " \r", "(x^6 + x^4 + x^2 + x + 1) (x^7 + x + 1)  =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 \r", " \r", "Multiplication of two polynomials f(x) and g(x) modulo a polynomial h(x) is the remainder of f(x)g(x) divided by h(x). \r", " \r", "(x^6 + x^4 + x^2 + x + 1) (x^7 + x + 1) modulo (x^8 + x^4 + x^3 + x + 1) =  x^7 + x^6 + 1 \r", "The largest exponent of a polynomial is called its degree. For example, the degree of x^7 + x^6 + 1 is 7. \r", " \r", "Given three polynomials f(x), g(x), and h(x), you are to write a program that computes f(x)g(x) modulo h(x). \r", "We assume that the degrees of both f(x) and g(x) are less than the degree of h(x).  The degree of a polynomial is less than 1000. \r", " \r", "Since  coefficients  of  a  polynomial  are  0  or  1,  a  polynomial  can  be  represented  by  d+1  and  a  bit  string  of length  d+1,  where  d  is  the  degree  of  the  polynomial  and  the  bit  string  represents  the  coefficients  of  the polynomial. For example, x^7 + x^6 + 1 can be represented by 8 1 1 0 0 0 0 0 1. "], "Input": ["The input consists of T test cases.  The number of test cases (T) is given in the first line of the input file. Each test  case  consists  of  three  lines  that  contain  three  polynomials  f(x),  g(x),  and  h(x),  one  per  line.  Each polynomial is represented as described above.  "], "OutPut": ["The output should contain the polynomial f(x)g(x) modulo h(x), one per line."], "SampleInput": ["2 \r\n7 1 0 1 0 1 1 1 \r\n8 1 0 0 0 0 0 1 1 \r\n9 1 0 0 0 1 1 0 1 1 \r\n10 1 1 0 1 0 0 1 0 0 1 \r\n12 1 1 0 1 0 0 1 1 0 0 1 0 \r\n15 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1"], "SampleOutput": ["8 1 1 0 0 0 0 0 1 \r\n14 1 1 0 1 1 0 0 1 1 1 0 1 0 0 "], "Hint": [], "Source": []},
{"Title": ["Chutes and Ladders"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 46449"], "Accepted": [" 1087"], "Description": ["A popular board game for children is called \"Chutes and Ladders\".  The board has squares which are numbered from 1 to 100, and players have counters which start on the theoretical square 0.  The players take turns at throwing a die with the numbers 1 to 6 on it, and each moves his or her counter forward the number of squares corresponding to the number on the die (the square they reach is found by adding the die number to the square number their counter is on).  The first person to reach square 100 is the winner.  \r", "The interest is caused by the fact that pairs of squares are connected together by \"ladders\" (which connect a lower-numbered square to a higher-numbered square) and \"chutes\" (which run from high to low).  If a counter lands on the start of a chute or ladder (i.e., this is the square reached after throwing the die), then the counter is moved to the corresponding square at the end of the chute or ladder.  Note that landing on the end square of a ladder or a chute has no effect, only the start square counts.  Furthermore, there are some squares such that if a player's counter lands on them, then the player must either miss the next turn, or immediately throw the die again for another turn, depending on what is written on the board.  A miss-a-turn or extra-turn square is never the start or end of a ladder or chute.  If a player is on square 95 or higher, then a die throw which takes them past 100 must be ignored - thus a player on square 99 must ignore all throws which are not 1.  \r"], "Input": ["Input  will start with a set of less than 1000 die throws which you must use for all games, starting each new game with the first player \"throwing\" the first number in the set, the next player \"throwing\" the second number, and so on.  This set of die throws will simply be a list of random numbers between 1 and 6, separated by single spaces, with not more than 80 characters on each line.  It will be terminated by the number 0.  After this set of die throws, there will be one or more game sets.  Each game set is in three parts.  The first part is a line containing a single number giving the number of players in the game.  This will be more than 1 and less than 6.  Then the board is described, in two parts. The first part lists the ladders and the chutes on the board, each ladder or chute being defined on a single line.  Each is given by two numbers, from 1 to 99,separated by one or more spaces.  The first number gives the start square, and the second number gives the end square; so it is a ladder if the first number is less than the second number, and a chute if the order is the other way.  The chute/ladder definitions are terminated by a line containing two 0's.  The second part of the board description gives the lose-a-turn/extra-turn squares, if there are any.  These are single numbers, one per line, defining the squares.  If the number is negative, its positive counterpart is a lose-a-turn square; if positive, it represents an extra-turn square.  (For example, -16 means that square 16 on the board is a lose-a-turn square, while a 25 means that players landing on square 25 must immediately roll again.)   The end of this set of descriptions, and of the game description, is given by a single 0.  The end of all the game descriptions is given by a game with the number of players equal to 0."], "OutPut": ["Output must be one line for each game in the input, giving the number of the player who wins the game.  Every game will determine a winner in fewer throws than those given at the start of the data."], "SampleInput": ["3 6 3 2 5 1 3 4 2 3 1 2 0\r\n2\r\n6 95\r\n99 1\r\n0 0\r\n-3\r\n98\r\n0\r\n2\r\n3 99\r\n6 90\r\n0 0\r\n0\r\n0\r\n"], "SampleOutput": ["2\r\n2"], "Hint": [], "Source": []},
{"Title": ["The Gourmet Club"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 1942"], "Accepted": [" 573"], "Description": ["The gourmet club of ACM City has 16 members. They contracted the proprietor of the local French restaurant Chateau Java to arrange dinner parties for 5 consecutive evenings. They asked to be seated around 4 tables, 4 persons per table. They also stipulated that during the 5 evenings, every member of the club will share a table exactly once with each member of the club. Mr. I.B. Emm, the restaurateur, assigned his Maitre D' the task of scheduling the seating for the 5 evenings. On the first evening, the Maitre D' seated the members as they arrived and recorded their seating. Each subsequent evening, he carefully planned the seating to match the requirement that no member will be dining twice with some other member.  Unfortunately, the Maitre D' disappeared on the morning of the fourth evening. Mr. Emm was left only with his notes which included the recorded seating arrangements during the previous 3 evenings. As he was trying to schedule the seating for the remaining evenings, it dawned on him that this task may not be that easy. He is asking for your help to try and see whether the remaining two evenings can be scheduled.  The following is a sample of the Maitre D's seating arrangements during the first 3 evenings:\r", "\r", "ABCD\tEFGH\tIJKL\tMNOP\r", "AEIM\tBFJN\tCGKO\tDHLP\r", "AFKP\tBGLM\tCHIN\tDEJO\r", "\r", "The members of the gourmet club were identified by the letters A,B,C,...,P.  \r", "Each line represents one evening of seating with each set of four letters a single table. Thus on the first evening A dines with B, C and D etc.   Write a program that will read from the input the seating arrangement of the first three evenings and will either complete the schedule or determine that the Maitre D' screwed up.\r"], "Input": ["Each data set will be 3 lines. Each line will consist of four blocks, each 4 letters long. All letters will be in upper case. Blocks will be separated by \"white space\". Data sets will be separated by blank lines."], "OutPut": ["For a successful schedule, echo the input and add two lines showing the successful schedule. If it is not possible to complete the schedule, do not echo the input, but print \"It is not possible to complete this schedule.\"  Separate output for each data set with a blank line."], "SampleInput": ["ABCD EFGH IJKL MNOP\r\nAEIM BFJN CGKO DHLP\r\nAFKP BGLM CHIN DEJO\r\n"], "SampleOutput": ["It is not possible to complete this schedule."], "Hint": ["If there are several solutions ,any one is ok."], "Source": ["Pacific Northwest 1998"]},
{"Title": ["FILE MAPPING"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3001"], "Accepted": [" 1378"], "Description": ["It is often helpful for computer users to see a visual representation of the file structure on their computers.  The \"explorer\" in Microsoft Windows is an example of such a system.  Before the days of graphical user interfaces, however, such visual representations were not possible.  The best that could be done was to show a static \"map\"of directories and files, using indentation as a guide to directory contents.  For example:\r", "\r", "This shows that the root directory contains two files and three subdirectories.  The first subdirectory contains 3 files, the second is empty and the third contains one file."], "Input": ["Write a program that reads a series of data sets representing a computer file structure.   A data set ends with a line containing a single *, and the end of valid data is denoted by a line containing a single #.  The data set contains a series of file and directory names.  (The root directory is assumed to be the starting point.) The end of a directory is denoted by a ']'  Directory names begin with a lower case 'd' and file names begin with a lower case 'f'  File names may or may not have an extension (such as fmyfile.dat or fmyfile).  File and directory names may not contain spaces. "], "OutPut": ["Note that the contents of any directory should list any subdirectories first, followed by files, if any.  All files should be in alphabetical order within each directory.  Note that each data set output is marked by the label \"DATA SET x:\" where x denotes the number of the set, beginning at 1.  Note also the blank line between the output data sets.  Each level of indentation should show a '|' followed by 5 spaces.\r"], "SampleInput": ["file1\r\nfile2\r\ndir3\r\ndir2\r\nfile1\r\nfile2\r\n]\r\n]\r\nfile4\r\ndir1\r\n]\r\nfile3\r\n*\r\nfile2\r\nfile1\r\n*\r\n#\r\n"], "SampleOutput": ["DATA SET 1:\r\nROOT\r\n|     dir3\r\n|     |     dir2\r\n|     |     file1\r\n|     |     file2\r\n|     dir1\r\nfile1\r\nfile2\r\nfile3\r\nfile4\r\n\r\nDATA SET 2:\r\nROOT\r\nfile1\r\nfile2"], "Hint": [], "Source": []},
{"Title": ["IMMEDIATE DECODABILITY"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 17281"], "Accepted": [" 7895"], "Description": ["An encoding of a set of symbols is said to be immediately decodable if no code for one symbol is the prefix of a code for another symbol.  We will assume for this problem that all codes are in binary, that no two codes within a set of codes are the same, that each code has at least one bit and no more than ten bits, and that each set has at least two codes and no more than eight.\r", "\r", "Examples:  Assume an alphabet that has symbols {A, B, C, D}\r", "\r", "The following code is immediately decodable:\r", "     A:01   B:10   C:0010   D:0000\r", "\r", "but this one is not:\r", "     A:01   B:10   C:010   D:0000    (Note that A is a prefix of C)\r"], "Input": ["Write a program that accepts as input a series of groups of records from standard input.  Each record in a group contains a collection of zeroes and ones representing a binary code for a different symbol.  Each group is followed by a single separator record containing a single 9; the separator records are not part of the group. Each group is independent of other groups; the codes in one group are not related to codes in any other group (that is, each group is to be processed independently). "], "OutPut": [" For each group, your program should determine whether the codes in that group are immediately decodable, and should print a single output line giving the group number and stating whether the group is, or is not, immediately decodable."], "SampleInput": ["01\r\n10\r\n0010\r\n0000\r\n9\r\n01\r\n10\r\n010\r\n0000\r\n9\r\n"], "SampleOutput": ["Set 1 is immediately decodable\r\nSet 2 is not immediately decodable\r\n \r\n"], "Hint": [], "Source": []},
{"Title": ["BULK MAILING"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1201"], "Accepted": [" 350"], "Description": ["An organization that wishes to make a large mailing can save postage by following U.S. Postal Service rules for a bulk mailing. Letters in zip code order are bundled into packets of 10-15 letters each.  Bundles may consist of letters in which all 5 digits of zip code are the same (5-digit bundles), or they may consist of letters in which only the first 3 digits of zip code are the same (3-digit bundles).  If there are fewer than 10 letters to make up a bundle of either type, those letters are mailed first class.\r"], "Input": ["You are to write a program to read a data set of 5-digit zip codes, one per line, until end of input.  Your program should count the number of 5-digit bundles, 3-digit bundles, and first class letters.  You should include as many letters as possible in 5-digit bundles first, then as many as possible in 3-digit bundles, with as few bundles of 10 to 15 letters as possible. For example, if there are 31 letters with the same zip code, they must be combined into exactly three 5-digit bundles.  \r", "Not all zip codes in the data set will be valid.  A valid zip code consists of exactly 5 digits (0-9), all of which cannot be 0.  Non-numeric characters are not allowed.  At the end of your output, print the invalid zip codes found.  (Duplicates need only be printed once.)"], "OutPut": ["Print a report that lists 5-digit zip code bundles first, with the number of letters and number of bundles for each zip code.  Next list all 3-digit zip code bundles with the same two counts, followed \r", "by all zip codes that are not bundled and to be sent first class.  At the end print totals of letters and bundles, followed by the number of invalid zip codes and a list of these.  Single space the report, and print blank lines following the heading, before the total line, and between the three groups of zip codes.  For 3-digit bundles, print the zip codes in the form dddxx, where ddd represents the three significant digits and xx represents the last two digits to be omitted. Your output should be similar to that shown in the sample.\r"], "SampleInput": ["95864\r\n95864\r\n95864\r\n95867\r\n95920\r\n9j876\r\n95616                 \r\n95616                 \r\n95747                 \r\n95814                 \r\n95818                 \r\n95818                 \r\n8976\r\n95818                 \r\n95818\r\n95819                 \r\n95819                 \r\n00000\r\n95819                 \r\n95819                 \r\n95819\r\n95819                 \r\n95819                 \r\n95825\r\n95825\r\n95825\r\n95825\r\n95825\r\n95826\r\n95826\r\n95826\r\n95826\r\n95826\r\n95826\r\n95827\r\n8976\r\n95833\r\n95833\r\n95833\r\n95833\r\n95819                 \r\n95819\r\n95819\r\n95819\r\n95833\r\n95833\r\n95833\r\n95864\r\n95864\r\n95864\r\n123456\r\n95864\r\n95864\r\n95864\r\n95864\r\n"], "SampleOutput": ["ZIP         LETTERS     BUNDLES\r\n\r\n95819          11           1\r\n95864          10           1\r\n\r\n958xx          25           2\r\n\r\n95616           2           0\r\n95747           1           0\r\n95920           1           0\r\n\r\nTOTALS         50           4\r\n\r\nINVALID ZIP CODES\r\n\r\n9j876\r\n8976\r\n00000\r\n123456\r\n"], "Hint": ["you can copy the sample output to notpad,then you can see the real format of output."], "Source": ["Pacific Northwest 1998"]},
{"Title": ["The Troublesome Frog"], "TimeLimit": [" 5000MS"], "MemoryLimit": [" 100000K"], "TotalSubmissions": [" 15896"], "Accepted": [" 4639"], "Description": ["In Korea, the naughtiness of the cheonggaeguri, a small frog, is legendary.  This is a well-deserved reputation, because the frogs jump through your rice paddy at night, flattening rice plants.  In the morning, after noting which plants have been flattened, you want to identify the path of the frog which did the most damage.  A frog always jumps through the paddy in a straight line, with every hop the same length:\r", "\r", "Your rice paddy has plants arranged on the intersection points of a grid as shown in Figure-1, and the troublesome frogs hop completely through your paddy, starting outside the paddy on one side and ending outside the paddy on the other side as shown in Figure-2:\r", "\r", "Many frogs can jump through the paddy, hopping from rice plant to rice plant.  Every hop lands on a plant and flattens it, as in Figure-3.  Note that some plants may be landed on by more than one frog during the night.  Of course, you can not see the lines showing the paths of the frogs or any of their hops outside of your paddy ?for the situation in Figure-3, what you can see is shown in Figure-4:\r", "\r", "From Figure-4, you can reconstruct all the possible paths which the frogs may have followed across your paddy.  You are only interested in frogs which have landed on at least 3 of your rice plants in their voyage through the paddy.  Such a path is said to be a frog path.  In this case, that means that the three paths shown in Figure-3 are frog paths (there are also other possible frog paths). The vertical path down column 1 might have been a frog path with hop length 4 except there are only 2 plants flattened so we are not interested; and the diagonal path including the plants on row 2 col. 3, row 3 col. 4, and row 6 col. 7 has three flat plants but there is no regular hop length which could have spaced the hops in this way while still landing on at least 3 plants, and hence it is not a frog path.  Note also that along the line a frog path follows there may be additional flattened plants which do not need to be landed on by that path (see the plant at (2, 6) on the horizontal path across row 2 in Figure-4), and in fact some flattened plants may not be explained by any frog path at all.\r", "\r", "Your task is to write a program to determine the maximum number of landings in any single frog path (where the maximum is taken over all possible frog paths).  In Figure-4 the answer is 7, obtained from the frog path across row 6.\r"], "Input": ["Your program is to read from standard input. The first line contains two integers R and C, respectively the number of rows and columns in your rice paddy, 1 <= R,C <= 5000.  The second line contains the single integer N, the number of flattened rice plants, 3 <= N <= 5000.  Each of the remaining N lines contains two integers, the row number (1 <= row number <= R) and the column number (1 <= column number <= C) of a flattened rice plant, separated by one blank. Each flattened plant is only listed once."], "OutPut": ["Your program is to write to standard output. The output contains one line with a single integer, the number of plants flattened along a frog path which did the most damage if there exists at least one frog path, otherwise, 0."], "SampleInput": ["6 7\r\n14\r\n2 1\r\n6 6\r\n4 2\r\n2 5\r\n2 6\r\n2 7\r\n3 4\r\n6 1\r\n6 2\r\n2 3\r\n6 3\r\n6 4\r\n6 5\r\n6 7\r\n"], "SampleOutput": ["7"], "Hint": [], "Source": []},
{"Title": ["Set Me"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3539"], "Accepted": [" 1628"], "Description": ["The game of Set is played with a deck of eighty-one cards, each having the following four characteristics:\r", ".\tSymbol: diamonds, ovals, or squiggles\r", ".\tCount: 1, 2, or 3 symbols\r", ".\tColor: red, green, or purple\r", ".\tShading: outlined, filled, or striped\r", "The cards are shuffled and a tableau of twelve cards is laid out. Players then attempt to be the first to identify \"sets\" which exist in the tableau. Sets are removed as they are identified and new cards are dealt in their place. Play continues in this manner until all cards have been used. The winner is the player with the most sets.\r", "A set is a collection of three cards in which each characteristic is either the same on all three cards or different on all three cards. For example, the cards shown below form a set.\r", "\r", "To see how the cards above form a set, take each characteristic in turn. First, each card has different symbol: the first card has squiggles, the second diamonds, and the third ovals. Second, each card has the same count of symbols, three. Third each card has a different color, and finally, each card has a different shading. Thus, each characteristic is either the same on all three cards or different on all three cards, satisfying the requirement for a set.\r", "Consider the following example of three cards which do not form a set.\r", "\r", "Again, take each characteristic in turn. Each card has a different symbol, each card has a different count of symbols, and each card is the same color. So far this satisfies the requirements for a set. When the shading characteristic is considered, however, two cards are filled and one card is striped. Thus, the shading on all three cards is neither all the same nor all different, and so these cards do not form a set.\r"], "Input": ["The input for this program consists of several tableaus of cards. The tableaus are listed in the input file one card per line, with a single blank line between tableaus. The end of  the input is marked by the end of the file. Each card in a tableau is specified by four consecutive characters on the input line. The first identifies the type of symbol on the card, and will be either a \"D\", \"O\", or \"S\", for Diamond, Oval, or Squiggle, respectively. The second character will be the digit 1, 2, or 3, identifying the number of symbols on the card. The third identifes the color and will be an \"R\", \"G\", or \"P\" for Red, Green, or Purple, respectively. The final character identifes the shading and will be an \"O\", \"F\", or \"S\" for Outlined, Filled, or Striped. All characters will be in uppercase."], "OutPut": ["The output for the program is, for each tableau, a list of all possible sets which could be formed using cards in the tableau. The order in which the sets are output is not important, but your output should adhere to the format illustrated by the example below. In the event that no sets exist in a tableau, report \"*** None Found ***\"."], "SampleInput": ["S1PS\r\nD3PO\r\nS2GF\r\nO2GS\r\nO2GF\r\nO3PO\r\nS2RF\r\nS3GS\r\nD2GS\r\nO1GS\r\nO1GF\r\nS2PS\r\n\r\nO2GF\r\nO1PF\r\nD2PO\r\nD3RO\r\nS2PO\r\nO1GF\r\nO1GS\r\nD2GO\r\nS3PF\r\nS2GF\r\nD2GS\r\nS1RS\r\n"], "SampleOutput": ["CARDS:  S1PS D3PO S2GF O2GS O2GF O3PO S2RF S3GS D2GS O1GS O1GF S2PS\r\nSETS:   1.  D3PO S2RF O1GS\r\n        2.  S3GS D2GS O1GS\r\n\r\nCARDS:  O2GF O1PF D2PO D3RO S2PO O1GF O1GS D2GO S3PF S2GF D2GS S1RS\r\nSETS:   *** None Found ***\r\n"], "Hint": [], "Source": []},
{"Title": ["Plato's Blocks"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 1142"], "Accepted": [" 416"], "Description": ["Plato believed what we perceive is but a shadow of reality.  Recent archaeological excavations have uncovered evidence that this belief may have been encouraged by Plato's youthful amusement with cleverly-designed blocks.  The blocks have the curious property that, when held with any face toward a light source, they cast shadows of various letters, numbers, shapes, and patterns.  It is possible for three faces incident to a corner to correspond to three different shadow patterns.  Opposite faces, of course, cast shadows which are mirror images of one another.\r", "The blocks are formed by gluing together small cubes to form a single, connected object.  As an example, the figures below show, layer by layer, the internal structure of a block which can cast shadows of the letters \"E\", \"G\", or \"B\".\r", "\r", "Only a partial set of blocks was discovered, but the curious scientists would like to determine what combinations of shadows are possible.  Your program, the solution to this problem, will help them!  The program will input groups of shadow patterns, and for each group will report whether or not a solid can be constructed that will cast those three shadows.\r"], "Input": ["The input contains a sequence of data sets, each specifying a dimension and three shadow patterns.  The first line of a data set contains a positive integer 1 <= n <= 20 that specifies the dimensions of the input patterns.  The remainder of the data set consists of 3n lines, each containing a string of n \"X\" and \"-\" characters.  Each group of n lines represents a pattern.  Where an \"X\" appears a shadow should be cast by the final solid, and where a \"-\" appears, light should pass through.  For this problem, the input patterns may be assumed to have at least one \"X\" along each edge of the pattern.  The input is terminated by a line containing a single zero in place of a valid dimension.\r"], "OutPut": ["For each data set in the input, output the data set number and one of the following messages:\r", "\t\r", "Valid set of patterns\r", "\tImpossible combination\r", "For a set of patterns to be considered valid, it must be possible to construct, by gluing unit cubes together along their faces, a one-piece solid capable of casting the shadow of each of the input patterns.\r"], "SampleInput": ["5\r\nXXXXX\r\nX----\r\nX--XX\r\nX---X\r\nXXXXX\r\nXXXXX\r\nX----\r\nXXXXX\r\nX----\r\nXXXXX\r\nXXXXX\r\nX---X\r\nXXXX-\r\nX---X\r\nXXXXX\r\n3\r\nX--\r\n-X-\r\n--X\r\nXX-\r\nXXX\r\n-XX\r\n-XX\r\nXXX\r\nXX-\r\n0\r\n"], "SampleOutput": ["Data set 1: Valid set of patterns\r\nData set 2: Impossible combination\r\n"], "Hint": [], "Source": []},
{"Title": ["P,MTHBGWB"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 9025"], "Accepted": [" 5062"], "Description": ["Morse code represents characters as variable length sequences of dots and dashes. In practice, characters in a message are delimited by short pauses. The following table shows the Morse code sequences:\r", "\r", "Note that four dot-dash combinations are unassigned. For the purposes of this problem we will assign them as follows (these are not the assignments for actual Morse code):\r", "\r", "Thus, the message \"ACM_GREATER_NY_REGION\" is encoded as:\r", ".- -.-. -- ..-- --. .-. . .- - . .-. ..-- -. -.-- ..-- .-. . --. .. --- -.\r", "M.E. Ohaver proposed an encryption scheme based on mutilating Morse code. Her scheme replaces the pauses between letters, necessary because Morse is a variable-length encoding that is not prefix-free, with a string that identifies the number of dots and dashes in each. For example, consider the message \".--.-.--\". Without knowing where the pauses should be, this could be \"ACM\", \"ANK\", or several other possibilities. If we add length information, however, \".--.-.--242\", then the code is unabiguous. \r", "Ohaver's scheme has three steps, the same for encryption and decryption:\r", "1.\tConvert the text to Morse code without pauses but with a string of numbers to indicate code lengths\r", "2.\tReverse the string of numbers\r", "3.\tConvert the dots and dashes back into to text using the reversed string of numbers as code lengths\r", "As an example, consider the encrypted message \"AKADTOF_IBOETATUK_IJN\". Converting to Morse code with a length string yields \".--.-.--..----..-...--..-...---.-.--..--.-..--...----.232313442431121334242\". Reversing the numbers and decoding yields the original message \"ACM_GREATER_NY_REGION\".\r"], "Input": ["This problem requires that you implement Ohaver's encoding algorithm. The input will consist of several messages encoded with Ohaver's algorithm. The first line of the input is an integer n that specifies the number of test cases. The following n lines contain one message per line. Each message will use only the twenty-six capital letters, underscores, commas, periods, and question marks. Messages will not exceed 100 characters in length."], "OutPut": ["For each message in the input, output the line number starting in column one, a colon, a space, and then the decoded message. The output format must be adhered to precisely."], "SampleInput": ["5\r\nAKADTOF_IBOETATUK_IJN\r\nPUEL\r\nQEWOISE.EIVCAEFNRXTBELYTGD.\r\n?EJHUT.TSMYGW?EJHOT\r\nDSU.XFNCJEVE.OE_UJDXNO_YHU?VIDWDHPDJIKXZT?E\r\n"], "SampleOutput": ["1: ACM_GREATER_NY_REGION\r\n2: PERL\r\n3: QUOTH_THE_RAVEN,_NEVERMORE.\r\n4: TO_BE_OR_NOT_TO_BE?\r\n5: THE_QUICK_BROWN_FOX_JUMPS_OVER_THE_LAZY_DOG\r\n"], "Hint": [], "Source": []},
{"Title": ["To the Max"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 66551"], "Accepted": [" 35174"], "Description": ["Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1*1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle.\r", "As an example, the maximal sub-rectangle of the array:\r", "\r", " 0 -2 -7  0\r", " 9  2 -6  2\r", "-4  1 -4  1\r", "-1  8  0 -2\r", "is in the lower left corner:\r", "\r", " 9  2\r", "-4  1\r", "-1  8\r", "and has a sum of 15.\r"], "Input": ["The input consists of an N * N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N^2 integers separated by whitespace (spaces and newlines). These are the N^2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127]."], "OutPut": ["Output the sum of the maximal sub-rectangle."], "SampleInput": ["4\r\n0 -2 -7 0 9 2 -6 2\r\n-4 1 -4  1 -1\r\n\r\n8  0 -2"], "SampleOutput": ["15"], "Hint": [], "Source": []},
{"Title": ["Microprocessor Simulation"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3565"], "Accepted": [" 1048"], "Description": ["Consider a small microprocessor that has the following properties:\r", "?Each word is four bits.\r", "?Addresses are two words. The high word always comes first. That is, the high word of a two-word address will always occupy the lower word of memory.\r", "?Memory is 256 words.\r", "?There are two accumulators, A and B, each storing one word.\r", "?There are nine instruction codes. Each instruction requires at least one word to store the code that specifies the instruction. Four instructions have arguments and require an additional two words.\r", "Each 4 bit number can have the values from 0 to 15, inclusive, in base 10. We will write these using hexadecimal in the usual way, i.e. A means 10, B means 11, etc.\r", "These are the nine instructions:\r", "\r", "The microprocessor always begins by executing the command at location 00. It executes the commands in sequence until it reaches the Stop command.\r", "The examples below show partial programs and describe their affect.\r"], "Input": ["The input will consist of several lines of exactly 256 hex characters. Each line is the contents of memory, beginning with address 00 and ending with address FF. The end of the input is indicated by a memory state that has a stop instruction (an \"8\") at address 00. The input programs will never \"fall of the end of memory\" that is, you will never execute an instruction that is located between addresses F0 and FF, inclusive."], "OutPut": ["For each memory state, you should simulate execution beginning with address 00. When the stop instruction is reached, you will dump the contents of memory to the output as a single string of 256 hex characters followed by a newline character."], "SampleInput": ["0102011311321128FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n"], "SampleOutput": ["0102011311321128FF1E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n"], "Hint": [], "Source": []},
{"Title": ["Follow My Logic"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2525"], "Accepted": [" 691"], "Description": ["For this problem you will determine the output of a logic circuit composed of one or more inputs, zero or more dual-input AND/OR gates, and one output. The input circuits are drawn with standard ASCII characters. Circuit paths are represented using horizontal and vertical lines, and junctions. Horizontal lines are represented with dash characters (ASCII code 45 decimal), vertical lines with vertical bar characters (ASCII code 124 decimal), and junctions with plus characters (ASCII code 43 decimal). Inputs are represented using the capital letters A through Z, and the output is represented by a question mark. AND and OR gates are represented as shown in the leftmost entries in the figure below, and their orientation will always be exactly as shown. The location of the gate inputs and output is shown by the middle figure below. Finally, gate inputs or its output can be inverted, represented by a lowercase \"oh\"character (ASCII code 111 decimal) at the input or output location. The figure on the right below shows a simple but complete logic circuit.\r", "\r", "\r"], "Input": ["Circuits in the input will obey the following guidelines:\r", "1.        The maximum size of the circuit picture is 100 by 100 characters.\r", "2.        A path always travels in a straight line unless altered by a junction. At a junction, the path can and will make a ninety degree turn. Two junctions will not be horizontally or vertically adjacent.\r", "3.        No paths will be \"broken\" That is, every path character is guaranteed to be adjacent on both sides to either another path character of the same type, a junction, a gate input, a gate output, a logic input, or the logic output.\r", "4.        Circuit paths do not cross or intersect other paths.\r", "5.        Gate inputs always approach horizontally from the left as shown above. Gate outputs always leave horizontally to the right as shown above.\r", "6.        Inversions may only appear immediately adjacent to a gate input or output, and will always be preceded (in the case of an input) or followed (in the case of an output) by at least one dash as shown above.\r", "The end of a logic diagram in the input is indicated by line containing only a single asterisk in the first column.  Following this are several lines which indicate the state of the inputs in the logic diagram.  Each of these lines is a string of twenty-six \"0\"(zero) or \"1\"characters, with the first position representing the state of input A, the second position representing the state of input B, etc.  Note that input values which are not actually used in the circuit may simply be ignored.  The list of input states is terminated by a line containing only a single asterisk character in the first column.\r", "Following the asterisk which terminates the list of input states is another circuit diagram followed by a list of input states, which is then followed by another circuit diagram and list of input states, and so on until the end of the file.  The file will always contain at least one circuit and one set of inputs for that circuit."], "OutPut": ["The program is to report the value of the output (0 or 1) of each logic circuit, one value per line, for each set of input values in the list which follows the circuit.  The list of outputs for each circuit should be separated by a single blank line."], "SampleInput": ["A---:\\\r\n    : )---?\r\nB---:/\r\n*\r\n00000000000000000000000000\r\n10000000000000000000000000\r\n01000000000000000000000000\r\n11000000000000000000000000\r\n*\r\nA---+\r\n    |    \r\n    +---:\\\r\n        : >o---:\\\r\n    +---:/     : )---?\r\n    |      C--o:/\r\nB---+\r\n*\r\n00000000000000000000000000\r\n11100000000000000000000000\r\n*\r\n"], "SampleOutput": ["0\r\n0\r\n0\r\n1\r\n\r\n1\r\n0\r\n"], "Hint": [], "Source": []},
{"Title": ["Round and Round We Go"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 13954"], "Accepted": [" 6506"], "Description": ["A cyclic number is an integer n digits in length which, when multiplied by any integer from 1 to n, yields a\"cycle\"of the digits of the original number. That is, if you consider the number after the last digit to \"wrap around\"back to the first digit, the sequence of digits in both numbers will be the same, though they may start at different positions.For example, the number 142857 is cyclic, as illustrated by the following table:\r", "142857\t*1\t=\t142857\r", "142857\t*2\t=\t285714\r", "142857\t*3\t=\t428571\r", "142857\t*4\t=\t571428\r", "142857\t*5\t=\t714285\r", "142857\t*6\t=\t857142\r"], "Input": ["Write a program which will determine whether or not numbers are cyclic. The input file is a list of integers from 2 to 60 digits in length. (Note that preceding zeros should not be removed, they are considered part of the number and count in determining n. Thus, \"01\"is a two-digit number, distinct from \"1\" which is a one-digit number.)"], "OutPut": ["For each input integer, write a line in the output indicating whether or not it is cyclic."], "SampleInput": ["142857\r\n142856\r\n142858\r\n01\r\n0588235294117647\r\n"], "SampleOutput": ["142857 is cyclic\r\n142856 is not cyclic\r\n142858 is not cyclic\r\n01 is not cyclic\r\n0588235294117647 is cyclic\r\n"], "Hint": [], "Source": []},
{"Title": ["Color Me Less"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 37883"], "Accepted": [" 18200"], "Description": ["A color reduction is a mapping from a set of discrete colors to a smaller one. The solution to this problem requires that you perform just such a mapping in a standard twenty-four bit RGB color space. The input consists of a target set of sixteen RGB color values, and a collection of arbitrary RGB colors to be mapped to their closest color in the target set. For our purposes, an RGB color is defined as an ordered triple (R,G,B) where each value of the triple is an integer from 0 to 255. The distance between two colors is defined as the Euclidean distance between two three-dimensional points. That is, given two colors (R1,G1,B1) and (R2,G2,B2), their distance D is given by the equation\r"], "Input": ["The input is a list of RGB colors, one color per line, specified as three integers from 0 to 255 delimited by a single space. The first sixteen colors form the target set of colors to which the remaining colors will be mapped. The input is terminated by a line containing three -1 values."], "OutPut": ["For each color to be mapped, output the color and its nearest color from the target set.\r", "\r", "If there are more than one color with the same smallest distance, please output the color given first in the color set."], "SampleInput": ["0 0 0\r\n255 255 255\r\n0 0 1\r\n1 1 1\r\n128 0 0\r\n0 128 0\r\n128 128 0\r\n0 0 128\r\n126 168 9\r\n35 86 34\r\n133 41 193\r\n128 0 128\r\n0 128 128\r\n128 128 128\r\n255 0 0\r\n0 1 0\r\n0 0 0\r\n255 255 255\r\n253 254 255\r\n77 79 134\r\n81 218 0\r\n-1 -1 -1\r\n"], "SampleOutput": ["(0,0,0) maps to (0,0,0)\r\n(255,255,255) maps to (255,255,255)\r\n(253,254,255) maps to (255,255,255)\r\n(77,79,134) maps to (128,128,128)\r\n(81,218,0) maps to (126,168,9)"], "Hint": [], "Source": []},
{"Title": ["Bode Plot"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 17335"], "Accepted": [" 10434"], "Description": ["Consider the AC circuit below. We will assume that the circuit is in steady-state. Thus, the voltage at nodes 1 and 2 are given by v", " = V", " cos", "t and v", " = V", "cos (", "t + ", " ) where V", " is the voltage of the source, ", " is the frequency (in radians per second), and t is time. V", " is the magnitude of the voltage drop across the resistor, and ", " is its phase.\r", "\r", "You are to write a program to determine V", " for different values of ", ". You will need two laws of electricity to solve this problem. The first is Ohm's Law, which states v", " = iR where i is the current in the circuit, oriented clockwise. The second is i = C d/dt (v", "-v", ") which relates the current to the voltage on either side of the capacitor. \"d/dt\"indicates the derivative with respect to t.\r"], "Input": ["The input will consist of one or more lines. The first line contains three real numbers and a non-negative integer. The real numbers are V", ", R, and C, in that order. The integer, n, is the number of test cases. The following n lines of the input will have one real number per line. Each of these numbers is the angular frequency, ", ".\r"], "OutPut": ["For each angular frequency in the input you are to output its corresponding V", " on a single line. Each V", " value output should be rounded to three digits after the decimal point."], "SampleInput": ["1.0 1.0 1.0 9\r\n0.01\r\n0.031623\r\n0.1\r\n0.31623\r\n1.0\r\n3.1623\r\n10.0\r\n31.623\r\n100.0"], "SampleOutput": ["0.010\r\n0.032\r\n0.100\r\n0.302\r\n0.707\r\n0.953\r\n0.995\r\n1.000\r\n1.000"], "Hint": [], "Source": []},
{"Title": ["Date bugs"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 7668"], "Accepted": [" 1144"], "Description": ["There are rumors that there are a lot of computers having a problem with the year 2000. As they use only two digits to represent the year, the date will suddenly turn from 1999 to 1900. In fact, there are also many other, similar problems. On some systems, a 32-bit integer is used to store the number of seconds that have elapsed since a certain fixed date. In this \r", "way, when 2^32 seconds (about 136 Years) have elapsed, the date will jump back to whatever the fixed date is. \r", "Now, what can you do about all that mess? Imagine you have two computers C1 and C  with two different bugs: One with the ordinary Y2K-Bug (i. e. switching to a1 := 1900 instead of b1 := 2000) and one switching to a2 := 1904 instead of b2 := 2040. Imagine that the C1 displays the year y1 := 1941 and C2 the year y2 := 2005. Then you know the following (assuming that there are no other bugs): the real year can't be 1941, since, then, both computers would show the (same) right date. If the year would be 2005, y1 would be 1905, so this is impossible, too. Looking only at C1 , we know that the real year is one of the following: 1941, 2041, 2141, etc. We now can calculate what C2 would display in these years: 1941, 1905, 2005, etc. So in fact, it is possible that the actual year is 2141. \r", "To calculate all this manually is a lot of work. (And you don't really want to do it each time you forgot the actual year.) So, your task is to write a program which does the calculation for you: find the first possible real year, knowing what some other computers say (yi) and knowing their bugs (switching to ai instead of bi ). Note that the year ai is definitely not after the year the computer was built. Since the actual year can't be before the year the computers were built, the year your program is looking for can't be before any ai . "], "Input": ["The input file contains several test cases, in which the actual year has to be calculated. The description of each case starts with a line containing an integer n (1 <= n <= 20), the number of computers. Then, there is one line containing three integers yi,ai,bi for each computer (0 <= ai <= yi < bi < 10000). yi is the year the computer displays, bi is the year in which the bug happens (i. e. the first year which can't be displayed by this computer) and ai is the year that the computer displays instead of bi . \r", "The input is terminated by a test case with n = 0. It should not be processed. "], "OutPut": ["For each test case, output output the line \"Case #k:\", where k is the number of the situation. Then, output the line \"The actual year is z.\", where z is the smallest possible year (satisfying all computers and being greater or equal to u). If there is no such year less than 10000, output \"Unkown bugs detected.\". Output a blank line after each case. "], "SampleInput": ["2 \r\n1941 1900 2000 \r\n2005 1904 2040 \r\n2 \r\n1998 1900 2000 \r\n1999 1900 2000 \r\n0 "], "SampleOutput": ["Case #1: \r\nThe actual year is 2141. \r\n\r\nCase #2: \r\nUnknown bugs detected. \r\n"], "Hint": [], "Source": []},
{"Title": ["What's In A Name?"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3082"], "Accepted": [" 1091"], "Description": ["The FBI is conducting a surveillance of a known criminal hideout which serves as a communication center for a number of men and women of nefarious intent. Using sophisticated decryption software and good old fashion wiretaps, they are able to decode any e-mail messages leaving the site. However, before any arrest warrants can be served, they must match actual names with the user ID's on the messages. While these criminals are evil, they're not stupid, so they use random strings of letters for \r", "their ID's (no dillingerj ID's found here). The FBI knows that each criminal uses only one ID. The only other information they have which will help them is a log of names of the people who enter and leave the hideout. In many cases, this is enough to link the names to the ID's. "], "Input": ["Input consists of one problem instance. The first line contains a single positive integer n indicating the number of criminals using the hideout. The maximum value for n will be 20. The next line contains the n user ID's, separated by single spaces. Next will be the log entries in chronological order. Each entry in the log has the form type arg , where type is either E, L or M: E indicates that criminal arg has entered the hideout; L indicates criminal arg has left the hideout; M indicates a message was intercepted from user ID arg. A line containing only the letter Q indicates the end of the log. Note that not all user ID's may be present in the log but each criminal name will be guaranteed to be in the log at least once. At the start of the log, the hideout is presumed to be empty. All names and user ID's consist of only lowercase letters and have length at most 20. Note: The line containing only the user ID's may contain more than 80 characters. "], "OutPut": ["Output consists of n lines, each containing a list of criminal names and their corresponding user ID's, if known. The list should be sorted in alphabetical order by the criminal names. Each line has the form name:userid , where name is the criminal's name and userid is either their user ID or the string ??? if their user ID could not be determined from the surveillance log. "], "SampleInput": ["7 \r\nbigman mangler sinbad fatman bigcheese frenchie capodicapo \r\nE mugsy \r\nE knuckles \r\nM bigman \r\nM mangler \r\nL mugsy \r\nE clyde \r\nE bonnie \r\nM bigman \r\nM fatman \r\nM frenchie \r\nL clyde \r\nM fatman \r\nE ugati \r\nM sinbad \r\nE moriarty \r\nE booth \r\nQ "], "SampleOutput": ["bonnie:fatman\r\nbooth:???\r\nclyde:frenchie\r\nknuckles:bigman\r\nmoriarty:???\r\nmugsy:mangler\r\nugati:sinbad"], "Hint": [], "Source": []},
{"Title": ["Gone Fishing"], "TimeLimit": [" 2000MS"], "MemoryLimit": [" 32768K"], "TotalSubmissions": [" 47136"], "Accepted": [" 15284"], "Description": ["John is going on a fishing trip. He has h hours available (1 <= h <= 16), and there are n lakes in the area (2 <= n <= 25) all reachable along a single, one-way road. John starts at lake 1, but he can finish at any lake he wants. He can only travel from one lake to the next one, but he does not have to stop at any lake unless he wishes to. For each i = 1,...,n - 1, the number of 5-minute intervals it takes to travel from lake i to lake i + 1 is denoted ti (0 < ti <=192). For example, t3 = 4 means that it takes 20 minutes to travel from lake 3 to lake 4. To help plan his fishing trip, John has gathered some information about the lakes. For each lake i, the number of fish expected to be caught in the initial 5 minutes, denoted fi( fi >= 0 ), is known. Each 5 minutes of fishing decreases the number of fish expected to be caught in the next 5-minute interval by a constant rate of di (di >= 0). If the number of fish expected to be caught in an interval is less than or equal to di , there will be no more fish left in the lake in the next interval. To simplify the planning, John assumes that no one else will be fishing at the lakes to affect the number of fish he expects to catch. \r", "Write a program to help John plan his fishing trip to maximize the number of fish expected to be caught. The number of minutes spent at each lake must be a multiple of 5. "], "Input": ["You will be given a number of cases in the input. Each case starts with a line containing n. This is followed by a line containing h. Next, there is a line of n integers specifying fi (1 <= i <=n), then a line of n integers di (1 <=i <=n), and finally, a line of n - 1 integers ti (1 <=i <=n - 1). Input is terminated by a case in which n = 0. "], "OutPut": ["For each test case, print the number of minutes spent at each lake, separated by commas, for the plan achieving the maximum number of fish expected to be caught (you should print the entire plan on one line even if it exceeds 80 characters). This is followed by a line containing the number of fish expected. \r", "If multiple plans exist, choose the one that spends as long as possible at lake 1, even if no fish are expected to be caught in some intervals. If there is still a tie, choose the one that spends as long as possible at lake 2, and so on. Insert a blank line between cases. "], "SampleInput": ["2 \r\n1 \r\n10 1 \r\n2 5 \r\n2 \r\n4 \r\n4 \r\n10 15 20 17 \r\n0 3 4 3 \r\n1 2 3 \r\n4 \r\n4 \r\n10 15 50 30 \r\n0 3 4 3 \r\n1 2 3 \r\n0 "], "SampleOutput": ["45, 5 \r\nNumber of fish expected: 31 \r\n\r\n240, 0, 0, 0 \r\nNumber of fish expected: 480 \r\n\r\n115, 10, 50, 35 \r\nNumber of fish expected: 724 \r\n"], "Hint": [], "Source": []},
{"Title": ["John's trip"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 12828"], "Accepted": [" 4388"], "Description": ["Little Johnny has got a new car. He decided to drive around the town to visit his friends. Johnny wanted to visit all his friends, but there was many of them. In each street he had one friend. He started thinking how to make his trip as short as possible. Very soon he realized that the best way to do it was to travel through each street of town only once. Naturally, he wanted to finish his trip at the same place he started, at his parents' house.\r", "\r", "The streets in Johnny's town were named by integer numbers from 1 to n, n < 1995. The junctions were independently named by integer numbers from 1 to m, m <= 44. No junction connects more than 44 streets. All junctions in the town had different numbers. Each street was connecting exactly two junctions. No two streets in the town had the same number. He immediately started to plan his round trip. If there was more than one such round trip, he would have chosen the one which, when written down as a sequence of street numbers is lexicographically the smallest. But Johnny was not able to find even one such round trip.\r", "\r", "Help Johnny and write a program which finds the desired shortest round trip. If the round trip does not exist the program should write a message. Assume that Johnny lives at the junction ending the street appears first in the input with smaller number. All streets in the town are two way. There exists a way from each street to another street in the town. The streets in the town are very narrow and there is no possibility to turn back the car once he is in the street\r"], "Input": ["Input file consists of several blocks. Each block describes one town. Each line in the block contains three integers x; y; z, where x > 0 and y > 0 are the numbers of junctions which are connected by the street number z. The end of the block is marked by the line containing x = y = 0. At the end of the input file there is an empty block, x = y = 0. "], "OutPut": ["Output one line of each block contains the sequence of street numbers (single members of the sequence are separated by space) describing Johnny's round trip. If the round trip cannot be found the corresponding output block contains the message \"Round trip does not exist.\" "], "SampleInput": ["1 2 1\r\n2 3 2\r\n3 1 6\r\n1 2 5\r\n2 3 3\r\n3 1 4\r\n0 0\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n2 4 4\r\n0 0\r\n0 0"], "SampleOutput": ["1 2 3 5 4 6 \r\nRound trip does not exist.\r\n"], "Hint": [], "Source": []},
{"Title": ["Transportation"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 6127"], "Accepted": [" 2558"], "Description": ["Ruratania is just entering capitalism and is establishing new enterprising activities in many fields in- cluding transport. The transportation company TransRuratania is starting a new express train from city A to city B with several stops in the stations on the way. The stations are successively numbered, city A station has number 0, city B station number m. The company runs an experiment in order to improve passenger transportation capacity and thus to increase its earnings. The train has a maximum capacity n passengers. The price of the train ticket is equal to the number of stops (stations) between the starting station and the destination station (including the destination station). Before the train starts its route from the city A, ticket orders are collected from all onroute stations. The ticket order from the station S means all reservations of tickets from S to a fixed destination station. In case the company cannot accept all orders because of the passenger capacity limitations, its rejection policy is that it either completely accept or completely reject single orders from single stations.\r", "\r", "Write a program which for the given list of orders from single stations on the way from A to B determines the biggest possible total earning of the TransRuratania company. The earning from one accepted order is the product of the number of passengers included in the order and the price of their train tickets. The total earning is the sum of the earnings from all accepted orders. \r", "\r"], "Input": ["The input file is divided into blocks. The first line in each block contains three integers: passenger capacity n of the train, the number of the city B station and the number of ticket orders from all stations. The next lines contain the ticket orders. Each ticket order consists of three integers: starting station, destination station, number of passengers. In one block there can be maximum 22 orders. The number of the city B station will be at most 7. The block where all three numbers in the first line are equal to zero denotes the end of the input file. "], "OutPut": ["The output file consists of lines corresponding to the blocks of the input file except the terminating block. Each such line contains the biggest possible total earning. "], "SampleInput": ["10 3 4\r\n0 2 1\r\n1 3 5\r\n1 2 7\r\n2 3 10\r\n10 5 4\r\n3 5 10\r\n2 4 9\r\n0 2 5\r\n2 5 8\r\n0 0 0\r\n"], "SampleOutput": ["19\r\n34"], "Hint": [], "Source": []},
{"Title": ["Pipe"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 14528"], "Accepted": [" 4501"], "Description": ["The GX Light Pipeline Company started to prepare bent pipes for the new transgalactic light pipeline. During the design phase of the new pipe shape the company ran into the problem of determining how far the light can reach inside each component of the pipe. Note that the material which the pipe is made from is not transparent and not light reflecting. \r", "\r", "Each pipe component consists of many straight pipes connected tightly together. For the programming purposes, the company developed the description of each component as a sequence of points [x1; y1], [x2; y2], . . ., [xn; yn], where x1 < x2 < . . . xn . These are the upper points of the pipe contour. The bottom points of the pipe contour consist of points with y-coordinate decreased by 1. To each upper point [xi; yi] there is a corresponding bottom point [xi; (yi)-1] (see picture above). The company wants to find, for each pipe component, the point with maximal x-coordinate that the light will reach. The light is emitted by a segment source with endpoints [x1; (y1)-1] and [x1; y1] (endpoints are emitting light too). Assume that the light is not bent at the pipe bent points and the bent points do not stop the light beam. "], "Input": ["The input file contains several blocks each describing one pipe component. Each block starts with the number of bent points 2 <= n <= 20 on separate line. Each of the next n lines contains a pair of real values xi, yi separated by space. The last block is denoted with n = 0. "], "OutPut": ["The output file contains lines corresponding to blocks in input file. To each block in the input file there is one line in the output file. Each such line contains either a real value, written with precision of two decimal places, or the message Through all the pipe.. The real value is the desired maximal x-coordinate of the point where the light can reach from the source for corresponding pipe component. If this value equals to xn, then the message Through all the pipe. will appear in the output file. "], "SampleInput": ["4\r\n0 1\r\n2 2\r\n4 1\r\n6 4\r\n6\r\n0 1\r\n2 -0.6\r\n5 -4.45\r\n7 -5.57\r\n12 -10.8\r\n17 -16.55\r\n0\r\n"], "SampleOutput": ["4.67\r\nThrough all the pipe."], "Hint": [], "Source": []},
{"Title": ["Bugs Integrated, Inc."], "TimeLimit": [" 15000MS"], "MemoryLimit": [" 30000K"], "TotalSubmissions": [" 11718"], "Accepted": [" 4518"], "Description": ["Bugs Integrated, Inc. is a major manufacturer of advanced memory chips. They are launching production of a new six terabyte Q-RAM chip. Each chip consists of six unit squares arranged in a form of a 2*3 rectangle. The way Q-RAM chips are made is such that one takes a rectangular plate of silicon divided into N*M unit squares. Then all squares are tested carefully and the bad ones are marked with a black marker.\r", "\r", "Finally, the plate of silicon is cut into memory chips. Each chip consists of 2*3 (or 3*2) unit squares. Of course, no chip can contain any bad (marked) squares. It might not be possible to cut the plate so that every good unit square is a part of some memory chip. The corporation wants to waste as little good squares as possible. Therefore they would like to know how to cut the plate to make the maximum number of chips possible.\r", "Task\r", "You are given the dimensions of several silicon plates and a list of all bad unit squares for each plate. Your task is to write a program that computes for each plate the maximum number of chips that can be cut out of the plate."], "Input": ["The first line of the input file consists of a single integer D (1 <= D <= 5), denoting the number of silicon plates. D blocks follow, each describing one silicon plate. The first line of each block contains three integers N (1 <= N <= 150), M (1 <= M <= 10), K (0 <= K <= MN) separated by single spaces. N is the length of the plate, M is its height and K is the number of bad squares in the plate. The following K lines contain a list of bad squares. Each line consists of two integers x and y (1 <= x <= N, 1 <= y <= M) ?coordinates of one bad square (the upper left square has coordinates [1, 1], the bottom right is [N,M])."], "OutPut": ["For each plate in the input file output a single line containing the maximum number of memory chips that can be cut out of the plate."], "SampleInput": ["2\r\n6 6 5\r\n1 4\r\n4 6\r\n2 2\r\n3 6\r\n6 4\r\n6 5 4\r\n3 3\r\n6 1\r\n6 2\r\n6 4\r\n"], "SampleOutput": ["3\r\n4"], "Hint": [], "Source": []},
{"Title": ["A decorative fence"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 9705"], "Accepted": [" 3709"], "Description": ["Richard just finished building his new house. Now the only thing the house misses is a cute little wooden fence. He had no idea how to make a wooden fence, so he decided to order one. Somehow he got his hands on the ACME Fence Catalogue 2002, the ultimate resource on cute little wooden fences. After reading its preface he already knew, what makes a little wooden fence cute.\r", "A wooden fence consists of N wooden planks, placed vertically in a row next to each other. A fence looks cute if and only if the following conditions are met:\r", "�The planks have different lengths, namely 1, 2, . . . , N plank length units.\r", "�Each plank with two neighbors is either larger than each of its neighbors or smaller than each of them. (Note that this makes the top of the fence alternately rise and fall.)\r", "It follows, that we may uniquely describe each cute fence with N planks as a permutation a1, . . . , aN of the numbers 1, . . . ,N such that (any i; 1 < i < N) (ai − ai−1)*(ai − ai+1) > 0 and vice versa, each such permutation describes a cute fence.\r", "It is obvious, that there are many dierent cute wooden fences made of N planks. To bring some order into their catalogue, the sales manager of ACME decided to order them in the following way: Fence A (represented by the permutation a1, . . . , aN) is in the catalogue before fence B (represented by b1, . . . , bN) if and only if there exists such i, that (any j < i) aj = bj and (ai < bi). (Also to decide, which of the two fences is earlier in the catalogue, take their corresponding permutations, find the first place on which they differ and compare the values on this place.) All the cute fences with N planks are numbered (starting from 1) in the order they appear in the catalogue. This number is called their catalogue number.\r", "\r", "After carefully examining all the cute little wooden fences, Richard decided to order some of them. For each of them he noted the number of its planks and its catalogue number. Later, as he met his friends, he wanted to show them the fences he ordered, but he lost the catalogue somewhere. The only thing he has got are his notes. Please help him find out, how will his fences look like."], "Input": ["The first line of the input file contains the number K (1 <= K <= 100) of input data sets. K lines follow, each of them describes one input data set. \r", "Each of the following K lines contains two integers N and C (1 <= N <= 20), separated by a space. N is the number of planks in the fence, C is the catalogue number of the fence.\r", "You may assume, that the total number of cute little wooden fences with 20 planks fits into a 64-bit signed integer variable (long long in C/C++, int64 in FreePascal). You may also assume that the input is correct, in particular that C is at least 1 and it doesn抰 exceed the number of cute fences with N planks."], "OutPut": ["For each input data set output one line, describing the C-th fence with N planks in the catalogue. More precisely, if the fence is described by the permutation a1, . . . , aN, then the corresponding line of the output file should contain the numbers ai (in the correct order), separated by single spaces."], "SampleInput": ["2\r\n2 1\r\n3 3"], "SampleOutput": ["1 2\r\n2 3 1"], "Hint": [], "Source": []},
{"Title": ["Gangsters"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 14106"], "Accepted": [" 4095"], "Description": ["N gangsters are going to a restaurant. The i-th gangster comes at the time Ti and has the prosperity Pi. The door of the restaurant has K+1 states of openness expressed by the integers in the range [0, K]. The state of openness can change by one in one unit of time; i.e. it either opens by one, closes by one or remains the same. At the initial moment of time the door is closed (state 0). The i-th gangster enters the restaurant only if the door is opened specially for him, i.e. when the state of openness coincides with his stoutness Si. If at the moment of time when the gangster comes to the restaurant the state of openness is not equal to his stoutness, then the gangster goes away and never returns.\r", "The restaurant works in the interval of time [0, T].\r", "The goal is to gather the gangsters with the maximal total prosperity in the restaurant by opening and closing the door appropriately.\r"], "Input": ["?The first line of the input file contains the values N, K, and T, separated by spaces. (1 <= N <= 100 ,1 <= K <= 100  ,0 <= T <= 30000   )\r", "?The second line of the input file contains the moments of time when gangsters come to the restaurant T1, T2, ..., TN, separated by spaces. ( 0 <= Ti <= T for  i = 1, 2, ..., N)\r", "?The third line of the input file contains the values of the prosperity of gangsters P1, P2, ..., PN, separated by spaces. ( 0 <= Pi <= 300 for  i = 1, 2, ..., N)\r", "?The forth line of the input file contains the values of the stoutness of gangsters S1, S2, ..., SN, separated by spaces. ( 1 <= Si <= K for  i = 1, 2, ..., N)\r", "All values in the input file are integers.\r"], "OutPut": ["Print to the output file the single integer ?the maximal sum of prosperity of gangsters in the restaurant. In case when no gangster can enter the restaurant the output should be 0."], "SampleInput": ["4 10 20\r\n10 16 8 16\r\n10 11 15 1\r\n10 7 1 8\r\n"], "SampleOutput": ["26"], "Hint": [], "Source": []},
{"Title": ["Spell checker"], "TimeLimit": [" 2000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 30868"], "Accepted": [" 11183"], "Description": ["You, as a member of a development team for a new spell checking program, are to write a module that will check the correctness of given words using a known dictionary of all correct words in all their forms.\r", "If the word is absent in the dictionary then it can be replaced by correct words (from the dictionary) that can be obtained by one of the following operations:\r", "?deleting of one letter from the word;\r", "?replacing of one letter in the word with an arbitrary letter;\r", "?inserting of one arbitrary letter into the word.\r", "Your task is to write the program that will find all possible replacements from the dictionary for every given word.\r"], "Input": ["The first part of the input file contains all words from the dictionary. Each word occupies its own line. This part is finished by the single character '#' on a separate line. All words are different. There will be at most 10000 words in the dictionary.\r", "The next part of the file contains all words that are to be checked. Each word occupies its own line. This part is also finished by the single character '#' on a separate line. There will be at most 50 words that are to be checked.\r", "All words in the input file (words from the dictionary and words to be checked) consist only of small alphabetic characters and each one contains 15 characters at most.\r"], "OutPut": ["Write to the output file exactly one line for every checked word in the order of their appearance in the second part of the input file. If the word is correct (i.e. it exists in the dictionary) write the message: \""], "SampleInput": ["i\r\nis\r\nhas\r\nhave\r\nbe\r\nmy\r\nmore\r\ncontest\r\nme\r\ntoo\r\nif\r\naward\r\n#\r\nme\r\naware\r\nm\r\ncontest\r\nhav\r\noo\r\nor\r\ni\r\nfi\r\nmre\r\n#"], "SampleOutput": ["me is correct\r\naware: award\r\nm: i my me\r\ncontest is correct\r\nhav: has have\r\noo: too\r\nor:\r\ni is correct\r\nfi: i\r\nmre: more me"], "Hint": [], "Source": []},
{"Title": ["The dog task"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3701"], "Accepted": [" 1489"], "Description": ["Hunter Bob often walks with his dog Ralph. Bob walks with a constant speed and his route is a polygonal line  (possibly self-intersecting) whose vertices are specified by N pairs of integers (Xi, Yi) ? their Cartesian coordinates.\r", "Ralph walks on his own way but always meets his master at the specified N points. The dog starts his journey simultaneously with Bob at the point (X1, Y1) and finishes it also simultaneously with Bob at the point (XN, YN). \r", "Ralph can travel at a speed that is up to two times greater than his master's speed. While Bob travels in a straight line from one point to another the cheerful dog seeks trees, bushes, hummocks and all other kinds of interesting places of the local landscape which are specified by M pairs of integers (Xj',Yj'). However, after leaving his master at the point (Xi, Yi) (where 1 <= i < N) the dog visits at most one interesting place before meeting his master again at the point (Xi+1, Yi+1). \r", "Your task is to find the dog's route, which meets the above requirements and allows him to visit the maximal possible number of interesting places. The answer should be presented as a polygonal line that represents Ralph's route. The vertices of this route should be all points (Xi, Yi) and the maximal number of interesting places (Xj',Yj'). The latter should be visited (i.e. listed in the route description) at most once.\r", "An example of Bob's route (solid line), a set of interesting places (dots) and one of the best Ralph's routes (dotted line) are presented in the following picture:\r"], "Input": ["The first line of the input contains two integers N and M, separated by a space ( 2 <= N <= 100 ,0 <= M <=100  ). The second line contains N pairs of integers X1, Y1, ..., XN, YN, separated by spaces, that represent Bob's route. The third line contains M pairs of integers X1',Y1',...,XM',YM', separated by spaces, that represent interesting places. \r", "All points in the input file are different and their coordinates are integers not greater than 1000 by the absolute value.\r"], "OutPut": ["The first line of the output should contain the single integer K ? the number of vertices of the best dog's route. The second line should contain K pairs of coordinates  X1'',Y1''  , ...,Xk'',Yk'', separated by spaces, that represent this route. If there are several such routes, then you may write any of them."], "SampleInput": ["4 5\r\n1 4 5 7 5 2 -2 4\r\n-4 -2 3 9 1 2 -1 3 8 -3\r\n"], "SampleOutput": ["6\r\n1 4 3 9 5 7 5 2 1 2 -2 4"], "Hint": [], "Source": []},
{"Title": ["Defragment"], "TimeLimit": [" 2000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 6065"], "Accepted": [" 2151"], "Description": ["You are taking part in the development of a \"New Generation\" operating system and the NG file system. In this file system all disk space is divided into N clusters of the equal sizes, numbered by integers from 1 to N. Each file occupies one or more clusters in arbitrary areas of the disk. All clusters that are not occupied by files are considered to be free. A file can be read from the disk in the fastest way, if all its clusters are situated in the successive disk clusters in the natural order.\r", "Rotation of the disk with constant speed implies that various amounts of time are needed for accessing its clusters. Therefore, reading of clusters located near the beginning of the disk performs faster than reading of the ones located near its ending. Thus, all files are numbered beforehand by integers from 1 to K in the order of descending frequency of access. Under the optimal placing of the files on the disk the file number 1 will occupy clusters 1, 2, ..., S1, the file number 2 will occupy clusters S1+1, S1+2, ..., S1+S2 and so on (here Si is the number of clusters which the i-th file occupies).\r", "In order to place the files on the disk in the optimal way cluster-moving operations are executed. One cluster-moving operation includes reading of one occupied cluster from the disk to the memory and writing its contents to some free cluster. After that the first of them is declared free, and the second one is declared occupied.\r", "Your goal is to place the files on the disk in the optimal way by executing the minimal possible number of cluster-moving operations.\r"], "Input": ["The first line of the input file contains two integers N and K separated by a space(1 <= K < N <= 10000).Then K lines follow, each of them describes one file. The description of the i-th file starts with the integer Si that represents the number of clusters in the i-th file (1 <= Si < N). Then Si integers follow separated by spaces, which indicate the cluster numbers of this file on the disk in the natural order.\r", "All cluster numbers in the input file are different and there is always at least one free cluster on the disk.\r"], "OutPut": ["Your program should write to the output file any sequence of cluster-moving operations that are needed in order to place the files on the disk in the optimal way. Two integers Pj and Qj separated by a single space should represent each cluster-moving operation. Pj gives the cluster number that the data should be moved FROM and Qj gives the cluster number that this data should be moved TO. \r", "The number of cluster-moving operations executed should be as small as possible. If the files on the disk are already placed in the optimal way the output should contain only the string \"No optimization needed\".\r"], "SampleInput": ["20 3\r\n4 2 3 11 12\r\n1 7\r\n3 18 5 10"], "SampleOutput": ["2 1\r\n3 2\r\n11 3\r\n12 4\r\n18 6\r\n10 8\r\n5 20\r\n7 5\r\n20 7"], "Hint": [], "Source": []},
{"Title": ["Parliament"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 20893"], "Accepted": [" 8839"], "Description": ["New convocation of The Fool Land's Parliament consists of N delegates. According to the present regulation delegates should be divided into disjoint groups of different sizes and every day each group has to send one delegate to the conciliatory committee. The composition of the conciliatory committee should be different each day. The Parliament works only while this can be accomplished. \r", "You are to write a program that will determine how many delegates should contain each group in order for Parliament to work as long as possible.\r"], "Input": ["The input file contains a single integer N (5<=N<=1000 )."], "OutPut": ["Write to the output file the sizes of groups that allow the Parliament to work for the maximal possible time. These sizes should be printed on a single line in ascending order and should be separated by spaces. "], "SampleInput": ["7"], "SampleOutput": ["3 4"], "Hint": [], "Source": []},
{"Title": ["Fence"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 4285"], "Accepted": [" 1516"], "Description": ["There is an area bounded by a fence on some flat field. The fence has the height h and in the plane projection it has a form of a closed polygonal line (without self-intersections), which is specified by Cartesian coordinates (Xi, Yi) of its N vertices. At the point with coordinates (0, 0) a lamp stands on the field. The lamp may be located either outside or inside the fence, but not on its side as it is shown in the following sample pictures (parts shown in a thin line are not illuminated by the lamp):\r", "\r", "The fence is perfectly black, i.e. it is neither reflecting, nor diffusing, nor letting the light through. Research and experiments showed that the following law expresses the intensity of light falling on an arbitrary illuminated point of this fence:\r", "\r", "where k is a known constant value not depending on the point in question, r is the distance between this point and the lamp in the plane projection. The illumination of an infinitesimal narrow vertical board with the width dl and the height h is \r", "\r", "where I", " is the intensity of light on that board of the fence, α is the angle in the plane projection between the normal to the side of the fence at this point and the direction to the lamp.\r", "You are to write a program that will find the total illumination of the fence that is defined as the sum of illuminations of all its illuminated boards.\r"], "Input": ["The first line of the input file contains the numbers k, h and N, separated by spaces. k and h are real constants. N (3 <= N <= 100) is the number of vertices of the fence. Then N lines follow, every line contains two real numbers Xi and Yi, separated by a space."], "OutPut": ["Write to the output file the total illumination of the fence rounded to the second digit after the decimal point."], "SampleInput": ["0.5 1.7 3\r\n1.0 3.0\r\n2.0 -1.0\r\n-4.0 -1.0\r\n"], "SampleOutput": ["5.34"], "Hint": [], "Source": []},
{"Title": ["Rating"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2245"], "Accepted": [" 574"], "Description": ["One of the participants of both regional contests which took place in St. Petersburg decided to determine overall rating for all teams that took part in at least one contest. \r", "This participant assigned each team a unique team identifier, which was an integer from 1 to 100 inclusively. For each contest team identifiers of the participating teams were written in a column according to their place in that contest. Identifiers of the teams that had equal results were written on the same line. The participant started with the team(s) that was(were) the best in that contest (writing them on the first line) and continued in the order of decreasing results.  \r", "Definition: Let's say that the team has place K in the contest if exactly K-1   teams performed in that contest better.\r", "Consider the following examples of two contests' results:\r", "\r", "The overall rating for the teams which took part in both contests is defined in the following way:\r", "1)\tIf some team performed better in both contests than some other team (or better in one contest and with the same result in the other contest) then the overall rating of the former team is higher than the rating of the latter team.\r", "2)\tIf one of the teams in question performed better in one contest and the other team performed better in another contest then their overall rating depends on the difference of their places in both contests. So, in our example team 1 is better than team 5 in the first contest with a difference of 3 places and worse in the second contest with a difference of only 1 place, therefore the overall rating of team 1 is higher than team 5's one. If the difference of the places is the same for both contests then that teams have the equal overall ratings. The latter is also true for the teams that performed equally in both contests.\r", "In our example only teams 1, 4, 5, and 9 participated twice. Team 1 has the highest rating, teams 5 and 9 with the equal rating follow, and team 4 has the lowest rating.\r", "For the teams that participated in one contest only the overall rating and their position in the resulting list cannot be always determined. They are included in the overall list (where the teams which participated twice already placed according to the rules above) if one of the following takes place:\r", "A)\tIf there is a team that participated in both contests and shared the place in one of the contests with the team in question then the latter team shares the overall rating with this team too (if there is more than one such team, then they all should have the same overall rating, otherwise the overall rating of the team in question cannot be determined).\r", "B)\tIf there is a position in the overall list (either at the beginning of the list, at the end of the list, or between some lines), such that before this position only the teams are located which performed better in the same contest as the team in question and after this position only the teams are located which performed worse in the same contest as the team in question, then the team in question occupies this position in the overall list. If more than one team claim to have the same position in the overall list, then their mutual order is defined by their places in their contests (look at the example below for details).\r", "\r", "?Team 3 will occupy the first place in the overall list (rule B).\r", "?The positions of teams 6 and 7 cannot be determined.\r", "?Team 10 will share the overall rating with team 1 (rule A).\r", "?Team 20 will share the overall rating with team 4 (rule A).\r", "?Team 19 will occupy the position between teams 9, 5 and team 4 (rule B).\r", "?Teams 8, 15, 17, 18, 21, and 31 will finish the overall list (rule B). But the first of them will be teams 15 and 8 (that took 6th place) followed by teams 31 and 18 (that took 8th place) and teams 17 and 21 (that took 10th place).\r", "Your task is to write a program that will create the overall rating list using the result tables of two contests and the given rules.\r"], "Input": ["The input file contains a description of the two contests, which are separated by an empty line. Each description starts with a line containing the single integer N (1 <= N <= 100) that indicates how many lines of the contest result table follow. Each line of the contest result table consists of one or more team identifiers separated by spaces.\r", "Every team identifier occurs at most once in the description of each contest.\r"], "OutPut": ["Write to the output file one or more lines with the team identifiers (separated by spaces) that represent the overall rating list. The teams that share the same rating (thus written on the same line) is written in ascending order. The teams for which the overall rating is not determined should be absent in the output file."], "SampleInput": ["6\r\n9\r\n7 1 4\r\n5\r\n15 8\r\n31 18\r\n17\r\n\r\n8\r\n3\r\n5\r\n1 10\r\n6\r\n9\r\n19\r\n4 20\r\n21\r\n"], "SampleOutput": ["3\r\n1 10\r\n5 9\r\n19\r\n4 20\r\n8 15\r\n18 31\r\n17 21"], "Hint": [], "Source": []},
{"Title": ["False coin"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 65536K"], "TotalSubmissions": [" 30359"], "Accepted": [" 8902"], "Description": ["The \"Gold Bar\"bank received information from reliable sources that in their last group of N coins exactly one coin is false and differs in weight from other coins (while all other coins are equal in weight). After the economic crisis they have only a simple balance available (like one in the picture). Using this balance, one is able to determine if the weight of objects in the left pan is less than, greater than, or equal to the weight of objects in the right pan.\r", "In order to detect the false coin the bank employees numbered all coins by the integers from 1 to N, thus assigning each coin a unique integer identifier. After that they began to weight various groups of coins by placing equal numbers of coins in the left pan and in the right pan. The identifiers of coins and the results of the weightings were carefully recorded.\r", "You are to write a program that will help the bank employees to determine the identifier of the false coin using the results of these weightings.\r"], "Input": ["The first line of the input file contains two integers N and K, separated by spaces, where N is the number of coins (2<=N<=1000 ) and K is the number of weightings fulfilled (1<=K<=100). The following 2K lines describe all weightings. Two consecutive lines describe each weighting. The first of them starts with a number Pi (1<=Pi<=N/2), representing the number of coins placed in the left and in the right pans, followed by Pi identifiers of coins placed in the left pan and Pi identifiers of coins placed in the right pan. All numbers are separated by spaces. The second line contains one of the following characters: '<', '>', or '='. It represents the result of the weighting:\r", "'<' means that the weight of coins in the left pan is less than the weight of coins in the right pan,\r", "'>' means that the weight of coins in the left pan is greater than the weight of coins in the right pan,\r", "'=' means that the weight of coins in the left pan is equal to the weight of coins in the right pan.\r"], "OutPut": ["Write to the output file the identifier of the false coin or 0, if it cannot be found by the results of the given weightings."], "SampleInput": ["5 3\r\n2 1 2 3 4\r\n<\r\n1 1 4\r\n=\r\n1 2 5\r\n="], "SampleOutput": ["3"], "Hint": [], "Source": []},
{"Title": ["Web Navigation"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 42031"], "Accepted": [" 18699"], "Description": ["Standard web browsers contain features to move backward and forward among the pages recently visited. One way to implement these features is to use two stacks to keep track of the pages that can be reached by moving backward and forward. In this problem, you are asked to implement this. \r", "The following commands need to be supported: \r", "BACK: Push the current page on the top of the forward stack. Pop the page from the top of the backward stack, making it the new current page. If the backward stack is empty, the command is ignored. \r", "FORWARD: Push the current page on the top of the backward stack. Pop the page from the top of the forward stack, making it the new current page. If the forward stack is empty, the command is ignored. \r", "VISIT "], "Input": ["Input is a sequence of commands. The command keywords BACK, FORWARD, VISIT, and QUIT are all in uppercase. URLs have no whitespace and have at most 70 characters. You may assume that no problem instance requires more than 100 elements in each stack at any time. The end of input is indicated by the QUIT command. "], "OutPut": ["For each command other than QUIT, print the URL of the current page after the command is executed if the command is not ignored. Otherwise, print \"Ignored\". The output for each command should be printed on its own line. No output is produced for the QUIT command. "], "SampleInput": ["VISIT http://acm.ashland.edu/\r\nVISIT http://acm.baylor.edu/acmicpc/\r\nBACK\r\nBACK\r\nBACK\r\nFORWARD\r\nVISIT http://www.ibm.com/\r\nBACK\r\nBACK\r\nFORWARD\r\nFORWARD\r\nFORWARD\r\nQUIT"], "SampleOutput": ["http://acm.ashland.edu/\r\nhttp://acm.baylor.edu/acmicpc/\r\nhttp://acm.ashland.edu/\r\nhttp://www.acm.org/\r\nIgnored\r\nhttp://acm.ashland.edu/\r\nhttp://www.ibm.com/\r\nhttp://acm.ashland.edu/\r\nhttp://www.acm.org/\r\nhttp://acm.ashland.edu/\r\nhttp://www.ibm.com/\r\nIgnored"], "Hint": [], "Source": []},
{"Title": ["The Same Game"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 7686"], "Accepted": [" 2740"], "Description": ["The game named \"Same\" is a single person game played on a 10 \\Theta 15 board. Each square contains a ball colored red (R), green (G), or blue (B). Two balls belong to the same cluster if they have the same color, and one can be reached from another by following balls of the same color in the four directions up, down, left, and right. At each step of the game, the player chooses a ball whose cluster has at least two balls and removes all balls in the cluster from the board. Then, the board is \"compressed\" in two steps: \r", "1. Shift the remaining balls in each column down to fill the empty spaces. The order of the balls in each column is preserved. \r", "2. If a column becomes empty, shift the remaining columns to the left as far as possible. The order of the columns is preserved. \r", "For example, choosing the ball at the bottom left corner in the sub-board below causes: \r", "\r", "The objective of the game is to remove every ball from the board, and the game is over when every ball is removed or when every cluster has only one ball. The scoring of each game is as follows. The player starts with a score of 0. When a cluster of m balls is removed, the player's score increases by (m-2)^2 . A bonus of 1000 is given if every ball is removed at the end of the game. \r", "You suspect that a good strategy might be to choose the ball that gives the largest possible cluster at each step, and you want to test this strategy by writing a program to simulate games played using this strategy. If there are two or more balls to choose from, the program should choose the leftmost ball giving the largest cluster. If there is still a tie, it should choose the bottommost ball of these leftmost balls. "], "Input": ["You will be given a number of games in the input. The first line of input contains a positive integer giving the number of games to follow. The initial arrangement of the balls of each game is given one row at a time, from top to bottom. Each row contains 15 characters, each of which is one of \"R\", \"G\", or \"B\", specifying the colors of the balls in the row from left to right. A blank line precedes each game. "], "OutPut": ["For each game, print the game number, followed by a new line, followed by information about each move, followed by the final score. Each move should be printed in the format: \r", "Move x at (r,c): removed b balls of color C, got s points. \r", "where x is the move number, r and c are the row number and column number of the chosen ball, respectively. The rows are numbered from 1 to 10 from the bottom, and columns are numbered from 1 to 15 from the left. b is the number of balls in the cluster removed. C is one of \"R\", \"G\", or \"B\", indicating the color of the balls removed. s is the score for this move. The score does not include the 1000 point bonus if all the balls are removed after the move. \r", "The final score should be reported as follows: \r", "Final score: s, with b balls remaining. \r", "Insert a blank line between the output of each game. Use the plural forms \"balls\" and \"points\" even if the corresponding value is 1. "], "SampleInput": ["3 \r\nRGGBBGGRBRRGGBG \r\nRBGRBGRBGRBGRBG\r\nRRRRGBBBRGGRBBB\r\nGGRGBGGBRRGGGBG\r\nGBGGRRRRRBGGRRR\r\nBBBBBBBBBBBBBBB\r\nBBBBBBBBBBBBBBB\r\nRRRRRRRRRRRRRRR\r\nRRRRRRGGGGRRRRR\r\nGGGGGGGGGGGGGGG\r\n\r\nRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRR\r\nGGGGGGGGGGGGGGG\r\nGGGGGGGGGGGGGGG\r\nBBBBBBBBBBBBBBB\r\nBBBBBBBBBBBBBBB\r\nRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRR \r\nGGGGGGGGGGGGGGG\r\nGGGGGGGGGGGGGGG\r\n\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG"], "SampleOutput": ["Game 1: \r\n\r\nMove 1 at (4,1): removed 32 balls of color B, got 900 points. \r\nMove 2 at (2,1): removed 39 balls of color R, got 1369 points. \r\nMove 3 at (1,1): removed 37 balls of color G, got 1225 points. \r\nMove 4 at (3,4): removed 11 balls of color B, got 81 points. \r\nMove 5 at (1,1): removed 8 balls of color R, got 36 points. \r\nMove 6 at (2,1): removed 6 balls of color G, got 16 points. \r\nMove 7 at (1,6): removed 6 balls of color B, got 16 points. \r\nMove 8 at (1,2): removed 5 balls of color R, got 9 points. \r\nMove 9 at (1,2): removed 5 balls of color G, got 9 points. \r\nFinal score: 3661, with 1 balls remaining. \r\n\r\nGame 2: \r\n\r\nMove 1 at (1,1): removed 30 balls of color G, got 784 points. \r\nMove 2 at (1,1): removed 30 balls of color R, got 784 points. \r\nMove 3 at (1,1): removed 30 balls of color B, got 784 points. \r\nMove 4 at (1,1): removed 30 balls of color G, got 784 points. \r\nMove 5 at (1,1): removed 30 balls of color R, got 784 points. \r\nFinal score: 4920, with 0 balls remaining. \r\n\r\nGame 3: \r\n\r\nFinal score: 0, with 150 balls remaining. "], "Hint": [], "Source": []},
{"Title": ["Cipher"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 24793"], "Accepted": [" 6974"], "Description": ["Bob and Alice started to use a brand-new encoding scheme. Surprisingly it is not a Public Key Cryptosystem, but their encoding and decoding is based on secret keys. They chose the secret key at their last meeting in Philadelphia on February 16th, 1996. They chose as a secret key a sequence of n distinct integers, a1 ; . . .; an, greater than zero and less or equal to n. The encoding is based on the following principle. The message is written down below the key, so that characters in the message and numbers in the key are correspondingly aligned. Character in the message at the position i is written in the encoded message at the position ai, where ai is the corresponding number in the key. And then the encoded message is encoded in the same way. This process is repeated k times. After kth encoding they exchange their message.\r", "\r", "The length of the message is always less or equal than n. If the message is shorter than n, then spaces are added to the end of the message to get the message with the length n.\r", "\r", "Help Alice and Bob and write program which reads the key and then a sequence of pairs consisting of k and message to be encoded k times and produces a list of encoded messages. \r"], "Input": ["The input file consists of several blocks. Each block has a number 0 < n <= 200 in the first line. The next line contains a sequence of n numbers pairwise distinct and each greater than zero and less or equal than n. Next lines contain integer number k and one message of ascii characters separated by one space. The lines are ended with eol, this eol does not belong to the message. The block ends with the separate line with the number 0. After the last block there is in separate line the number 0. "], "OutPut": ["Output is divided into blocks corresponding to the input blocks. Each block contains the encoded input messages in the same order as in input file. Each encoded message in the output file has the lenght n. After each block there is one empty line. "], "SampleInput": ["10\r\n4 5 3 7 2 8 1 6 10 9\r\n1 Hello Bob\r\n1995 CERC\r\n0\r\n0\r\n"], "SampleOutput": ["BolHeol  b\r\nC RCE\r\n\r\n"], "Hint": [], "Source": []},
{"Title": ["Department"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2418"], "Accepted": [" 609"], "Description": ["The Department of Security has a new headquarters building. The building has several floors, and on each floor there are rooms numbered xxyy where yy stands for the room number and xx for the floor number, 0 < xx; yy <= 10. The building has `pater-noster' elevator, i.e. elevator build up from several cabins running all around. From time to time the agents must visit the headquarters. During their visit they want to visit several rooms and in each room they want to stay for some time. Due to the security reasons, there can be only one agent in the same room at the same time, The same rule applies to the elevators. The visits are planned in the way ensuring they can be accomplished within one day. Each agent visits the headquarters at most once a day.\r", "\r", "Each agent enters the building at the 1st floor, passes the reception and then starts to visit the rooms according to his/her list. Agents always visit the rooms by the increasing room numbers. The agents form a linear hierarchy according to which they have assigned their one letter personal codes. The agents with higher seniority have lexicographically smaller codes. No two agents have the same code.\r", "\r", "If more then one agent want to enter a room, or an elevator, the agents have to form a queue. In each queue, they always stand according to their codes. The higher the seniority of the agent, the closer to the top of the queue he stands. Every 5 s (seconds) the first agent in the queue in front of the elevator enters the elevator. After visiting the last room in the headquarters each agent uses if necessary elevator to the first floor and exits the building.\r", "\r", "The times necessary to move from a certain point in the headquarters to another are set as follows: Entering the building, i.e. passing the reception and reaching the elevator, or a room on the first floor takes 30 s. Exiting the building, i.e. stepping out of the elevator or a room on the first floor and passing the reception takes also 30 s. On the same floor, the transfer from the elevator to the room (or to the queue in front of the room), or from the room to the elevator (or to the queue in front of the elevator), or from one room to another (or to the queue in front of the room) takes 10 s. The transfer from one floor to the next floor above or below in an elevator takes 30 s. Write a program that determines time course of agent's visits in the headquarters. \r", "\r"], "Input": ["The input file contains the descriptions of n >= 0 visits of different agents. The first line of the description of each visit consists of agent's one character code C, C = A, . . ., Z, and the time when the agent enters the headquarters. The time is in the format HH:MM:SS (hours, minutes, seconds). The next lines (there will be at least one) contain the room number, and the length of time intended to stay in the room, time is in seconds. Each room is in a separate line. The list of rooms is sorted according to the increasing room number. The list of rooms ends by the line containing 0. The list of the descriptions of visits ends by the line containing the character dot. "], "OutPut": ["The output contains detailed records of each agent's visit in the headquarters. For each agent, there will be a block. Blocks are ordered in the order of increasing agent's codes. Blocks are separated by an empty line. After the last block there is an empty line too. The first line of a block contains the code of agent. Next lines contain the starting and ending time (in format HH:MM:SS) and the descriptions of his/her activity. Time data will be separated by one blank character. Description will be separated from time by one blank character. Description will have a form Entry, Exit or Message. The Message can be one of the following: Waiting in elevator queue, Waiting in front of room RoomNumber, Transfer from room RoomNumber to room RoomNumber, Transfer from elevator to room RoomNumber, Transfer from RoomNumber to elevator, Stay in room RoomNumber, Stay in elevator. "], "SampleInput": ["A 10:00:00\r\n0101 100\r\n0110 50\r\n0202 90\r\n0205 50\r\n0\r\nB 10:01:00\r\n0105 100\r\n0201 5\r\n0205 200\r\n0\r\n.\r\n"], "SampleOutput": ["A\r\n10:00:00 10:00:30 Entry\r\n10:00:30 10:02:10 Stay in room 0101\r\n10:02:10 10:02:20 Transfer from room 0101 to room 0110\r\n10:02:20 10:03:10 Stay in room 0110\r\n10:03:10 10:03:20 Transfer from room 0110 to elevator\r\n10:03:20 10:03:50 Stay in elevator\r\n10:03:50 10:04:00 Transfer from elevator to room 0202\r\n10:04:00 10:05:30 Stay in room 0202\r\n10:05:30 10:05:40 Transfer from room 0202 to room 0205\r\n10:05:40 10:07:40 Waiting in front of room 0205\r\n10:07:40 10:08:30 Stay in room 0205\r\n10:08:30 10:08:40 Transfer from room 0205 to elevator\r\n10:08:40 10:09:10 Stay in elevator\r\n10:09:10 10:09:40 Exit\r\n\r\nB\r\n10:01:00 10:01:30 Entry\r\n10:01:30 10:03:10 Stay in room 0105\r\n10:03:10 10:03:20 Transfer from room 0105 to elevator\r\n10:03:20 10:03:25 Waiting in elevator queue\r\n10:03:25 10:03:55 Stay in elevator\r\n10:03:55 10:04:05 Transfer from elevator to room 0201\r\n10:04:05 10:04:10 Stay in room 0201\r\n10:04:10 10:04:20 Transfer from room 0201 to room 0205\r\n10:04:20 10:07:40 Stay in room 0205\r\n10:07:40 10:07:50 Transfer from room 0205 to elevator\r\n10:07:50 10:08:20 Stay in elevator\r\n10:08:20 10:08:50 Exit\r\n"], "Hint": [], "Source": []},
{"Title": ["Tester Program"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 3351"], "Accepted": [" 1230"], "Description": ["Tester Program\r", "\r", "For this contest, we first designed the following problem (note that you do not have to solve it!):\r", "\r", "\r", "In ACM/ICPC contests, you'll often see questions such as \"find the shortest path out of this maze.\" Let's turn this on its head and ask \"given a path, find a maze for which the given path is the shortest path.\" Our paths will run vertically and horizontally between the regularly spaced points of a rectangular grid. The problem is to compute a set of unit-length baffles (walls) separating grid points that forces the given path to be the unique shortest path from its starting point to the end point. To make things more interesting, we will require that there should be no redundant walls constructed in the sense that it should not be possible to remove any wall and still have the given path as the unique shortest path. In the following figure for example, consider the path through the 8 ? 5 grid on the left maze of the top row. The wall placements in the two mazes to its right (top row) make that path unique. The two mazes on the lower row are faulty.\r", "The path is not unique in the one on the left, and there are some redundant walls on the right.\r", "\r", "\r", "The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. The first line of each test case consists of two integers W and H (1 ≤ W, H ≤ 100) giving the width and height of the grid respectively. The second line of the test case contains a path. The path always starts in the lowerleft corner, (0, 0). It is specified as a string of U (up), D (down), L (left), and R (right) characters (with no embedded white space). You may assume that the path remains within the bounds of the maze and does not intersect itself. It may end anywhere in the maze (i.e., not necessarily in a corner or against a wall).\r", "\r", "First line of the output for the i-th test case (starting from one) should contain an integer M, the number of walls used in the solution. Following the first line, there are M lines each containing a wall specification in the form of four consecutive integers corresponding to two pairs of (x, y) coordinates specifying adjacent grid points separated by the wall (0 ≤ x < W and 0 ≤ y < H). Note that the possible output is not unique. There should no blank line in the output.\r", "\r", "2\r", "8 5\r", "RRRUULLURRRRDDRRUUU\r", "4 3\r", "RRRUU\r", "\r", "19\r", "0 0 0 1\r", "1 0 1 1\r", "2 0 2 1\r", "2 1 3 1\r", "3 0 4 0\r", "3 1 4 1\r", "3 2 4 2\r", "3 2 3 3\r", "2 2 2 3\r", "4 2 4 3\r", "0 3 0 4\r", "1 3 1 4\r", "2 3 2 4\r", "3 3 3 4\r", "4 3 4 4\r", "5 3 5 4\r", "5 3 6 3\r", "5 2 6 2\r", "6 1 6 2\r", "2\r", "2 2 3 2\r", "2 2 2 1\r", "This is the end of the original problem statement! Being lazy, we did not want to spend time to write a tester program for this problem, and decided to have you write this for us!\r", "Write a program that receives both input and output as one input test case, and write as output CORRECT or INCORRECT to indicate whether or not the output is correct."], "Input": ["You read both input and output of the original problem from the standard input;it has each output just after each case's input of the original problem.\r", "Note that the output of original does not have formatting problems, i.e.,\r", "  The number of lines in the output file is correct and is as supposed to be.\r", "  There are no leading or trailing white space characters in output lines.\r", "  Wall specifications are correct, meaning that the four numbers correctly specify a possible wall within the boundary of the maze."], "OutPut": ["Your program should write a single line for each test case of the input containing a single word CORRECT or INCORRECT, indicating the original problem has correctly produced the output for that test case or not."], "SampleInput": ["2\r\n8 5\r\nRRRUULLURRRRDDRRUUU\r\n19\r\n0 0 0 1\r\n1 0 1 1\r\n2 0 2 1\r\n2 1 3 1\r\n3 0 4 0\r\n3 1 4 1\r\n3 2 4 2\r\n3 2 3 3\r\n2 2 2 3\r\n4 2 4 3\r\n0 3 0 4\r\n1 3 1 4\r\n2 3 2 4\r\n3 3 3 4\r\n4 3 4 4\r\n5 3 5 4\r\n5 3 6 3\r\n5 2 6 2\r\n6 1 6 2\r\n4 3\r\nRRRUU\r\n2\r\n2 2 3 2\r\n2 2 2 1"], "SampleOutput": ["CORRECT\r\nINCORRECT"], "Hint": [", First Iran Nationwide Internet Programming Contest"], "Source": []},
{"Title": ["The Fun Number System"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 12394"], "Accepted": [" 4320"], "Description": ["In a k bit 2's complement number, where the bits are indexed from 0 to k-1, the weight of the most significant bit (i.e., in position k-1), is -2^(k-1), and the weight of a bit in any position i (0 ≤ i < k-1) is 2^i. For example, a 3 bit number 101 is -2^2 + 0 + 2^0 = -3. A negatively weighted bit is called a negabit (such as the most significant bit in a 2's complement number), and a positively weighted bit is called a posibit.\r", "A Fun number system is a positional binary number system, where each bit can be either a negabit, or a posibit. For example consider a 3-bit fun number system Fun3, where bits in positions 0, and 2 are posibits, and the bit in position 1 is a negabit. (110)Fun3 is evaluated as 2^2-2^1 + 0 = 3. Now you are going to have fun with the Fun number systems! You are given the description of a k-bit Fun number system Funk, and an integer N (possibly negative. You should determine the k bits of a representation of N in Funk, or report that it is not possible to represent the given N in the given Funk. For example, a representation of -1 in the Fun3 number system (defined above), is 011 (evaluated as 0 - 2^1 + 2^0), and\r", "representing 6 in Fun3 is impossible."], "Input": ["The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. Each test case is given in three consecutive lines. In the first line there is a positive integer k (1 ≤ k ≤ 64). In the second line of a test data there is a string of length k, composed only of letters n, and p, describing the Fun number system for that test data, where each n (p) indicates that the bit in that position is a negabit (posibit).\r", "The third line of each test data contains an integer N (-2^63 ≤ N < 2^63), the number to be represented in the Funk number\r", "system by your program."], "OutPut": ["For each test data, you should print one line containing either a k-bit string representing the given number N in the Funk number system, or the word Impossible, when it is impossible to represent the given number."], "SampleInput": ["2\r\n3\r\npnp\r\n6\r\n4\r\nppnn\r\n10"], "SampleOutput": ["Impossible\r\n1110"], "Hint": [", First Iran Nationwide Internet Programming Contest"], "Source": []},
{"Title": ["Packing Unit 4D Cubes"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 2988"], "Accepted": [" 1072"], "Description": ["\r", "\r", "\r", "We usually think that there are three geometric dimensions; the fourth dimension is usually time. However, the Association for Customizing Machines (ACM) has to deal with four geometrical dimensions for their strange customer EE3 who needs to pack four dimensional products into perpendicular parallelepipeds before shipping them to the newly emerged market niche just on the outskirts of the Milky Way.\r", "Each of EE3 products consists of a number of unit 4D cubes that are glued together at their faces. A face of a 4D cube is a 3D cube and each 4D cube has 8 such faces. The picture on the left shows a 4D cube projected into a plane with the four principal, orthogonal axes shown. It takes a bit of effort to stretch our imagination and see the faces of a 4D cube in such a projection. The pictures below try to illustrate how the two faces along each of the four axes are situated in 4D. Again, using just the planar projection it is not so easy to illustrate and takes some effort to see. But we have done a good job, didn't we?\r", "\r", "\r", "\r", "Each EE3 product to be packed consists of a number of unit 4D cubes that are glued together along their faces which are 3D cubes. Your job is simple: find the minimal volume measured in the number of unit 4D cubes of a perpendicular parallelepiped (a 4D box) into which the product can be packed before shipping."], "Input": ["The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by input data for each test case describing one EE3 product. The first line of each test case is an integer n (1 ≤ n ≤ 100) which is the number of unit 4D cubes used in the product. Next, there are n lines, each describing one unit cube and contains 9 nonnegative integer numbers.\r", "The first number, a positive integer, is the unique identifier of a cube and the remaining 8 numbers give the identities of neighbors of the cube listed in the following order:\r", "?the first two numbers are identifiers of the cubes glued to the opposing sides of the given cube along the x1 axis as seen looking in the direction of the x1 axis;\r", "?the next two numbers as above but for the x2 axis;\r", "?the next two numbers as above but for the x3 axis;\r", "?the next two numbers as above but for the x4 axis;\r", "If a cube does not have a neighbor glued to one of its faces we use 0 instead of a cube identifier.\r", "The problem is that the employees of ACM may produce inconsistent descriptions of EE3 products. There are two sources of such inconsistencies:\r", "?A consistent description must be symmetric, i.e. if cube x is glued to cube y at some face then cube y must be glued to cube x at the corresponding face along the same axis. The following description is inconsistent:\r", "3 0 0 1 0 0 0 0 0\r", "1 0 0 3 0 0 0 0 0\r", "?Any description must describe a single solid, i.e. there must be only one component in the product. Thus the following is inconsistent:\r", "1 2 0 0 0 0 0 0 0\r", "2 0 1 0 0 0 0 0 0\r", "3 0 0 4 0 0 0 0 0\r", "4 0 0 0 3 0 0 0 0"], "OutPut": ["There should be one output line per test case containing either the number of unit 4D cubes in the smallest 4D perpendicular parallelepiped oriented along the axes into which the product can be packed if the description is consistent, or the word Inconsistent, otherwise."], "SampleInput": ["1\r\n9\r\n1 2 3 4 5 6 7 8 9\r\n2 0 1 0 0 0 0 0 0\r\n3 1 0 0 0 0 0 0 0\r\n4 0 0 0 1 0 0 0 0\r\n5 0 0 1 0 0 0 0 0\r\n6 0 0 0 0 0 1 0 0\r\n7 0 0 0 0 1 0 0 0\r\n8 0 0 0 0 0 0 0 1\r\n9 0 0 0 0 0 0 1 0"], "SampleOutput": ["81"], "Hint": [", First Iran Nationwide Internet Programming Contest"], "Source": []},
{"Title": ["2D-Nim"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 4764"], "Accepted": [" 2185"], "Description": ["The 2D-Nim board game is played on a grid, with pieces on the grid points. On each move, a player may remove any positive number of contiguous pieces in any row or column. The player who removes the last piece wins. For example, consider the left grid in the following figure.\r", "\r", "The player on move may remove (A), (B), (A, B), (A, B, C), or (B,F), etc., but may not remove (A, C), (D, E), (H, I) or (B, G).\r", "For purposes of writing 2D-Nim-playing software, a certain programmer wants to be able to tell whether or not a certain position has ever been analyzed previously. Because of the rules of 2D-Nim, it should be clear that the two boards above are essentially equivalent. That is, if there is a winning strategy for the left board, the same one must apply to the right board. The fact that the contiguous groups of pieces appear in different places and orientations is clearly irrelevant. All that matters is that the same clusters of pieces (a cluster being a set of contiguous pieces that can be reached from each other by a sequence of one-square vertical or horizontal moves) appear in each. For example, the cluster of pieces (A, B, C, F, G) appears on both boards, but it has been reflected (swapping left and right), rotated, and moved. Your task is to determine whether two given board states are equivalent in this sense or not."], "Input": ["The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. The first line of each test case consists of three integers W, H, and n (1 ≤ W, H ≤ 100). W is the width, and H is the height of the grid in terms of the number of grid points. n is the number of pieces on each board. The second line of each test case contains a sequence of n pairs of integers xi , yi, giving the coordinates of the pieces on the first board (0 ≤ xi < W and 0 ≤ yi < H). The third line of the test case describes the coordinates of the pieces on the second board in the same format."], "OutPut": ["Your program should produce a single line for each test case containing a word YES or NO indicating whether the two boards are equivalent or not."], "SampleInput": ["2\r\n8 5 11\r\n0 0 1 0 2 0 5 0 7 0 1 1 2 1 5 1 3 3 5 2 4 4\r\n0 4 0 3 0 2 1 1 1 4 1 3 3 3 5 2 6 2 7 2 7 4\r\n8 5 11\r\n0 0 1 0 2 0 5 0 7 0 1 1 2 1 5 1 3 3 6 1 4 4\r\n0 4 0 3 0 2 1 1 1 4 1 3 3 3 5 2 6 2 7 2 7 4"], "SampleOutput": ["YES\r\nNO"], "Hint": [", First Iran Nationwide Internet Programming Contest"], "Source": []},
{"Title": ["Anniversary Cake"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 19982"], "Accepted": [" 6570"], "Description": ["Nahid Khaleh decides to invite the kids of the \"Shahr-e Ghashang\" to her wedding anniversary. She wants to prepare a square-shaped chocolate cake with known size. She asks each invited person to determine the size of the piece of cake that he/she wants (which should also be square-shaped). She knows that Mr. Kavoosi would not bear any wasting of the cake. She wants to know whether she can make a square cake with that size that serves everybody exactly with the requested size, and without any waste."], "Input": ["The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by input data for each test case. Each test case consist of a single line containing an integer s, the side of the cake, followed by an integer n (1 ≤ n ≤ 16), the number of cake pieces, followed by n integers (in the range 1..10) specifying the side of each piece."], "OutPut": ["There should be one output line per test case containing one of the words KHOOOOB! or HUTUTU! depending on whether the cake can be cut into pieces of specified size without any waste or not."], "SampleInput": ["2\r\n4 8 1 1 1 1 1 3 1 1\r\n5 6 3 3 2 1 1 1"], "SampleOutput": ["KHOOOOB!\r\nHUTUTU!"], "Hint": [", First Iran Nationwide Internet Programming Contest"], "Source": []},
{"Title": ["Number Sequence"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 46942"], "Accepted": [" 13608"], "Description": ["A single positive integer i is given. Write a program to find the digit located in the position i in the sequence of number groups S1S2...Sk. Each group Sk consists of a sequence of positive integer numbers ranging from 1 to k, written one after another.\r", "For example, the first 80 digits of the sequence are as follows:\r", "11212312341234512345612345671234567812345678912345678910123456789101112345678910"], "Input": ["The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by one line for each test case. The line for a test case contains the single integer i (1 ≤ i ≤ 2147483647)"], "OutPut": ["There should be one output line per test case containing the digit located in the position i."], "SampleInput": ["2\r\n8\r\n3"], "SampleOutput": ["2\r\n2"], "Hint": [", First Iran Nationwide Internet Programming Contest"], "Source": []},
{"Title": ["Communication System"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 36024"], "Accepted": [" 12651"], "Description": ["We have received an order from Pizoor Communications Inc. for a special communication system. The system consists of several devices. For each device, we are free to choose from several manufacturers. Same devices from two manufacturers differ in their maximum bandwidths and prices. \r", "By overall bandwidth (B) we mean the minimum of the bandwidths of the chosen devices in the communication system and the total price (P) is the sum of the prices of all chosen devices. Our goal is to choose a manufacturer for each device to maximize B/P.\r"], "Input": ["The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. Each test case starts with a line containing a single integer n (1 ≤ n ≤ 100), the number of devices in the communication system, followed by n lines in the following format: the i-th line (1 ≤ i ≤ n) starts with mi (1 ≤ mi ≤ 100), the number of manufacturers for the i-th device, followed by mi pairs of positive integers in the same line, each indicating the bandwidth and the price of the device respectively, corresponding to a manufacturer."], "OutPut": ["Your program should produce a single line for each test case containing a single number which is the maximum possible B/P for the test case. Round the numbers in the output to 3 digits after decimal point.\r"], "SampleInput": ["1 3\r\n3 100 25 150 35 80 25\r\n2 120 80 155 40\r\n2 100 100 120 110"], "SampleOutput": ["0.649"], "Hint": [", First Iran Nationwide Internet Programming Contest"], "Source": []},
{"Title": ["Packets"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 76024"], "Accepted": [" 25554"], "Description": ["A factory produces products packed in square packets of the same height h and of the sizes 1*1, 2*2, 3*3, 4*4, 5*5, 6*6. These products are always delivered to customers in the square parcels of the same height h as the products have and of the size 6*6. Because of the expenses it is the interest of the factory as well as of the customer to minimize the number of parcels necessary to deliver the ordered products from the factory to the customer. A good program solving the problem of finding the minimal number of parcels necessary to deliver the given products according to an order would save a lot of money. You are asked to make such a program. "], "Input": ["The input file consists of several lines specifying orders. Each line specifies one order. Orders are described by six integers separated by one space representing successively the number of packets of individual size from the smallest size 1*1 to the biggest size 6*6. The end of the input file is indicated by the line containing six zeros. "], "OutPut": ["The output file contains one line for each line in the input file. This line contains the minimal number of parcels into which the order from the corresponding line of the input file can be packed. There is no line in the output file corresponding to the last ``null'' line of the input file. "], "SampleInput": ["0 0 4 0 0 1 \r\n7 5 1 0 0 0 \r\n0 0 0 0 0 0 "], "SampleOutput": ["2 \r\n1 "], "Hint": [], "Source": []},
{"Title": ["Numbers That Count"], "TimeLimit": [" 1000MS"], "MemoryLimit": [" 10000K"], "TotalSubmissions": [" 23851"], "Accepted": [" 8061"], "Description": ["\"Kronecker's Knumbers\" is a little company that manufactures plastic digits for use in signs (theater marquees, gas station price displays, and so on). The owner and sole employee, Klyde Kronecker, keeps track of how many digits of each type he has used by maintaining an inventory book. For instance, if he has just made a sign containing the telephone number \"5553141\", he'll write down the number \"5553141\" in one column of his book, and in the next column he'll list how many of each digit he used: two 1s, one 3, one 4, and three 5s. (Digits that don't get used don't appear in the inventory.) He writes the inventory in condensed form, like this: \"21131435\". \r", "\r", "The other day, Klyde filled an order for the number 31123314 and was amazed to discover that the inventory of this number is the same as the number---it has three 1s, one 2, three 3s, and one 4! He calls this an example of a \"self-inventorying number\", and now he wants to find out which numbers are self-inventorying, or lead to a self-inventorying number through iterated application of the inventorying operation described below. You have been hired to help him in his investigations. \r", "\r", "Given any non-negative integer n, its inventory is another integer consisting of a concatenation of integers c1 d1 c2 d2 ... ck dk , where each ci and di is an unsigned integer, every ci is positive, the di satisfy 0<=d1<d2<...<dk<=9, and, for each digit d that appears anywhere in n, d equals di for some i and d occurs exactly ci times in the decimal representation of n. For instance, to compute the inventory of 5553141 we set c1 = 2, d1 = 1, c2 = 1, d2 = 3, etc., giving 21131435. The number 1000000000000 has inventory 12011 (\"twelve 0s, one 1\"). \r", "\r", "An integer n is called self-inventorying if n equals its inventory. It is called self-inventorying after j steps (j>=1) if j is the smallest number such that the value of the j-th iterative application of the inventory function is self-inventorying. For instance, 21221314 is self-inventorying after 2 steps, since the inventory of 21221314 is 31321314, the inventory of 31321314 is 31123314, and 31123314 is self-inventorying. \r", "\r", "Finally, n enters an inventory loop of length k (k>=2) if k is the smallest number such that for some integer j (j>=0), the value of the j-th iterative application of the inventory function is the same as the value of the (j + k)-th iterative application. For instance, 314213241519 enters an inventory loop of length 2, since the inventory of 314213241519 is 412223241519 and the inventory of 412223241519 is 314213241519, the original number (we have j = 0 in this case). \r", "\r", "Write a program that will read a sequence of non-negative integers and, for each input value, state whether it is self-inventorying, self-inventorying after j steps, enters an inventory loop of length k, or has none of these properties after 15 iterative applications of the inventory function. "], "Input": ["A sequence of non-negative integers, each having at most 80 digits, followed by the terminating value -1. There are no extra leading zeros. "], "OutPut": ["For each non-negative input value n, output the appropriate choice from among the following messages (where n is the input value, j is a positive integer, and k is a positive integer greater than 1): \r", "n is self-inventorying \r", "n is self-inventorying after j steps \r", "n enters an inventory loop of length k \r", "n can not be classified after 15 iterations "], "SampleInput": ["22 \r\n31123314 \r\n314213241519 \r\n21221314 \r\n111222234459 \r\n-1"], "SampleOutput": ["22 is self-inventorying \r\n31123314 is self-inventorying \r\n314213241519 enters an inventory loop of length 2 \r\n21221314 is self-inventorying after 2 steps \r\n111222234459 enters an inventory loop of length 2 "], "Hint": [], "Source": []}]